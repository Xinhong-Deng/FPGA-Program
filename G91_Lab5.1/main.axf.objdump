
P:/G91_Lab5.1/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	30 0a 00 00 3c 0a 00 00 48 0a 00 00 54 0a 00 00     0...<...H...T...
      30:	60 0a 00 00 f0 1f 00 00 d8 08 00 00 6c 0a 00 00     `...........l...

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0007ac 	bl	1f8c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000020d8 	.word	0x000020d8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031330 	.word	0x00031330

00000124 <__cs3_heap_start_ptr>:
     124:	00031358 	.word	0x00031358

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031338 	.word	0x00031338
     170:	0003133b 	.word	0x0003133b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031338 	.word	0x00031338
     1bc:	00031338 	.word	0x00031338
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031338 	.word	0x00031338
     200:	00000000 	.word	0x00000000
     204:	0000207c 	.word	0x0000207c

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	0000207c 	.word	0x0000207c
     250:	0003133c 	.word	0x0003133c
     254:	000020d8 	.word	0x000020d8
     258:	00000000 	.word	0x00000000

0000025c <makeWave>:
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/slider_switches.h"

float frequencies[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626};

double makeWave(float f, int t) {
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd018 	sub	sp, sp, #24
     268:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     26c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int index = (((int)f) * t)%48000;
     270:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     274:	eb000662 	bl	1c04 <__aeabi_f2iz>
     278:	e1a03000 	mov	r3, r0
     27c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     280:	e0030392 	mul	r3, r2, r3
     284:	e30129f1 	movw	r2, #6641	; 0x19f1
     288:	e3402576 	movt	r2, #1398	; 0x576
     28c:	e0c21392 	smull	r1, r2, r2, r3
     290:	e1a01542 	asr	r1, r2, #10
     294:	e1a02fc3 	asr	r2, r3, #31
     298:	e0622001 	rsb	r2, r2, r1
     29c:	e30b1b80 	movw	r1, #48000	; 0xbb80
     2a0:	e0020291 	mul	r2, r1, r2
     2a4:	e0623003 	rsb	r3, r2, r3
     2a8:	e50b3008 	str	r3, [r11, #-8]
	double signal = sine[index];
     2ac:	e3023100 	movw	r3, #8448	; 0x2100
     2b0:	e3403000 	movt	r3, #0
     2b4:	e51b2008 	ldr	r2, [r11, #-8]
     2b8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     2bc:	e1a00003 	mov	r0, r3
     2c0:	eb0004da 	bl	1630 <__aeabi_i2d>
     2c4:	e1a02000 	mov	r2, r0
     2c8:	e1a03001 	mov	r3, r1
     2cc:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

	return signal;
     2d0:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
}
     2d4:	e1a00002 	mov	r0, r2
     2d8:	e1a01003 	mov	r1, r3
     2dc:	e24bd004 	sub	sp, r11, #4
     2e0:	e8bd8800 	pop	{r11, pc}

000002e4 <main>:


int main() {
     2e4:	e92d4830 	push	{r4, r5, r11, lr}
     2e8:	e28db00c 	add	r11, sp, #12
     2ec:	e24dd060 	sub	sp, sp, #96	; 0x60
	
	int_setup(1, (int []){199});
     2f0:	e3a030c7 	mov	r3, #199	; 0xc7
     2f4:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     2f8:	e24b302c 	sub	r3, r11, #44	; 0x2c
     2fc:	e3a00001 	mov	r0, #1
     300:	e1a01003 	mov	r1, r3
     304:	eb0001e7 	bl	aa8 <int_setup>
	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0; 
     308:	e3a03001 	mov	r3, #1
     30c:	e54b3044 	strb	r3, [r11, #-68]	; 0xffffffbc
	hps_tim.timeout = 20; 
     310:	e3a03014 	mov	r3, #20
     314:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
	hps_tim.LD_en = 1; 
     318:	e3a03001 	mov	r3, #1
     31c:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
	hps_tim.INT_en = 1; 
     320:	e3a03001 	mov	r3, #1
     324:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
	hps_tim.enable = 1; 
     328:	e3a03001 	mov	r3, #1
     32c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc

	HPS_TIM_config_ASM(&hps_tim);
     330:	e24b3044 	sub	r3, r11, #68	; 0x44
     334:	e1a00003 	mov	r0, r3
     338:	eb00020a 	bl	b68 <HPS_TIM_config_ASM>

	int breakchar = 0;
     33c:	e3a03000 	mov	r3, #0
     340:	e50b3010 	str	r3, [r11, #-16]

	int t = 0;
     344:	e3a03000 	mov	r3, #0
     348:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec


	char value;
	int amplitude = 1;
     34c:	e3a03001 	mov	r3, #1
     350:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	double signalSum = 0.0;
     354:	e3a02000 	mov	r2, #0
     358:	e3a03000 	mov	r3, #0
     35c:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
     360:	ea000000 	b	368 <main+0x84>

			if(t==47999){
				t=0;
			}
		
	}
     364:	e1a00000 	nop			; (mov r0, r0)
	double signalSum = 0.0;
	int signals[8];

	while(1) {

				if (read_ps2_data_ASM(&value)) {
     368:	e24b3045 	sub	r3, r11, #69	; 0x45
     36c:	e1a00003 	mov	r0, r3
     370:	eb000309 	bl	f9c <read_ps2_data_ASM>
     374:	e1a03000 	mov	r3, r0
     378:	e3530000 	cmp	r3, #0
     37c:	0a000096 	beq	5dc <main+0x2f8>
					switch (value){
     380:	e55b3045 	ldrb	r3, [r11, #-69]	; 0xffffffbb
     384:	e3530032 	cmp	r3, #50	; 0x32
     388:	0a000075 	beq	564 <main+0x280>
     38c:	e3530032 	cmp	r3, #50	; 0x32
     390:	ca00000d 	bgt	3cc <main+0xe8>
     394:	e3530022 	cmp	r3, #34	; 0x22
     398:	0a00007a 	beq	588 <main+0x2a4>
     39c:	e3530022 	cmp	r3, #34	; 0x22
     3a0:	ca000004 	bgt	3b8 <main+0xd4>
     3a4:	e353001b 	cmp	r3, #27
     3a8:	0a000020 	beq	430 <main+0x14c>
     3ac:	e353001c 	cmp	r3, #28
     3b0:	0a000013 	beq	404 <main+0x120>
     3b4:	ea000082 	b	5c4 <main+0x2e0>
     3b8:	e3530023 	cmp	r3, #35	; 0x23
     3bc:	0a000026 	beq	45c <main+0x178>
     3c0:	e353002b 	cmp	r3, #43	; 0x2b
     3c4:	0a00002f 	beq	488 <main+0x1a4>
     3c8:	ea00007d 	b	5c4 <main+0x2e0>
     3cc:	e353004b 	cmp	r3, #75	; 0x4b
     3d0:	0a00004d 	beq	50c <main+0x228>
     3d4:	e353004b 	cmp	r3, #75	; 0x4b
     3d8:	ca000004 	bgt	3f0 <main+0x10c>
     3dc:	e353003b 	cmp	r3, #59	; 0x3b
     3e0:	0a000033 	beq	4b4 <main+0x1d0>
     3e4:	e3530042 	cmp	r3, #66	; 0x42
     3e8:	0a00003c 	beq	4e0 <main+0x1fc>
     3ec:	ea000074 	b	5c4 <main+0x2e0>
     3f0:	e353004c 	cmp	r3, #76	; 0x4c
     3f4:	0a00004f 	beq	538 <main+0x254>
     3f8:	e35300f0 	cmp	r3, #240	; 0xf0
     3fc:	0a00006d 	beq	5b8 <main+0x2d4>
     400:	ea00006f 	b	5c4 <main+0x2e0>
						case 0x1C://Key A
							if(breakchar == 1){
     404:	e51b3010 	ldr	r3, [r11, #-16]
     408:	e3530001 	cmp	r3, #1
     40c:	1a000004 	bne	424 <main+0x140>
								signals[0] = 0;
     410:	e3a03000 	mov	r3, #0
     414:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
								breakchar= 0;
     418:	e3a03000 	mov	r3, #0
     41c:	e50b3010 	str	r3, [r11, #-16]
							} else{							
								signals[0] = 1;
							}
							break;
     420:	ea00006d 	b	5dc <main+0x2f8>
						case 0x1C://Key A
							if(breakchar == 1){
								signals[0] = 0;
								breakchar= 0;
							} else{							
								signals[0] = 1;
     424:	e3a03001 	mov	r3, #1
     428:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
							}
							break;
     42c:	ea00006a 	b	5dc <main+0x2f8>
						case 0x1B://Key S
							if(breakchar == 1){								
     430:	e51b3010 	ldr	r3, [r11, #-16]
     434:	e3530001 	cmp	r3, #1
     438:	1a000004 	bne	450 <main+0x16c>
								signals[1] = 0;
     43c:	e3a03000 	mov	r3, #0
     440:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
								breakchar = 0;
     444:	e3a03000 	mov	r3, #0
     448:	e50b3010 	str	r3, [r11, #-16]
							} else{							
								signals[1] = 1;
							}
							break;
     44c:	ea000062 	b	5dc <main+0x2f8>
						case 0x1B://Key S
							if(breakchar == 1){								
								signals[1] = 0;
								breakchar = 0;
							} else{							
								signals[1] = 1;
     450:	e3a03001 	mov	r3, #1
     454:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
							}
							break;
     458:	ea00005f 	b	5dc <main+0x2f8>
						case 0x23://Key D
							if(breakchar== 1){
     45c:	e51b3010 	ldr	r3, [r11, #-16]
     460:	e3530001 	cmp	r3, #1
     464:	1a000004 	bne	47c <main+0x198>
								signals[2] = 0;
     468:	e3a03000 	mov	r3, #0
     46c:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0
								breakchar = 0;
     470:	e3a03000 	mov	r3, #0
     474:	e50b3010 	str	r3, [r11, #-16]
							} else{
								signals[2] = 1;
							}
							break;
     478:	ea000057 	b	5dc <main+0x2f8>
						case 0x23://Key D
							if(breakchar== 1){
								signals[2] = 0;
								breakchar = 0;
							} else{
								signals[2] = 1;
     47c:	e3a03001 	mov	r3, #1
     480:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0
							}
							break;
     484:	ea000054 	b	5dc <main+0x2f8>
						case 0x2B://Key F
							if(breakchar == 1){
     488:	e51b3010 	ldr	r3, [r11, #-16]
     48c:	e3530001 	cmp	r3, #1
     490:	1a000004 	bne	4a8 <main+0x1c4>
								signals[3] = 0;
     494:	e3a03000 	mov	r3, #0
     498:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
								breakchar = 0;
     49c:	e3a03000 	mov	r3, #0
     4a0:	e50b3010 	str	r3, [r11, #-16]
							} else{
								signals[3] = 1;
							}
							break;
     4a4:	ea00004c 	b	5dc <main+0x2f8>
						case 0x2B://Key F
							if(breakchar == 1){
								signals[3] = 0;
								breakchar = 0;
							} else{
								signals[3] = 1;
     4a8:	e3a03001 	mov	r3, #1
     4ac:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
							}
							break;
     4b0:	ea000049 	b	5dc <main+0x2f8>
			
						case 0x3B://Key J
							if(breakchar == 1){
     4b4:	e51b3010 	ldr	r3, [r11, #-16]
     4b8:	e3530001 	cmp	r3, #1
     4bc:	1a000004 	bne	4d4 <main+0x1f0>
								signals[4] = 0;
     4c0:	e3a03000 	mov	r3, #0
     4c4:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
								breakchar = 0;
     4c8:	e3a03000 	mov	r3, #0
     4cc:	e50b3010 	str	r3, [r11, #-16]
							} else{
								signals[4] = 1;
							}
							break;
     4d0:	ea000041 	b	5dc <main+0x2f8>
						case 0x3B://Key J
							if(breakchar == 1){
								signals[4] = 0;
								breakchar = 0;
							} else{
								signals[4] = 1;
     4d4:	e3a03001 	mov	r3, #1
     4d8:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
							}
							break;
     4dc:	ea00003e 	b	5dc <main+0x2f8>
				
						case 0x42://Key K
							if(breakchar == 1){
     4e0:	e51b3010 	ldr	r3, [r11, #-16]
     4e4:	e3530001 	cmp	r3, #1
     4e8:	1a000004 	bne	500 <main+0x21c>
								signals[5] = 0;
     4ec:	e3a03000 	mov	r3, #0
     4f0:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
								breakchar = 0;
     4f4:	e3a03000 	mov	r3, #0
     4f8:	e50b3010 	str	r3, [r11, #-16]
							} else{
								signals[5] = 1;
							}
							break;
     4fc:	ea000036 	b	5dc <main+0x2f8>
						case 0x42://Key K
							if(breakchar == 1){
								signals[5] = 0;
								breakchar = 0;
							} else{
								signals[5] = 1;
     500:	e3a03001 	mov	r3, #1
     504:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
							}
							break;
     508:	ea000033 	b	5dc <main+0x2f8>
			
						case 0x4B://Key L
							if(breakchar == 1){
     50c:	e51b3010 	ldr	r3, [r11, #-16]
     510:	e3530001 	cmp	r3, #1
     514:	1a000004 	bne	52c <main+0x248>
								signals[6] = 0;
     518:	e3a03000 	mov	r3, #0
     51c:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
								breakchar = 0;
     520:	e3a03000 	mov	r3, #0
     524:	e50b3010 	str	r3, [r11, #-16]
							} else{
								signals[6] = 1;
							}
							break;
     528:	ea00002b 	b	5dc <main+0x2f8>
						case 0x4B://Key L
							if(breakchar == 1){
								signals[6] = 0;
								breakchar = 0;
							} else{
								signals[6] = 1;
     52c:	e3a03001 	mov	r3, #1
     530:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
							}
							break;
     534:	ea000028 	b	5dc <main+0x2f8>
				
						case 0x4C://Key ;
							if(breakchar== 1){
     538:	e51b3010 	ldr	r3, [r11, #-16]
     53c:	e3530001 	cmp	r3, #1
     540:	1a000004 	bne	558 <main+0x274>
								signals[7] = 0;
     544:	e3a03000 	mov	r3, #0
     548:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
								breakchar = 0;
     54c:	e3a03000 	mov	r3, #0
     550:	e50b3010 	str	r3, [r11, #-16]
							}else{
								signals[7] = 1;
							}
							break;
     554:	ea000020 	b	5dc <main+0x2f8>
						case 0x4C://Key ;
							if(breakchar== 1){
								signals[7] = 0;
								breakchar = 0;
							}else{
								signals[7] = 1;
     558:	e3a03001 	mov	r3, #1
     55c:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
							}
							break;
     560:	ea00001d 	b	5dc <main+0x2f8>
						
						case 0x32://KEY B FOR VOLUME UP
							if(breakchar == 1){
     564:	e51b3010 	ldr	r3, [r11, #-16]
     568:	e3530001 	cmp	r3, #1
     56c:	1a000017 	bne	5d0 <main+0x2ec>
								amplitude=amplitude++;
     570:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     574:	e2833001 	add	r3, r3, #1
     578:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
								breakchar = 0;
     57c:	e3a03000 	mov	r3, #0
     580:	e50b3010 	str	r3, [r11, #-16]
							}
							break;
     584:	ea000011 	b	5d0 <main+0x2ec>
						
						case 0x22://KEY C FOR VOLUME DOWN
							if(breakchar == 1){
     588:	e51b3010 	ldr	r3, [r11, #-16]
     58c:	e3530001 	cmp	r3, #1
     590:	1a000010 	bne	5d8 <main+0x2f4>
								if(amplitude>0)
     594:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     598:	e3530000 	cmp	r3, #0
     59c:	da000002 	ble	5ac <main+0x2c8>
								amplitude=amplitude--;
     5a0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     5a4:	e2433001 	sub	r3, r3, #1
     5a8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
								breakchar = 0;
     5ac:	e3a03000 	mov	r3, #0
     5b0:	e50b3010 	str	r3, [r11, #-16]
							}
							break;
     5b4:	ea000007 	b	5d8 <main+0x2f4>
						case 0xF0: //the break code is the same for all keys
							breakchar = 1;
     5b8:	e3a03001 	mov	r3, #1
     5bc:	e50b3010 	str	r3, [r11, #-16]
							break;
     5c0:	ea000005 	b	5dc <main+0x2f8>
						default:
							breakchar = 0;
     5c4:	e3a03000 	mov	r3, #0
     5c8:	e50b3010 	str	r3, [r11, #-16]
     5cc:	ea000002 	b	5dc <main+0x2f8>
						case 0x32://KEY B FOR VOLUME UP
							if(breakchar == 1){
								amplitude=amplitude++;
								breakchar = 0;
							}
							break;
     5d0:	e1a00000 	nop			; (mov r0, r0)
     5d4:	ea000000 	b	5dc <main+0x2f8>
							if(breakchar == 1){
								if(amplitude>0)
								amplitude=amplitude--;
								breakchar = 0;
							}
							break;
     5d8:	e1a00000 	nop			; (mov r0, r0)
					}
				}
			
			
			int i;
			for(i = 0; i < 8; i++){
     5dc:	e3a03000 	mov	r3, #0
     5e0:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     5e4:	ea000022 	b	674 <main+0x390>
		
				if(signals[i] == 1){
     5e8:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
     5ec:	e3e0305b 	mvn	r3, #91	; 0x5b
     5f0:	e1a02102 	lsl	r2, r2, #2
     5f4:	e24b100c 	sub	r1, r11, #12
     5f8:	e0812002 	add	r2, r1, r2
     5fc:	e0823003 	add	r3, r2, r3
     600:	e5933000 	ldr	r3, [r3]
     604:	e3530001 	cmp	r3, #1
     608:	1a000016 	bne	668 <main+0x384>
					signalSum += amplitude*makeWave(frequencies[i], t);
     60c:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     610:	eb000406 	bl	1630 <__aeabi_i2d>
     614:	e1a04000 	mov	r4, r0
     618:	e1a05001 	mov	r5, r1
     61c:	e30230e0 	movw	r3, #8416	; 0x20e0
     620:	e3403000 	movt	r3, #0
     624:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
     628:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     62c:	e1a00003 	mov	r0, r3
     630:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     634:	ebffff08 	bl	25c <makeWave>
     638:	e1a02000 	mov	r2, r0
     63c:	e1a03001 	mov	r3, r1
     640:	e1a00004 	mov	r0, r4
     644:	e1a01005 	mov	r1, r5
     648:	eb00042f 	bl	170c <__aeabi_dmul>
     64c:	e1a02000 	mov	r2, r0
     650:	e1a03001 	mov	r3, r1
     654:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     658:	eb000327 	bl	12fc <__adddf3>
     65c:	e1a02000 	mov	r2, r0
     660:	e1a03001 	mov	r3, r1
     664:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
					}
				}
			
			
			int i;
			for(i = 0; i < 8; i++){
     668:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     66c:	e2833001 	add	r3, r3, #1
     670:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     674:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     678:	e3530007 	cmp	r3, #7
     67c:	daffffd9 	ble	5e8 <main+0x304>
				if(signals[i] == 1){
					signalSum += amplitude*makeWave(frequencies[i], t);
					}
			}
			
			if(hps_tim0_int_flag == 1) {
     680:	e3003c90 	movw	r3, #3216	; 0xc90
     684:	e3403000 	movt	r3, #0
     688:	e5933000 	ldr	r3, [r3]
     68c:	e3530001 	cmp	r3, #1
     690:	1a00000f 	bne	6d4 <main+0x3f0>
				hps_tim0_int_flag = 0;
     694:	e3003c90 	movw	r3, #3216	; 0xc90
     698:	e3403000 	movt	r3, #0
     69c:	e3a02000 	mov	r2, #0
     6a0:	e5832000 	str	r2, [r3]
				audio_write_data_ASM(signalSum, signalSum);
     6a4:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     6a8:	eb00053e 	bl	1ba8 <__aeabi_d2iz>
     6ac:	e1a04000 	mov	r4, r0
     6b0:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     6b4:	eb00053b 	bl	1ba8 <__aeabi_d2iz>
     6b8:	e1a03000 	mov	r3, r0
     6bc:	e1a00004 	mov	r0, r4
     6c0:	e1a01003 	mov	r1, r3
     6c4:	eb0001c3 	bl	dd8 <audio_write_data_ASM>
				t++;
     6c8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     6cc:	e2833001 	add	r3, r3, #1
     6d0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			}

			signalSum = 0;
     6d4:	e3a02000 	mov	r2, #0
     6d8:	e3a03000 	mov	r3, #0
     6dc:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc

			if(t==47999){
     6e0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     6e4:	e30b3b7f 	movw	r3, #47999	; 0xbb7f
     6e8:	e1520003 	cmp	r2, r3
     6ec:	1affff1c 	bne	364 <main+0x80>
				t=0;
     6f0:	e3a03000 	mov	r3, #0
     6f4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			}
		
	}
     6f8:	eaffff19 	b	364 <main+0x80>

000006fc <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     6fc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     700:	e28db000 	add	r11, sp, #0
     704:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     708:	e3a030d3 	mov	r3, #211	; 0xd3
     70c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     710:	e51b3008 	ldr	r3, [r11, #-8]
     714:	e129f003 	msr	CPSR_fc, r3
}
     718:	e28bd000 	add	sp, r11, #0
     71c:	e8bd0800 	ldmfd	sp!, {r11}
     720:	e12fff1e 	bx	lr

00000724 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     724:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     728:	e28db000 	add	r11, sp, #0
     72c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     730:	e3a03053 	mov	r3, #83	; 0x53
     734:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     738:	e51b3008 	ldr	r3, [r11, #-8]
     73c:	e129f003 	msr	CPSR_fc, r3
}
     740:	e28bd000 	add	sp, r11, #0
     744:	e8bd0800 	ldmfd	sp!, {r11}
     748:	e12fff1e 	bx	lr

0000074c <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     74c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     750:	e28db000 	add	r11, sp, #0
     754:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     758:	e3e03007 	mvn	r3, #7
     75c:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     760:	e3a030d2 	mov	r3, #210	; 0xd2
     764:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     768:	e51b300c 	ldr	r3, [r11, #-12]
     76c:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     770:	e51b3008 	ldr	r3, [r11, #-8]
     774:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     778:	e3a030d3 	mov	r3, #211	; 0xd3
     77c:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     780:	e51b300c 	ldr	r3, [r11, #-12]
     784:	e129f003 	msr	CPSR_fc, r3
}
     788:	e28bd000 	add	sp, r11, #0
     78c:	e8bd0800 	ldmfd	sp!, {r11}
     790:	e12fff1e 	bx	lr

00000794 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     794:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     798:	e28db000 	add	r11, sp, #0
     79c:	e24dd01c 	sub	sp, sp, #28
     7a0:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     7a4:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     7a8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     7ac:	e1a031c3 	asr	r3, r3, #3
     7b0:	e3c33003 	bic	r3, r3, #3
     7b4:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     7b8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     7bc:	e203301f 	and	r3, r3, #31
     7c0:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     7c4:	e3a02001 	mov	r2, #1
     7c8:	e51b300c 	ldr	r3, [r11, #-12]
     7cc:	e1a03312 	lsl	r3, r2, r3
     7d0:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     7d4:	e51b3008 	ldr	r3, [r11, #-8]
     7d8:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     7dc:	e2433c03 	sub	r3, r3, #768	; 0x300
     7e0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     7e4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     7e8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     7ec:	e5921000 	ldr	r1, [r2]
     7f0:	e51b2010 	ldr	r2, [r11, #-16]
     7f4:	e1812002 	orr	r2, r1, r2
     7f8:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     7fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     800:	e3c33003 	bic	r3, r3, #3
     804:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     808:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     80c:	e2033003 	and	r3, r3, #3
     810:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     814:	e51b2008 	ldr	r2, [r11, #-8]
     818:	e51b300c 	ldr	r3, [r11, #-12]
     81c:	e0823003 	add	r3, r2, r3
     820:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     824:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     828:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     82c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     830:	e6ef2072 	uxtb	r2, r2
     834:	e5c32000 	strb	r2, [r3]
}
     838:	e28bd000 	add	sp, r11, #0
     83c:	e8bd0800 	ldmfd	sp!, {r11}
     840:	e12fff1e 	bx	lr

00000844 <config_GIC>:

void config_GIC(int len, int* IDs) {
     844:	e92d4800 	push	{r11, lr}
     848:	e28db004 	add	r11, sp, #4
     84c:	e24dd010 	sub	sp, sp, #16
     850:	e50b0010 	str	r0, [r11, #-16]
     854:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     858:	e3a03000 	mov	r3, #0
     85c:	e50b3008 	str	r3, [r11, #-8]
     860:	ea00000a 	b	890 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     864:	e51b3008 	ldr	r3, [r11, #-8]
     868:	e1a03103 	lsl	r3, r3, #2
     86c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     870:	e0823003 	add	r3, r2, r3
     874:	e5933000 	ldr	r3, [r3]
     878:	e1a00003 	mov	r0, r3
     87c:	e3a01001 	mov	r1, #1
     880:	ebffffc3 	bl	794 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     884:	e51b3008 	ldr	r3, [r11, #-8]
     888:	e2833001 	add	r3, r3, #1
     88c:	e50b3008 	str	r3, [r11, #-8]
     890:	e51b2008 	ldr	r2, [r11, #-8]
     894:	e51b3010 	ldr	r3, [r11, #-16]
     898:	e1520003 	cmp	r2, r3
     89c:	bafffff0 	blt	864 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     8a0:	e30c3104 	movw	r3, #49412	; 0xc104
     8a4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     8a8:	e30f2fff 	movw	r2, #65535	; 0xffff
     8ac:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     8b0:	e3a03cc1 	mov	r3, #49408	; 0xc100
     8b4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     8b8:	e3a02001 	mov	r2, #1
     8bc:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     8c0:	e3a03a0d 	mov	r3, #53248	; 0xd000
     8c4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     8c8:	e3a02001 	mov	r2, #1
     8cc:	e5832000 	str	r2, [r3]
}
     8d0:	e24bd004 	sub	sp, r11, #4
     8d4:	e8bd8800 	pop	{r11, pc}

000008d8 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     8d8:	e24ee004 	sub	lr, lr, #4
     8dc:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     8e0:	e28db018 	add	r11, sp, #24
     8e4:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     8e8:	e30c310c 	movw	r3, #49420	; 0xc10c
     8ec:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     8f0:	e5933000 	ldr	r3, [r3]
     8f4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     8f8:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     8fc:	e3530053 	cmp	r3, #83	; 0x53
     900:	0a00003d 	beq	9fc <__cs3_isr_irq+0x124>
     904:	e3530053 	cmp	r3, #83	; 0x53
     908:	ca000011 	bgt	954 <__cs3_isr_irq+0x7c>
     90c:	e353004e 	cmp	r3, #78	; 0x4e
     910:	0a000031 	beq	9dc <__cs3_isr_irq+0x104>
     914:	e353004e 	cmp	r3, #78	; 0x4e
     918:	ca000006 	bgt	938 <__cs3_isr_irq+0x60>
     91c:	e3530048 	cmp	r3, #72	; 0x48
     920:	0a000029 	beq	9cc <__cs3_isr_irq+0xf4>
     924:	e3530049 	cmp	r3, #73	; 0x49
     928:	0a000029 	beq	9d4 <__cs3_isr_irq+0xfc>
     92c:	e353001d 	cmp	r3, #29
     930:	0a000019 	beq	99c <__cs3_isr_irq+0xc4>
     934:	ea000036 	b	a14 <__cs3_isr_irq+0x13c>
     938:	e3530050 	cmp	r3, #80	; 0x50
     93c:	0a00002a 	beq	9ec <__cs3_isr_irq+0x114>
     940:	e3530050 	cmp	r3, #80	; 0x50
     944:	ba000026 	blt	9e4 <__cs3_isr_irq+0x10c>
     948:	e3530051 	cmp	r3, #81	; 0x51
     94c:	0a000028 	beq	9f4 <__cs3_isr_irq+0x11c>
     950:	ea00002f 	b	a14 <__cs3_isr_irq+0x13c>
     954:	e35300c7 	cmp	r3, #199	; 0xc7
     958:	0a000013 	beq	9ac <__cs3_isr_irq+0xd4>
     95c:	e35300c7 	cmp	r3, #199	; 0xc7
     960:	ca000006 	bgt	980 <__cs3_isr_irq+0xa8>
     964:	e3530059 	cmp	r3, #89	; 0x59
     968:	0a000027 	beq	a0c <__cs3_isr_irq+0x134>
     96c:	e35300c5 	cmp	r3, #197	; 0xc5
     970:	0a00000b 	beq	9a4 <__cs3_isr_irq+0xcc>
     974:	e3530054 	cmp	r3, #84	; 0x54
     978:	0a000021 	beq	a04 <__cs3_isr_irq+0x12c>
     97c:	ea000024 	b	a14 <__cs3_isr_irq+0x13c>
     980:	e35300c9 	cmp	r3, #201	; 0xc9
     984:	0a00000c 	beq	9bc <__cs3_isr_irq+0xe4>
     988:	e35300c9 	cmp	r3, #201	; 0xc9
     98c:	ba000008 	blt	9b4 <__cs3_isr_irq+0xdc>
     990:	e35300ca 	cmp	r3, #202	; 0xca
     994:	0a00000a 	beq	9c4 <__cs3_isr_irq+0xec>
     998:	ea00001d 	b	a14 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     99c:	eb0000bc 	bl	c94 <A9_PRIV_TIM_ISR>
     9a0:	ea00001c 	b	a18 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     9a4:	eb0000bb 	bl	c98 <HPS_GPIO1_ISR>
     9a8:	ea00001a 	b	a18 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     9ac:	eb0000ba 	bl	c9c <HPS_TIM0_ISR>
     9b0:	ea000018 	b	a18 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     9b4:	eb0000c0 	bl	cbc <HPS_TIM1_ISR>
     9b8:	ea000016 	b	a18 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     9bc:	eb0000bf 	bl	cc0 <HPS_TIM2_ISR>
     9c0:	ea000014 	b	a18 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     9c4:	eb0000be 	bl	cc4 <HPS_TIM3_ISR>
     9c8:	ea000012 	b	a18 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     9cc:	eb0000bd 	bl	cc8 <FPGA_INTERVAL_TIM_ISR>
     9d0:	ea000010 	b	a18 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     9d4:	eb0000bc 	bl	ccc <FPGA_PB_KEYS_ISR>
     9d8:	ea00000e 	b	a18 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     9dc:	eb0000bb 	bl	cd0 <FPGA_Audio_ISR>
     9e0:	ea00000c 	b	a18 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     9e4:	eb0000ba 	bl	cd4 <FPGA_PS2_ISR>
     9e8:	ea00000a 	b	a18 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     9ec:	eb0000b9 	bl	cd8 <FPGA_JTAG_ISR>
     9f0:	ea000008 	b	a18 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     9f4:	eb0000b8 	bl	cdc <FPGA_IrDA_ISR>
     9f8:	ea000006 	b	a18 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     9fc:	eb0000b7 	bl	ce0 <FPGA_JP1_ISR>
     a00:	ea000004 	b	a18 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     a04:	eb0000b6 	bl	ce4 <FPGA_JP2_ISR>
     a08:	ea000002 	b	a18 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     a0c:	eb0000b5 	bl	ce8 <FPGA_PS2_DUAL_ISR>
     a10:	ea000000 	b	a18 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     a14:	eafffffe 	b	a14 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     a18:	e30c3110 	movw	r3, #49424	; 0xc110
     a1c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a20:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     a24:	e5832000 	str	r2, [r3]
}
     a28:	e24bd018 	sub	sp, r11, #24
     a2c:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000a30 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     a30:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a34:	e28db000 	add	r11, sp, #0
	while(1);
     a38:	eafffffe 	b	a38 <__cs3_reset+0x8>

00000a3c <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     a3c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a40:	e28db000 	add	r11, sp, #0
	while(1);
     a44:	eafffffe 	b	a44 <__cs3_isr_undef+0x8>

00000a48 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     a48:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a4c:	e28db000 	add	r11, sp, #0
	while(1);
     a50:	eafffffe 	b	a50 <__cs3_isr_swi+0x8>

00000a54 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     a54:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a58:	e28db000 	add	r11, sp, #0
	while(1);
     a5c:	eafffffe 	b	a5c <__cs3_isr_pabort+0x8>

00000a60 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     a60:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a64:	e28db000 	add	r11, sp, #0
	while(1);
     a68:	eafffffe 	b	a68 <__cs3_isr_dabort+0x8>

00000a6c <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     a6c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a70:	e28db000 	add	r11, sp, #0
	while(1);
     a74:	eafffffe 	b	a74 <__cs3_isr_fiq+0x8>

00000a78 <fix_bug>:
}

void fix_bug() {
     a78:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a7c:	e28db000 	add	r11, sp, #0
     a80:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     a84:	e30d3198 	movw	r3, #53656	; 0xd198
     a88:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a8c:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     a90:	e51b3008 	ldr	r3, [r11, #-8]
     a94:	e3a02703 	mov	r2, #786432	; 0xc0000
     a98:	e5832000 	str	r2, [r3]
}
     a9c:	e28bd000 	add	sp, r11, #0
     aa0:	e8bd0800 	ldmfd	sp!, {r11}
     aa4:	e12fff1e 	bx	lr

00000aa8 <int_setup>:

void int_setup(int len, int* IDs) {
     aa8:	e92d4800 	push	{r11, lr}
     aac:	e28db004 	add	r11, sp, #4
     ab0:	e24dd008 	sub	sp, sp, #8
     ab4:	e50b0008 	str	r0, [r11, #-8]
     ab8:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     abc:	ebffff0e 	bl	6fc <disable_A9_interrupts>
	set_A9_IRQ_stack();
     ac0:	ebffff21 	bl	74c <set_A9_IRQ_stack>
	fix_bug();
     ac4:	ebffffeb 	bl	a78 <fix_bug>
	config_GIC(len, IDs);
     ac8:	e51b0008 	ldr	r0, [r11, #-8]
     acc:	e51b100c 	ldr	r1, [r11, #-12]
     ad0:	ebffff5b 	bl	844 <config_GIC>
	enable_A9_interrupts();
     ad4:	ebffff12 	bl	724 <enable_A9_interrupts>
}
     ad8:	e24bd004 	sub	sp, r11, #4
     adc:	e8bd8800 	pop	{r11, pc}

00000ae0 <HEX_clear_ASM>:
     ae0:	e3a01000 	mov	r1, #0
     ae4:	ea000004 	b	afc <WRITE>

00000ae8 <HEX_flood_ASM>:
     ae8:	e3a0107f 	mov	r1, #127	; 0x7f
     aec:	ea000002 	b	afc <WRITE>

00000af0 <HEX_write_ASM>:
     af0:	e59f2064 	ldr	r2, [pc, #100]	; b5c <PATTERNS+0x14>
     af4:	e7d21001 	ldrb	r1, [r2, r1]
     af8:	eaffffff 	b	afc <WRITE>

00000afc <WRITE>:
     afc:	e92d0030 	push	{r4, r5}
     b00:	e59f2058 	ldr	r2, [pc, #88]	; b60 <PATTERNS+0x18>
     b04:	e3a03000 	mov	r3, #0
     b08:	e3e050ff 	mvn	r5, #255	; 0xff

00000b0c <LOOP>:
     b0c:	e3100001 	tst	r0, #1
     b10:	0a000003 	beq	b24 <CONTINUE>
     b14:	e5924000 	ldr	r4, [r2]
     b18:	e0044005 	and	r4, r4, r5
     b1c:	e1844001 	orr	r4, r4, r1
     b20:	e5824000 	str	r4, [r2]

00000b24 <CONTINUE>:
     b24:	e1a05c65 	ror	r5, r5, #24
     b28:	e1a01c61 	ror	r1, r1, #24
     b2c:	e2833001 	add	r3, r3, #1
     b30:	e3530004 	cmp	r3, #4
     b34:	059f2028 	ldreq	r2, [pc, #40]	; b64 <PATTERNS+0x1c>
     b38:	e1b000a0 	lsrs	r0, r0, #1
     b3c:	1afffff2 	bne	b0c <LOOP>
     b40:	e8bd0030 	pop	{r4, r5}
     b44:	e12fff1e 	bx	lr

00000b48 <PATTERNS>:
     b48:	4f5b063f 	.word	0x4f5b063f
     b4c:	077d6d66 	.word	0x077d6d66
     b50:	7c776f7f 	.word	0x7c776f7f
     b54:	71795e39 	.word	0x71795e39
     b58:	000000ff 	.word	0x000000ff
     b5c:	00000b48 	.word	0x00000b48
     b60:	ff200020 	.word	0xff200020
     b64:	ff200030 	.word	0xff200030

00000b68 <HPS_TIM_config_ASM>:
     b68:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     b6c:	e3a01000 	mov	r1, #0
     b70:	e3a02001 	mov	r2, #1
     b74:	e5907000 	ldr	r7, [r0]
     b78:	eaffffff 	b	b7c <LOOP>

00000b7c <LOOP>:
     b7c:	e1170112 	tst	r7, r2, lsl r1
     b80:	0a000000 	beq	b88 <CONTINUE>
     b84:	eb000004 	bl	b9c <CONFIG>

00000b88 <CONTINUE>:
     b88:	e2811001 	add	r1, r1, #1
     b8c:	e3510004 	cmp	r1, #4
     b90:	bafffff9 	blt	b7c <LOOP>

00000b94 <DONE>:
     b94:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     b98:	e12fff1e 	bx	lr

00000b9c <CONFIG>:
     b9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ba0:	e59f30e4 	ldr	r3, [pc, #228]	; c8c <HPS_TIM_BASE+0x10>
     ba4:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     ba8:	eb000005 	bl	bc4 <DISABLE>
     bac:	eb000008 	bl	bd4 <SET_LOAD_VAL>
     bb0:	eb00000e 	bl	bf0 <SET_LOAD_BIT>
     bb4:	eb000013 	bl	c08 <SET_INT_BIT>
     bb8:	eb000019 	bl	c24 <SET_EN_BIT>
     bbc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     bc0:	e12fff1e 	bx	lr

00000bc4 <DISABLE>:
     bc4:	e5945008 	ldr	r5, [r4, #8]
     bc8:	e3c55001 	bic	r5, r5, #1
     bcc:	e5845008 	str	r5, [r4, #8]
     bd0:	e12fff1e 	bx	lr

00000bd4 <SET_LOAD_VAL>:
     bd4:	e5905004 	ldr	r5, [r0, #4]
     bd8:	e3a06019 	mov	r6, #25
     bdc:	e0050695 	mul	r5, r5, r6
     be0:	e3510002 	cmp	r1, #2
     be4:	b1a05105 	lsllt	r5, r5, #2
     be8:	e5845000 	str	r5, [r4]
     bec:	e12fff1e 	bx	lr

00000bf0 <SET_LOAD_BIT>:
     bf0:	e5945008 	ldr	r5, [r4, #8]
     bf4:	e5906008 	ldr	r6, [r0, #8]
     bf8:	e3c55002 	bic	r5, r5, #2
     bfc:	e1855086 	orr	r5, r5, r6, lsl #1
     c00:	e5845008 	str	r5, [r4, #8]
     c04:	e12fff1e 	bx	lr

00000c08 <SET_INT_BIT>:
     c08:	e5945008 	ldr	r5, [r4, #8]
     c0c:	e590600c 	ldr	r6, [r0, #12]
     c10:	e2266001 	eor	r6, r6, #1
     c14:	e3c55004 	bic	r5, r5, #4
     c18:	e1855106 	orr	r5, r5, r6, lsl #2
     c1c:	e5845008 	str	r5, [r4, #8]
     c20:	e12fff1e 	bx	lr

00000c24 <SET_EN_BIT>:
     c24:	e5945008 	ldr	r5, [r4, #8]
     c28:	e5906010 	ldr	r6, [r0, #16]
     c2c:	e3c55001 	bic	r5, r5, #1
     c30:	e1855006 	orr	r5, r5, r6
     c34:	e5845008 	str	r5, [r4, #8]
     c38:	e12fff1e 	bx	lr

00000c3c <HPS_TIM_clear_INT_ASM>:
     c3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     c40:	e3a01000 	mov	r1, #0
     c44:	e3a02001 	mov	r2, #1
     c48:	eaffffff 	b	c4c <INT_LOOP>

00000c4c <INT_LOOP>:
     c4c:	e1100112 	tst	r0, r2, lsl r1
     c50:	0a000000 	beq	c58 <INT_CONTINUE>
     c54:	eb000004 	bl	c6c <CLEAR_IT>

00000c58 <INT_CONTINUE>:
     c58:	e2811001 	add	r1, r1, #1
     c5c:	e3510004 	cmp	r1, #4
     c60:	bafffff9 	blt	c4c <INT_LOOP>

00000c64 <INT_DONE>:
     c64:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     c68:	e12fff1e 	bx	lr

00000c6c <CLEAR_IT>:
     c6c:	e59f3018 	ldr	r3, [pc, #24]	; c8c <HPS_TIM_BASE+0x10>
     c70:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     c74:	e593300c 	ldr	r3, [r3, #12]
     c78:	e12fff1e 	bx	lr

00000c7c <HPS_TIM_BASE>:
     c7c:	ffc08000 	.word	0xffc08000
     c80:	ffc09000 	.word	0xffc09000
     c84:	ffd00000 	.word	0xffd00000
     c88:	ffd01000 	.word	0xffd01000
     c8c:	00000c7c 	.word	0x00000c7c

00000c90 <hps_tim0_int_flag>:
     c90:	00000000 	.word	0x00000000

00000c94 <A9_PRIV_TIM_ISR>:

hps_tim0_int_flag:
	.word 0x0
	
A9_PRIV_TIM_ISR:
	BX LR
     c94:	e12fff1e 	bx	lr

00000c98 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     c98:	e12fff1e 	bx	lr

00000c9c <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}					//Push LR to stack
     c9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     ca0:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM	//Clear tim0
     ca4:	ebffffe4 	bl	c3c <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     ca8:	e59f003c 	ldr	r0, [pc, #60]	; cec <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     cac:	e3a01001 	mov	r1, #1
	STR R1, [R0]				//Set flag to 1
     cb0:	e5801000 	str	r1, [r0]

	POP {LR}					//Pop LR from stack
     cb4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     cb8:	e12fff1e 	bx	lr

00000cbc <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     cbc:	e12fff1e 	bx	lr

00000cc0 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     cc0:	e12fff1e 	bx	lr

00000cc4 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     cc4:	e12fff1e 	bx	lr

00000cc8 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     cc8:	e12fff1e 	bx	lr

00000ccc <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     ccc:	e12fff1e 	bx	lr

00000cd0 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     cd0:	e12fff1e 	bx	lr

00000cd4 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     cd4:	e12fff1e 	bx	lr

00000cd8 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     cd8:	e12fff1e 	bx	lr

00000cdc <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     cdc:	e12fff1e 	bx	lr

00000ce0 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     ce0:	e12fff1e 	bx	lr

00000ce4 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     ce4:	e12fff1e 	bx	lr

00000ce8 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     ce8:	e12fff1e 	bx	lr
	PUSH {LR}					//Push LR to stack
	
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM	//Clear tim0

	LDR R0, =hps_tim0_int_flag
     cec:	00000c90 	.word	0x00000c90

00000cf0 <read_LEDs_ASM>:
     cf0:	e59f1010 	ldr	r1, [pc, #16]	; d08 <write_LEDs_ASM+0xc>
     cf4:	e5910000 	ldr	r0, [r1]
     cf8:	e12fff1e 	bx	lr

00000cfc <write_LEDs_ASM>:
     cfc:	e59f1004 	ldr	r1, [pc, #4]	; d08 <write_LEDs_ASM+0xc>
     d00:	e5810000 	str	r0, [r1]
     d04:	e12fff1e 	bx	lr
     d08:	ff200000 	.word	0xff200000

00000d0c <audio_read_data_ASM>:
     d0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d10:	e92d0003 	push	{r0, r1}
     d14:	eb000093 	bl	f68 <audio_read_ralc_ASM>
     d18:	e3500000 	cmp	r0, #0
     d1c:	08bd0003 	popeq	{r0, r1}
     d20:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d24:	03a00000 	moveq	r0, #0
     d28:	012fff1e 	bxeq	lr
     d2c:	eb000092 	bl	f7c <audio_read_rarc_ASM>
     d30:	e3500000 	cmp	r0, #0
     d34:	08bd0003 	popeq	{r0, r1}
     d38:	03a00000 	moveq	r0, #0
     d3c:	012fff1e 	bxeq	lr
     d40:	e8bd0003 	pop	{r0, r1}
     d44:	e59f2240 	ldr	r2, [pc, #576]	; f8c <audio_read_rarc_ASM+0x10>
     d48:	e5922000 	ldr	r2, [r2]
     d4c:	e5802000 	str	r2, [r0]
     d50:	e59f3238 	ldr	r3, [pc, #568]	; f90 <audio_read_rarc_ASM+0x14>
     d54:	e5933000 	ldr	r3, [r3]
     d58:	e5813000 	str	r3, [r1]
     d5c:	e3a00001 	mov	r0, #1

00000d60 <audio_read_leftdata_ASM>:
     d60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d64:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     d68:	eb00007e 	bl	f68 <audio_read_ralc_ASM>
     d6c:	e3500000 	cmp	r0, #0
     d70:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     d74:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d78:	03a00000 	moveq	r0, #0
     d7c:	012fff1e 	bxeq	lr
     d80:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     d84:	e59f2200 	ldr	r2, [pc, #512]	; f8c <audio_read_rarc_ASM+0x10>
     d88:	e5922000 	ldr	r2, [r2]
     d8c:	e5802000 	str	r2, [r0]
     d90:	e3a00001 	mov	r0, #1
     d94:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d98:	e12fff1e 	bx	lr

00000d9c <audio_read_rightdata_ASM>:
     d9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     da0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     da4:	eb000074 	bl	f7c <audio_read_rarc_ASM>
     da8:	e3500000 	cmp	r0, #0
     dac:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     db0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     db4:	03a00000 	moveq	r0, #0
     db8:	012fff1e 	bxeq	lr
     dbc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     dc0:	e59f21c8 	ldr	r2, [pc, #456]	; f90 <audio_read_rarc_ASM+0x14>
     dc4:	e5922000 	ldr	r2, [r2]
     dc8:	e5802000 	str	r2, [r0]
     dcc:	e3a00001 	mov	r0, #1
     dd0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     dd4:	e12fff1e 	bx	lr

00000dd8 <audio_write_data_ASM>:
     dd8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ddc:	e92d0003 	push	{r0, r1}
     de0:	eb000056 	bl	f40 <audio_read_wslc_ASM>
     de4:	e3500000 	cmp	r0, #0
     de8:	08bd0003 	popeq	{r0, r1}
     dec:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     df0:	03a00000 	moveq	r0, #0
     df4:	012fff1e 	bxeq	lr
     df8:	eb000055 	bl	f54 <audio_read_wsrc_ASM>
     dfc:	e3500000 	cmp	r0, #0
     e00:	08bd0003 	popeq	{r0, r1}
     e04:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     e08:	03a00000 	moveq	r0, #0
     e0c:	012fff1e 	bxeq	lr
     e10:	e8bd0003 	pop	{r0, r1}
     e14:	e59f2170 	ldr	r2, [pc, #368]	; f8c <audio_read_rarc_ASM+0x10>
     e18:	e5820000 	str	r0, [r2]
     e1c:	e59f316c 	ldr	r3, [pc, #364]	; f90 <audio_read_rarc_ASM+0x14>
     e20:	e5831000 	str	r1, [r3]
     e24:	e3a00001 	mov	r0, #1
     e28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e2c:	e12fff1e 	bx	lr

00000e30 <audio_write_leftdata_ASM>:
     e30:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e34:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     e38:	eb000040 	bl	f40 <audio_read_wslc_ASM>
     e3c:	e3500000 	cmp	r0, #0
     e40:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     e44:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     e48:	03a00000 	moveq	r0, #0
     e4c:	012fff1e 	bxeq	lr
     e50:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     e54:	e59f2130 	ldr	r2, [pc, #304]	; f8c <audio_read_rarc_ASM+0x10>
     e58:	e5820000 	str	r0, [r2]
     e5c:	e3a00001 	mov	r0, #1
     e60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e64:	e12fff1e 	bx	lr

00000e68 <audio_write_rightdata_ASM>:
     e68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e6c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     e70:	eb000037 	bl	f54 <audio_read_wsrc_ASM>
     e74:	e3500000 	cmp	r0, #0
     e78:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     e7c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     e80:	03a00000 	moveq	r0, #0
     e84:	012fff1e 	bxeq	lr
     e88:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     e8c:	e59f20fc 	ldr	r2, [pc, #252]	; f90 <audio_read_rarc_ASM+0x14>
     e90:	e5820000 	str	r0, [r2]
     e94:	e3a00001 	mov	r0, #1
     e98:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e9c:	e12fff1e 	bx	lr

00000ea0 <audio_enable_read_fifo_clear_ASM>:
     ea0:	e59f00ec 	ldr	r0, [pc, #236]	; f94 <audio_read_rarc_ASM+0x18>
     ea4:	e5901000 	ldr	r1, [r0]
     ea8:	e3811004 	orr	r1, r1, #4
     eac:	e5801000 	str	r1, [r0]
     eb0:	e12fff1e 	bx	lr

00000eb4 <audio_enable_write_fifo_clear_ASM>:
     eb4:	e59f00d8 	ldr	r0, [pc, #216]	; f94 <audio_read_rarc_ASM+0x18>
     eb8:	e5901000 	ldr	r1, [r0]
     ebc:	e3811008 	orr	r1, r1, #8
     ec0:	e5801000 	str	r1, [r0]
     ec4:	e12fff1e 	bx	lr

00000ec8 <audio_disable_read_fifo_clear_ASM>:
     ec8:	e59f00c4 	ldr	r0, [pc, #196]	; f94 <audio_read_rarc_ASM+0x18>
     ecc:	e5901000 	ldr	r1, [r0]
     ed0:	e3c11004 	bic	r1, r1, #4
     ed4:	e5801000 	str	r1, [r0]
     ed8:	e12fff1e 	bx	lr

00000edc <audio_disable_write_fifo_clear_ASM>:
     edc:	e59f00b0 	ldr	r0, [pc, #176]	; f94 <audio_read_rarc_ASM+0x18>
     ee0:	e5901000 	ldr	r1, [r0]
     ee4:	e3c11008 	bic	r1, r1, #8
     ee8:	e5801000 	str	r1, [r0]
     eec:	e12fff1e 	bx	lr

00000ef0 <audio_enable_read_int_ASM>:
     ef0:	e59f009c 	ldr	r0, [pc, #156]	; f94 <audio_read_rarc_ASM+0x18>
     ef4:	e5901000 	ldr	r1, [r0]
     ef8:	e3811001 	orr	r1, r1, #1
     efc:	e5801000 	str	r1, [r0]
     f00:	e12fff1e 	bx	lr

00000f04 <audio_enable_write_int_ASM>:
     f04:	e59f0088 	ldr	r0, [pc, #136]	; f94 <audio_read_rarc_ASM+0x18>
     f08:	e5901000 	ldr	r1, [r0]
     f0c:	e3811002 	orr	r1, r1, #2
     f10:	e5801000 	str	r1, [r0]
     f14:	e12fff1e 	bx	lr

00000f18 <audio_disable_read_int_ASM>:
     f18:	e59f0074 	ldr	r0, [pc, #116]	; f94 <audio_read_rarc_ASM+0x18>
     f1c:	e5901000 	ldr	r1, [r0]
     f20:	e3c11001 	bic	r1, r1, #1
     f24:	e5801000 	str	r1, [r0]
     f28:	e12fff1e 	bx	lr

00000f2c <audio_disable_write_int_ASM>:
     f2c:	e59f0060 	ldr	r0, [pc, #96]	; f94 <audio_read_rarc_ASM+0x18>
     f30:	e5901000 	ldr	r1, [r0]
     f34:	e3c11002 	bic	r1, r1, #2
     f38:	e5801000 	str	r1, [r0]
     f3c:	e12fff1e 	bx	lr

00000f40 <audio_read_wslc_ASM>:
     f40:	e59f0050 	ldr	r0, [pc, #80]	; f98 <audio_read_rarc_ASM+0x1c>
     f44:	e5900000 	ldr	r0, [r0]
     f48:	e1a00c20 	lsr	r0, r0, #24
     f4c:	e20000ff 	and	r0, r0, #255	; 0xff
     f50:	e12fff1e 	bx	lr

00000f54 <audio_read_wsrc_ASM>:
     f54:	e59f003c 	ldr	r0, [pc, #60]	; f98 <audio_read_rarc_ASM+0x1c>
     f58:	e5900000 	ldr	r0, [r0]
     f5c:	e1a00820 	lsr	r0, r0, #16
     f60:	e20000ff 	and	r0, r0, #255	; 0xff
     f64:	e12fff1e 	bx	lr

00000f68 <audio_read_ralc_ASM>:
     f68:	e59f0028 	ldr	r0, [pc, #40]	; f98 <audio_read_rarc_ASM+0x1c>
     f6c:	e5900000 	ldr	r0, [r0]
     f70:	e1a00420 	lsr	r0, r0, #8
     f74:	e20000ff 	and	r0, r0, #255	; 0xff
     f78:	e12fff1e 	bx	lr

00000f7c <audio_read_rarc_ASM>:
     f7c:	e59f0014 	ldr	r0, [pc, #20]	; f98 <audio_read_rarc_ASM+0x1c>
     f80:	e5900000 	ldr	r0, [r0]
     f84:	e20000ff 	and	r0, r0, #255	; 0xff
     f88:	e12fff1e 	bx	lr
     f8c:	ff203048 	.word	0xff203048
     f90:	ff20304c 	.word	0xff20304c
     f94:	ff203040 	.word	0xff203040
     f98:	ff203044 	.word	0xff203044

00000f9c <read_ps2_data_ASM>:
     f9c:	e59f114c 	ldr	r1, [pc, #332]	; 10f0 <ps2_fifo_ravail+0x4>
     fa0:	e5911000 	ldr	r1, [r1]
     fa4:	e3a02902 	mov	r2, #32768	; 0x8000
     fa8:	e1110002 	tst	r1, r2
     fac:	03a00000 	moveq	r0, #0
     fb0:	012fff1e 	bxeq	lr
     fb4:	e20120ff 	and	r2, r1, #255	; 0xff
     fb8:	e5c02000 	strb	r2, [r0]
     fbc:	e59f2130 	ldr	r2, [pc, #304]	; 10f4 <ps2_fifo_ravail+0x8>
     fc0:	e0010002 	and	r0, r1, r2
     fc4:	e1a00820 	lsr	r0, r0, #16
     fc8:	e12fff1e 	bx	lr

00000fcc <enable_ps2_int_ASM>:
     fcc:	e59f011c 	ldr	r0, [pc, #284]	; 10f0 <ps2_fifo_ravail+0x4>
     fd0:	e3a01001 	mov	r1, #1
     fd4:	e5c01004 	strb	r1, [r0, #4]
     fd8:	e12fff1e 	bx	lr

00000fdc <disable_ps2_int_ASM>:
     fdc:	e59f010c 	ldr	r0, [pc, #268]	; 10f0 <ps2_fifo_ravail+0x4>
     fe0:	e3a01000 	mov	r1, #0
     fe4:	e5c01004 	strb	r1, [r0, #4]
     fe8:	e12fff1e 	bx	lr

00000fec <ps2_fifo_data>:
	...

000010ec <ps2_fifo_ravail>:
    10ec:	00000000 	.word	0x00000000
    10f0:	ff200100 	.word	0xff200100
    10f4:	ffff0000 	.word	0xffff0000

000010f8 <read_PB_data_ASM>:
    10f8:	e59f1074 	ldr	r1, [pc, #116]	; 1174 <disable_PB_INT_ASM+0x14>
    10fc:	e5910000 	ldr	r0, [r1]
    1100:	e12fff1e 	bx	lr

00001104 <PB_data_is_pressed_ASM>:
    1104:	e59f1068 	ldr	r1, [pc, #104]	; 1174 <disable_PB_INT_ASM+0x14>
    1108:	e5912000 	ldr	r2, [r1]
    110c:	e0000002 	and	r0, r0, r2
    1110:	e3300000 	teq	r0, #0
    1114:	13a00001 	movne	r0, #1
    1118:	e12fff1e 	bx	lr

0000111c <read_PB_edgecap_ASM>:
    111c:	e59f1054 	ldr	r1, [pc, #84]	; 1178 <disable_PB_INT_ASM+0x18>
    1120:	e5910000 	ldr	r0, [r1]
    1124:	e12fff1e 	bx	lr

00001128 <PB_edgecap_is_pressed_ASM>:
    1128:	e59f1048 	ldr	r1, [pc, #72]	; 1178 <disable_PB_INT_ASM+0x18>
    112c:	e5912000 	ldr	r2, [r1]
    1130:	e0000002 	and	r0, r0, r2
    1134:	e3300000 	teq	r0, #0
    1138:	13a00001 	movne	r0, #1
    113c:	e12fff1e 	bx	lr

00001140 <PB_clear_edgecp_ASM>:
    1140:	e59f1030 	ldr	r1, [pc, #48]	; 1178 <disable_PB_INT_ASM+0x18>
    1144:	e5810000 	str	r0, [r1]
    1148:	e12fff1e 	bx	lr

0000114c <enable_PB_INT_ASM>:
    114c:	e59f1028 	ldr	r1, [pc, #40]	; 117c <disable_PB_INT_ASM+0x1c>
    1150:	e5912000 	ldr	r2, [r1]
    1154:	e1800002 	orr	r0, r0, r2
    1158:	e5810000 	str	r0, [r1]
    115c:	e12fff1e 	bx	lr

00001160 <disable_PB_INT_ASM>:
    1160:	e59f1014 	ldr	r1, [pc, #20]	; 117c <disable_PB_INT_ASM+0x1c>
    1164:	e5912000 	ldr	r2, [r1]
    1168:	e1c00002 	bic	r0, r0, r2
    116c:	e5810000 	str	r0, [r1]
    1170:	e12fff1e 	bx	lr
    1174:	ff200050 	.word	0xff200050
    1178:	ff20005c 	.word	0xff20005c
    117c:	ff200058 	.word	0xff200058

00001180 <read_slider_switches_ASM>:
    1180:	e59f1004 	ldr	r1, [pc, #4]	; 118c <read_slider_switches_ASM+0xc>
    1184:	e5910000 	ldr	r0, [r1]
    1188:	e12fff1e 	bx	lr
    118c:	ff200040 	.word	0xff200040

00001190 <VGA_clear_charbuff_ASM>:
    1190:	e92d0030 	push	{r4, r5}
    1194:	e3a02000 	mov	r2, #0
    1198:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    119c:	e3a00000 	mov	r0, #0

000011a0 <CHAR_LOOPX>:
    11a0:	e3a01000 	mov	r1, #0
    11a4:	e0834000 	add	r4, r3, r0

000011a8 <CHAR_LOOPY>:
    11a8:	e0845381 	add	r5, r4, r1, lsl #7
    11ac:	e5c52000 	strb	r2, [r5]
    11b0:	e2811001 	add	r1, r1, #1
    11b4:	e351003c 	cmp	r1, #60	; 0x3c
    11b8:	bafffffa 	blt	11a8 <CHAR_LOOPY>
    11bc:	e2800001 	add	r0, r0, #1
    11c0:	e3500050 	cmp	r0, #80	; 0x50
    11c4:	bafffff5 	blt	11a0 <CHAR_LOOPX>
    11c8:	e8bd0030 	pop	{r4, r5}
    11cc:	e12fff1e 	bx	lr

000011d0 <VGA_clear_pixelbuff_ASM>:
    11d0:	e92d0030 	push	{r4, r5}
    11d4:	e3a02000 	mov	r2, #0
    11d8:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    11dc:	e3a00000 	mov	r0, #0

000011e0 <PIXEL_LOOPX>:
    11e0:	e3a01000 	mov	r1, #0
    11e4:	e0834080 	add	r4, r3, r0, lsl #1

000011e8 <PIXEL_LOOPY>:
    11e8:	e0845501 	add	r5, r4, r1, lsl #10
    11ec:	e1c520b0 	strh	r2, [r5]
    11f0:	e2811001 	add	r1, r1, #1
    11f4:	e35100f0 	cmp	r1, #240	; 0xf0
    11f8:	bafffffa 	blt	11e8 <PIXEL_LOOPY>
    11fc:	e2800001 	add	r0, r0, #1
    1200:	e3500d05 	cmp	r0, #320	; 0x140
    1204:	bafffff5 	blt	11e0 <PIXEL_LOOPX>
    1208:	e8bd0030 	pop	{r4, r5}
    120c:	e12fff1e 	bx	lr

00001210 <VGA_write_char_ASM>:
    1210:	e3500000 	cmp	r0, #0
    1214:	b12fff1e 	bxlt	lr
    1218:	e3510000 	cmp	r1, #0
    121c:	b12fff1e 	bxlt	lr
    1220:	e350004f 	cmp	r0, #79	; 0x4f
    1224:	c12fff1e 	bxgt	lr
    1228:	e351003b 	cmp	r1, #59	; 0x3b
    122c:	c12fff1e 	bxgt	lr
    1230:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1234:	e0833000 	add	r3, r3, r0
    1238:	e0833381 	add	r3, r3, r1, lsl #7
    123c:	e5c32000 	strb	r2, [r3]
    1240:	e12fff1e 	bx	lr

00001244 <VGA_write_byte_ASM>:
    1244:	e3500000 	cmp	r0, #0
    1248:	b12fff1e 	bxlt	lr
    124c:	e3510000 	cmp	r1, #0
    1250:	b12fff1e 	bxlt	lr
    1254:	e350004e 	cmp	r0, #78	; 0x4e
    1258:	c12fff1e 	bxgt	lr
    125c:	e351003b 	cmp	r1, #59	; 0x3b
    1260:	c12fff1e 	bxgt	lr
    1264:	e92d0030 	push	{r4, r5}
    1268:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    126c:	e20250f0 	and	r5, r2, #240	; 0xf0
    1270:	e1a05225 	lsr	r5, r5, #4
    1274:	e202400f 	and	r4, r2, #15
    1278:	e59f2068 	ldr	r2, [pc, #104]	; 12e8 <HEX_ASCII+0x10>
    127c:	e7d25005 	ldrb	r5, [r2, r5]
    1280:	e7d24004 	ldrb	r4, [r2, r4]
    1284:	e0833000 	add	r3, r3, r0
    1288:	e0833381 	add	r3, r3, r1, lsl #7
    128c:	e5c35000 	strb	r5, [r3]
    1290:	e2833001 	add	r3, r3, #1
    1294:	e5c34000 	strb	r4, [r3]
    1298:	e8bd0030 	pop	{r4, r5}
    129c:	e12fff1e 	bx	lr

000012a0 <VGA_draw_point_ASM>:
    12a0:	e59f3044 	ldr	r3, [pc, #68]	; 12ec <HEX_ASCII+0x14>
    12a4:	e3500000 	cmp	r0, #0
    12a8:	b12fff1e 	bxlt	lr
    12ac:	e3510000 	cmp	r1, #0
    12b0:	b12fff1e 	bxlt	lr
    12b4:	e1500003 	cmp	r0, r3
    12b8:	c12fff1e 	bxgt	lr
    12bc:	e35100ef 	cmp	r1, #239	; 0xef
    12c0:	c12fff1e 	bxgt	lr
    12c4:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    12c8:	e0833080 	add	r3, r3, r0, lsl #1
    12cc:	e0833501 	add	r3, r3, r1, lsl #10
    12d0:	e1c320b0 	strh	r2, [r3]
    12d4:	e12fff1e 	bx	lr

000012d8 <HEX_ASCII>:
    12d8:	33323130 	.word	0x33323130
    12dc:	37363534 	.word	0x37363534
    12e0:	42413938 	.word	0x42413938
    12e4:	46454443 	.word	0x46454443
    12e8:	000012d8 	.word	0x000012d8
    12ec:	0000013f 	.word	0x0000013f

000012f0 <__aeabi_drsub>:
    12f0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    12f4:	ea000000 	b	12fc <__adddf3>

000012f8 <__aeabi_dsub>:
    12f8:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000012fc <__adddf3>:
    12fc:	e92d4030 	push	{r4, r5, lr}
    1300:	e1a04081 	lsl	r4, r1, #1
    1304:	e1a05083 	lsl	r5, r3, #1
    1308:	e1340005 	teq	r4, r5
    130c:	01300002 	teqeq	r0, r2
    1310:	1194c000 	orrsne	r12, r4, r0
    1314:	1195c002 	orrsne	r12, r5, r2
    1318:	11f0cac4 	mvnsne	r12, r4, asr #21
    131c:	11f0cac5 	mvnsne	r12, r5, asr #21
    1320:	0a00008c 	beq	1558 <__adddf3+0x25c>
    1324:	e1a04aa4 	lsr	r4, r4, #21
    1328:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    132c:	b2655000 	rsblt	r5, r5, #0
    1330:	da000006 	ble	1350 <__adddf3+0x54>
    1334:	e0844005 	add	r4, r4, r5
    1338:	e0202002 	eor	r2, r0, r2
    133c:	e0213003 	eor	r3, r1, r3
    1340:	e0220000 	eor	r0, r2, r0
    1344:	e0231001 	eor	r1, r3, r1
    1348:	e0202002 	eor	r2, r0, r2
    134c:	e0213003 	eor	r3, r1, r3
    1350:	e3550036 	cmp	r5, #54	; 0x36
    1354:	88bd4030 	pophi	{r4, r5, lr}
    1358:	812fff1e 	bxhi	lr
    135c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1360:	e1a01601 	lsl	r1, r1, #12
    1364:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1368:	e18c1621 	orr	r1, r12, r1, lsr #12
    136c:	0a000001 	beq	1378 <__adddf3+0x7c>
    1370:	e2700000 	rsbs	r0, r0, #0
    1374:	e2e11000 	rsc	r1, r1, #0
    1378:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    137c:	e1a03603 	lsl	r3, r3, #12
    1380:	e18c3623 	orr	r3, r12, r3, lsr #12
    1384:	0a000001 	beq	1390 <__adddf3+0x94>
    1388:	e2722000 	rsbs	r2, r2, #0
    138c:	e2e33000 	rsc	r3, r3, #0
    1390:	e1340005 	teq	r4, r5
    1394:	0a000069 	beq	1540 <__adddf3+0x244>
    1398:	e2444001 	sub	r4, r4, #1
    139c:	e275e020 	rsbs	lr, r5, #32
    13a0:	ba000005 	blt	13bc <__adddf3+0xc0>
    13a4:	e1a0ce12 	lsl	r12, r2, lr
    13a8:	e0900532 	adds	r0, r0, r2, lsr r5
    13ac:	e2a11000 	adc	r1, r1, #0
    13b0:	e0900e13 	adds	r0, r0, r3, lsl lr
    13b4:	e0b11553 	adcs	r1, r1, r3, asr r5
    13b8:	ea000006 	b	13d8 <__adddf3+0xdc>
    13bc:	e2455020 	sub	r5, r5, #32
    13c0:	e28ee020 	add	lr, lr, #32
    13c4:	e3520001 	cmp	r2, #1
    13c8:	e1a0ce13 	lsl	r12, r3, lr
    13cc:	238cc002 	orrcs	r12, r12, #2
    13d0:	e0900553 	adds	r0, r0, r3, asr r5
    13d4:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    13d8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    13dc:	5a000002 	bpl	13ec <__adddf3+0xf0>
    13e0:	e27cc000 	rsbs	r12, r12, #0
    13e4:	e2f00000 	rscs	r0, r0, #0
    13e8:	e2e11000 	rsc	r1, r1, #0
    13ec:	e3510601 	cmp	r1, #1048576	; 0x100000
    13f0:	3a00000f 	bcc	1434 <__adddf3+0x138>
    13f4:	e3510602 	cmp	r1, #2097152	; 0x200000
    13f8:	3a000006 	bcc	1418 <__adddf3+0x11c>
    13fc:	e1b010a1 	lsrs	r1, r1, #1
    1400:	e1b00060 	rrxs	r0, r0
    1404:	e1a0c06c 	rrx	r12, r12
    1408:	e2844001 	add	r4, r4, #1
    140c:	e1a02a84 	lsl	r2, r4, #21
    1410:	e3720501 	cmn	r2, #4194304	; 0x400000
    1414:	2a00006b 	bcs	15c8 <__adddf3+0x2cc>
    1418:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    141c:	01b0c0a0 	lsrseq	r12, r0, #1
    1420:	e2b00000 	adcs	r0, r0, #0
    1424:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1428:	e1811005 	orr	r1, r1, r5
    142c:	e8bd4030 	pop	{r4, r5, lr}
    1430:	e12fff1e 	bx	lr
    1434:	e1b0c08c 	lsls	r12, r12, #1
    1438:	e0b00000 	adcs	r0, r0, r0
    143c:	e0a11001 	adc	r1, r1, r1
    1440:	e3110601 	tst	r1, #1048576	; 0x100000
    1444:	e2444001 	sub	r4, r4, #1
    1448:	1afffff2 	bne	1418 <__adddf3+0x11c>
    144c:	e3310000 	teq	r1, #0
    1450:	13a03014 	movne	r3, #20
    1454:	03a03034 	moveq	r3, #52	; 0x34
    1458:	01a01000 	moveq	r1, r0
    145c:	03a00000 	moveq	r0, #0
    1460:	e1a02001 	mov	r2, r1
    1464:	e3520801 	cmp	r2, #65536	; 0x10000
    1468:	21a02822 	lsrcs	r2, r2, #16
    146c:	22433010 	subcs	r3, r3, #16
    1470:	e3520c01 	cmp	r2, #256	; 0x100
    1474:	21a02422 	lsrcs	r2, r2, #8
    1478:	22433008 	subcs	r3, r3, #8
    147c:	e3520010 	cmp	r2, #16
    1480:	21a02222 	lsrcs	r2, r2, #4
    1484:	22433004 	subcs	r3, r3, #4
    1488:	e3520004 	cmp	r2, #4
    148c:	22433002 	subcs	r3, r3, #2
    1490:	304330a2 	subcc	r3, r3, r2, lsr #1
    1494:	e04331a2 	sub	r3, r3, r2, lsr #3
    1498:	e2532020 	subs	r2, r3, #32
    149c:	aa000007 	bge	14c0 <__adddf3+0x1c4>
    14a0:	e292200c 	adds	r2, r2, #12
    14a4:	da000004 	ble	14bc <__adddf3+0x1c0>
    14a8:	e282c014 	add	r12, r2, #20
    14ac:	e262200c 	rsb	r2, r2, #12
    14b0:	e1a00c11 	lsl	r0, r1, r12
    14b4:	e1a01231 	lsr	r1, r1, r2
    14b8:	ea000004 	b	14d0 <__adddf3+0x1d4>
    14bc:	e2822014 	add	r2, r2, #20
    14c0:	d262c020 	rsble	r12, r2, #32
    14c4:	e1a01211 	lsl	r1, r1, r2
    14c8:	d1811c30 	orrle	r1, r1, r0, lsr r12
    14cc:	d1a00210 	lslle	r0, r0, r2
    14d0:	e0544003 	subs	r4, r4, r3
    14d4:	a0811a04 	addge	r1, r1, r4, lsl #20
    14d8:	a1811005 	orrge	r1, r1, r5
    14dc:	a8bd4030 	popge	{r4, r5, lr}
    14e0:	a12fff1e 	bxge	lr
    14e4:	e1e04004 	mvn	r4, r4
    14e8:	e254401f 	subs	r4, r4, #31
    14ec:	aa00000f 	bge	1530 <__adddf3+0x234>
    14f0:	e294400c 	adds	r4, r4, #12
    14f4:	ca000006 	bgt	1514 <__adddf3+0x218>
    14f8:	e2844014 	add	r4, r4, #20
    14fc:	e2642020 	rsb	r2, r4, #32
    1500:	e1a00430 	lsr	r0, r0, r4
    1504:	e1800211 	orr	r0, r0, r1, lsl r2
    1508:	e1851431 	orr	r1, r5, r1, lsr r4
    150c:	e8bd4030 	pop	{r4, r5, lr}
    1510:	e12fff1e 	bx	lr
    1514:	e264400c 	rsb	r4, r4, #12
    1518:	e2642020 	rsb	r2, r4, #32
    151c:	e1a00230 	lsr	r0, r0, r2
    1520:	e1800411 	orr	r0, r0, r1, lsl r4
    1524:	e1a01005 	mov	r1, r5
    1528:	e8bd4030 	pop	{r4, r5, lr}
    152c:	e12fff1e 	bx	lr
    1530:	e1a00431 	lsr	r0, r1, r4
    1534:	e1a01005 	mov	r1, r5
    1538:	e8bd4030 	pop	{r4, r5, lr}
    153c:	e12fff1e 	bx	lr
    1540:	e3340000 	teq	r4, #0
    1544:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1548:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    154c:	02844001 	addeq	r4, r4, #1
    1550:	12455001 	subne	r5, r5, #1
    1554:	eaffff8f 	b	1398 <__adddf3+0x9c>
    1558:	e1f0cac4 	mvns	r12, r4, asr #21
    155c:	11f0cac5 	mvnsne	r12, r5, asr #21
    1560:	0a00001d 	beq	15dc <__adddf3+0x2e0>
    1564:	e1340005 	teq	r4, r5
    1568:	01300002 	teqeq	r0, r2
    156c:	0a000004 	beq	1584 <__adddf3+0x288>
    1570:	e194c000 	orrs	r12, r4, r0
    1574:	01a01003 	moveq	r1, r3
    1578:	01a00002 	moveq	r0, r2
    157c:	e8bd4030 	pop	{r4, r5, lr}
    1580:	e12fff1e 	bx	lr
    1584:	e1310003 	teq	r1, r3
    1588:	13a01000 	movne	r1, #0
    158c:	13a00000 	movne	r0, #0
    1590:	18bd4030 	popne	{r4, r5, lr}
    1594:	112fff1e 	bxne	lr
    1598:	e1b0caa4 	lsrs	r12, r4, #21
    159c:	1a000004 	bne	15b4 <__adddf3+0x2b8>
    15a0:	e1b00080 	lsls	r0, r0, #1
    15a4:	e0b11001 	adcs	r1, r1, r1
    15a8:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    15ac:	e8bd4030 	pop	{r4, r5, lr}
    15b0:	e12fff1e 	bx	lr
    15b4:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    15b8:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    15bc:	38bd4030 	popcc	{r4, r5, lr}
    15c0:	312fff1e 	bxcc	lr
    15c4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    15c8:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    15cc:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    15d0:	e3a00000 	mov	r0, #0
    15d4:	e8bd4030 	pop	{r4, r5, lr}
    15d8:	e12fff1e 	bx	lr
    15dc:	e1f0cac4 	mvns	r12, r4, asr #21
    15e0:	11a01003 	movne	r1, r3
    15e4:	11a00002 	movne	r0, r2
    15e8:	01f0cac5 	mvnseq	r12, r5, asr #21
    15ec:	11a03001 	movne	r3, r1
    15f0:	11a02000 	movne	r2, r0
    15f4:	e1904601 	orrs	r4, r0, r1, lsl #12
    15f8:	01925603 	orrseq	r5, r2, r3, lsl #12
    15fc:	01310003 	teqeq	r1, r3
    1600:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1604:	e8bd4030 	pop	{r4, r5, lr}
    1608:	e12fff1e 	bx	lr

0000160c <__aeabi_ui2d>:
    160c:	e3300000 	teq	r0, #0
    1610:	03a01000 	moveq	r1, #0
    1614:	012fff1e 	bxeq	lr
    1618:	e92d4030 	push	{r4, r5, lr}
    161c:	e3a04b01 	mov	r4, #1024	; 0x400
    1620:	e2844032 	add	r4, r4, #50	; 0x32
    1624:	e3a05000 	mov	r5, #0
    1628:	e3a01000 	mov	r1, #0
    162c:	eaffff86 	b	144c <__adddf3+0x150>

00001630 <__aeabi_i2d>:
    1630:	e3300000 	teq	r0, #0
    1634:	03a01000 	moveq	r1, #0
    1638:	012fff1e 	bxeq	lr
    163c:	e92d4030 	push	{r4, r5, lr}
    1640:	e3a04b01 	mov	r4, #1024	; 0x400
    1644:	e2844032 	add	r4, r4, #50	; 0x32
    1648:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    164c:	42600000 	rsbmi	r0, r0, #0
    1650:	e3a01000 	mov	r1, #0
    1654:	eaffff7c 	b	144c <__adddf3+0x150>

00001658 <__aeabi_f2d>:
    1658:	e1b02080 	lsls	r2, r0, #1
    165c:	e1a011c2 	asr	r1, r2, #3
    1660:	e1a01061 	rrx	r1, r1
    1664:	e1a00e02 	lsl	r0, r2, #28
    1668:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    166c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1670:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1674:	112fff1e 	bxne	lr
    1678:	e3320000 	teq	r2, #0
    167c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1680:	012fff1e 	bxeq	lr
    1684:	e92d4030 	push	{r4, r5, lr}
    1688:	e3a04d0e 	mov	r4, #896	; 0x380
    168c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1690:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1694:	eaffff6c 	b	144c <__adddf3+0x150>

00001698 <__aeabi_ul2d>:
    1698:	e1902001 	orrs	r2, r0, r1
    169c:	012fff1e 	bxeq	lr
    16a0:	e92d4030 	push	{r4, r5, lr}
    16a4:	e3a05000 	mov	r5, #0
    16a8:	ea000006 	b	16c8 <__aeabi_l2d+0x1c>

000016ac <__aeabi_l2d>:
    16ac:	e1902001 	orrs	r2, r0, r1
    16b0:	012fff1e 	bxeq	lr
    16b4:	e92d4030 	push	{r4, r5, lr}
    16b8:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    16bc:	5a000001 	bpl	16c8 <__aeabi_l2d+0x1c>
    16c0:	e2700000 	rsbs	r0, r0, #0
    16c4:	e2e11000 	rsc	r1, r1, #0
    16c8:	e3a04b01 	mov	r4, #1024	; 0x400
    16cc:	e2844032 	add	r4, r4, #50	; 0x32
    16d0:	e1b0cb21 	lsrs	r12, r1, #22
    16d4:	0affff44 	beq	13ec <__adddf3+0xf0>
    16d8:	e3a02003 	mov	r2, #3
    16dc:	e1b0c1ac 	lsrs	r12, r12, #3
    16e0:	12822003 	addne	r2, r2, #3
    16e4:	e1b0c1ac 	lsrs	r12, r12, #3
    16e8:	12822003 	addne	r2, r2, #3
    16ec:	e08221ac 	add	r2, r2, r12, lsr #3
    16f0:	e2623020 	rsb	r3, r2, #32
    16f4:	e1a0c310 	lsl	r12, r0, r3
    16f8:	e1a00230 	lsr	r0, r0, r2
    16fc:	e1800311 	orr	r0, r0, r1, lsl r3
    1700:	e1a01231 	lsr	r1, r1, r2
    1704:	e0844002 	add	r4, r4, r2
    1708:	eaffff37 	b	13ec <__adddf3+0xf0>

0000170c <__aeabi_dmul>:
    170c:	e92d4070 	push	{r4, r5, r6, lr}
    1710:	e3a0c0ff 	mov	r12, #255	; 0xff
    1714:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1718:	e01c4a21 	ands	r4, r12, r1, lsr #20
    171c:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1720:	1134000c 	teqne	r4, r12
    1724:	1135000c 	teqne	r5, r12
    1728:	0b000075 	bleq	1904 <__aeabi_dmul+0x1f8>
    172c:	e0844005 	add	r4, r4, r5
    1730:	e0216003 	eor	r6, r1, r3
    1734:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1738:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    173c:	e1905601 	orrs	r5, r0, r1, lsl #12
    1740:	11925603 	orrsne	r5, r2, r3, lsl #12
    1744:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1748:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    174c:	0a00001d 	beq	17c8 <__aeabi_dmul+0xbc>
    1750:	e08ec290 	umull	r12, lr, r0, r2
    1754:	e3a05000 	mov	r5, #0
    1758:	e0a5e291 	umlal	lr, r5, r1, r2
    175c:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1760:	e0a5e390 	umlal	lr, r5, r0, r3
    1764:	e3a06000 	mov	r6, #0
    1768:	e0a65391 	umlal	r5, r6, r1, r3
    176c:	e33c0000 	teq	r12, #0
    1770:	138ee001 	orrne	lr, lr, #1
    1774:	e24440ff 	sub	r4, r4, #255	; 0xff
    1778:	e3560c02 	cmp	r6, #512	; 0x200
    177c:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1780:	2a000002 	bcs	1790 <__aeabi_dmul+0x84>
    1784:	e1b0e08e 	lsls	lr, lr, #1
    1788:	e0b55005 	adcs	r5, r5, r5
    178c:	e0a66006 	adc	r6, r6, r6
    1790:	e1821586 	orr	r1, r2, r6, lsl #11
    1794:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1798:	e1a00585 	lsl	r0, r5, #11
    179c:	e1800aae 	orr	r0, r0, lr, lsr #21
    17a0:	e1a0e58e 	lsl	lr, lr, #11
    17a4:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    17a8:	835c0c07 	cmphi	r12, #1792	; 0x700
    17ac:	8a000011 	bhi	17f8 <__aeabi_dmul+0xec>
    17b0:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    17b4:	01b0e0a0 	lsrseq	lr, r0, #1
    17b8:	e2b00000 	adcs	r0, r0, #0
    17bc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    17c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    17c4:	e12fff1e 	bx	lr
    17c8:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    17cc:	e1861001 	orr	r1, r6, r1
    17d0:	e1800002 	orr	r0, r0, r2
    17d4:	e0211003 	eor	r1, r1, r3
    17d8:	e05440ac 	subs	r4, r4, r12, lsr #1
    17dc:	c074500c 	rsbsgt	r5, r4, r12
    17e0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    17e4:	c8bd4070 	popgt	{r4, r5, r6, lr}
    17e8:	c12fff1e 	bxgt	lr
    17ec:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    17f0:	e3a0e000 	mov	lr, #0
    17f4:	e2544001 	subs	r4, r4, #1
    17f8:	ca00005d 	bgt	1974 <__aeabi_dmul+0x268>
    17fc:	e3740036 	cmn	r4, #54	; 0x36
    1800:	d3a00000 	movle	r0, #0
    1804:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1808:	d8bd4070 	pople	{r4, r5, r6, lr}
    180c:	d12fff1e 	bxle	lr
    1810:	e2644000 	rsb	r4, r4, #0
    1814:	e2544020 	subs	r4, r4, #32
    1818:	aa00001a 	bge	1888 <__aeabi_dmul+0x17c>
    181c:	e294400c 	adds	r4, r4, #12
    1820:	ca00000c 	bgt	1858 <__aeabi_dmul+0x14c>
    1824:	e2844014 	add	r4, r4, #20
    1828:	e2645020 	rsb	r5, r4, #32
    182c:	e1a03510 	lsl	r3, r0, r5
    1830:	e1a00430 	lsr	r0, r0, r4
    1834:	e1800511 	orr	r0, r0, r1, lsl r5
    1838:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    183c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1840:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1844:	e0a21431 	adc	r1, r2, r1, lsr r4
    1848:	e19ee083 	orrs	lr, lr, r3, lsl #1
    184c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1850:	e8bd4070 	pop	{r4, r5, r6, lr}
    1854:	e12fff1e 	bx	lr
    1858:	e264400c 	rsb	r4, r4, #12
    185c:	e2645020 	rsb	r5, r4, #32
    1860:	e1a03410 	lsl	r3, r0, r4
    1864:	e1a00530 	lsr	r0, r0, r5
    1868:	e1800411 	orr	r0, r0, r1, lsl r4
    186c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1870:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1874:	e2a11000 	adc	r1, r1, #0
    1878:	e19ee083 	orrs	lr, lr, r3, lsl #1
    187c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1880:	e8bd4070 	pop	{r4, r5, r6, lr}
    1884:	e12fff1e 	bx	lr
    1888:	e2645020 	rsb	r5, r4, #32
    188c:	e18ee510 	orr	lr, lr, r0, lsl r5
    1890:	e1a03430 	lsr	r3, r0, r4
    1894:	e1833511 	orr	r3, r3, r1, lsl r5
    1898:	e1a00431 	lsr	r0, r1, r4
    189c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    18a0:	e1c00431 	bic	r0, r0, r1, lsr r4
    18a4:	e0800fa3 	add	r0, r0, r3, lsr #31
    18a8:	e19ee083 	orrs	lr, lr, r3, lsl #1
    18ac:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    18b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    18b4:	e12fff1e 	bx	lr
    18b8:	e3340000 	teq	r4, #0
    18bc:	1a000008 	bne	18e4 <__aeabi_dmul+0x1d8>
    18c0:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    18c4:	e1b00080 	lsls	r0, r0, #1
    18c8:	e0a11001 	adc	r1, r1, r1
    18cc:	e3110601 	tst	r1, #1048576	; 0x100000
    18d0:	02444001 	subeq	r4, r4, #1
    18d4:	0afffffa 	beq	18c4 <__aeabi_dmul+0x1b8>
    18d8:	e1811006 	orr	r1, r1, r6
    18dc:	e3350000 	teq	r5, #0
    18e0:	112fff1e 	bxne	lr
    18e4:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    18e8:	e1b02082 	lsls	r2, r2, #1
    18ec:	e0a33003 	adc	r3, r3, r3
    18f0:	e3130601 	tst	r3, #1048576	; 0x100000
    18f4:	02455001 	subeq	r5, r5, #1
    18f8:	0afffffa 	beq	18e8 <__aeabi_dmul+0x1dc>
    18fc:	e1833006 	orr	r3, r3, r6
    1900:	e12fff1e 	bx	lr
    1904:	e134000c 	teq	r4, r12
    1908:	e00c5a23 	and	r5, r12, r3, lsr #20
    190c:	1135000c 	teqne	r5, r12
    1910:	0a000007 	beq	1934 <__aeabi_dmul+0x228>
    1914:	e1906081 	orrs	r6, r0, r1, lsl #1
    1918:	11926083 	orrsne	r6, r2, r3, lsl #1
    191c:	1affffe5 	bne	18b8 <__aeabi_dmul+0x1ac>
    1920:	e0211003 	eor	r1, r1, r3
    1924:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1928:	e3a00000 	mov	r0, #0
    192c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1930:	e12fff1e 	bx	lr
    1934:	e1906081 	orrs	r6, r0, r1, lsl #1
    1938:	01a00002 	moveq	r0, r2
    193c:	01a01003 	moveq	r1, r3
    1940:	11926083 	orrsne	r6, r2, r3, lsl #1
    1944:	0a000010 	beq	198c <__aeabi_dmul+0x280>
    1948:	e134000c 	teq	r4, r12
    194c:	1a000001 	bne	1958 <__aeabi_dmul+0x24c>
    1950:	e1906601 	orrs	r6, r0, r1, lsl #12
    1954:	1a00000c 	bne	198c <__aeabi_dmul+0x280>
    1958:	e135000c 	teq	r5, r12
    195c:	1a000003 	bne	1970 <__aeabi_dmul+0x264>
    1960:	e1926603 	orrs	r6, r2, r3, lsl #12
    1964:	11a00002 	movne	r0, r2
    1968:	11a01003 	movne	r1, r3
    196c:	1a000006 	bne	198c <__aeabi_dmul+0x280>
    1970:	e0211003 	eor	r1, r1, r3
    1974:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1978:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    197c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1980:	e3a00000 	mov	r0, #0
    1984:	e8bd4070 	pop	{r4, r5, r6, lr}
    1988:	e12fff1e 	bx	lr
    198c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1990:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1994:	e8bd4070 	pop	{r4, r5, r6, lr}
    1998:	e12fff1e 	bx	lr

0000199c <__aeabi_ddiv>:
    199c:	e92d4070 	push	{r4, r5, r6, lr}
    19a0:	e3a0c0ff 	mov	r12, #255	; 0xff
    19a4:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    19a8:	e01c4a21 	ands	r4, r12, r1, lsr #20
    19ac:	101c5a23 	andsne	r5, r12, r3, lsr #20
    19b0:	1134000c 	teqne	r4, r12
    19b4:	1135000c 	teqne	r5, r12
    19b8:	0b00005e 	bleq	1b38 <__aeabi_ddiv+0x19c>
    19bc:	e0444005 	sub	r4, r4, r5
    19c0:	e021e003 	eor	lr, r1, r3
    19c4:	e1925603 	orrs	r5, r2, r3, lsl #12
    19c8:	e1a01601 	lsl	r1, r1, #12
    19cc:	0a00004c 	beq	1b04 <__aeabi_ddiv+0x168>
    19d0:	e1a03603 	lsl	r3, r3, #12
    19d4:	e3a05201 	mov	r5, #268435456	; 0x10000000
    19d8:	e1853223 	orr	r3, r5, r3, lsr #4
    19dc:	e1833c22 	orr	r3, r3, r2, lsr #24
    19e0:	e1a02402 	lsl	r2, r2, #8
    19e4:	e1855221 	orr	r5, r5, r1, lsr #4
    19e8:	e1855c20 	orr	r5, r5, r0, lsr #24
    19ec:	e1a06400 	lsl	r6, r0, #8
    19f0:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    19f4:	e1550003 	cmp	r5, r3
    19f8:	01560002 	cmpeq	r6, r2
    19fc:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1a00:	e2844c03 	add	r4, r4, #768	; 0x300
    1a04:	2a000001 	bcs	1a10 <__aeabi_ddiv+0x74>
    1a08:	e1b030a3 	lsrs	r3, r3, #1
    1a0c:	e1a02062 	rrx	r2, r2
    1a10:	e0566002 	subs	r6, r6, r2
    1a14:	e0c55003 	sbc	r5, r5, r3
    1a18:	e1b030a3 	lsrs	r3, r3, #1
    1a1c:	e1a02062 	rrx	r2, r2
    1a20:	e3a00601 	mov	r0, #1048576	; 0x100000
    1a24:	e3a0c702 	mov	r12, #524288	; 0x80000
    1a28:	e056e002 	subs	lr, r6, r2
    1a2c:	e0d5e003 	sbcs	lr, r5, r3
    1a30:	20466002 	subcs	r6, r6, r2
    1a34:	21a0500e 	movcs	r5, lr
    1a38:	2180000c 	orrcs	r0, r0, r12
    1a3c:	e1b030a3 	lsrs	r3, r3, #1
    1a40:	e1a02062 	rrx	r2, r2
    1a44:	e056e002 	subs	lr, r6, r2
    1a48:	e0d5e003 	sbcs	lr, r5, r3
    1a4c:	20466002 	subcs	r6, r6, r2
    1a50:	21a0500e 	movcs	r5, lr
    1a54:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1a58:	e1b030a3 	lsrs	r3, r3, #1
    1a5c:	e1a02062 	rrx	r2, r2
    1a60:	e056e002 	subs	lr, r6, r2
    1a64:	e0d5e003 	sbcs	lr, r5, r3
    1a68:	20466002 	subcs	r6, r6, r2
    1a6c:	21a0500e 	movcs	r5, lr
    1a70:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1a74:	e1b030a3 	lsrs	r3, r3, #1
    1a78:	e1a02062 	rrx	r2, r2
    1a7c:	e056e002 	subs	lr, r6, r2
    1a80:	e0d5e003 	sbcs	lr, r5, r3
    1a84:	20466002 	subcs	r6, r6, r2
    1a88:	21a0500e 	movcs	r5, lr
    1a8c:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1a90:	e195e006 	orrs	lr, r5, r6
    1a94:	0a00000d 	beq	1ad0 <__aeabi_ddiv+0x134>
    1a98:	e1a05205 	lsl	r5, r5, #4
    1a9c:	e1855e26 	orr	r5, r5, r6, lsr #28
    1aa0:	e1a06206 	lsl	r6, r6, #4
    1aa4:	e1a03183 	lsl	r3, r3, #3
    1aa8:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1aac:	e1a02182 	lsl	r2, r2, #3
    1ab0:	e1b0c22c 	lsrs	r12, r12, #4
    1ab4:	1affffdb 	bne	1a28 <__aeabi_ddiv+0x8c>
    1ab8:	e3110601 	tst	r1, #1048576	; 0x100000
    1abc:	1a000006 	bne	1adc <__aeabi_ddiv+0x140>
    1ac0:	e1811000 	orr	r1, r1, r0
    1ac4:	e3a00000 	mov	r0, #0
    1ac8:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    1acc:	eaffffd5 	b	1a28 <__aeabi_ddiv+0x8c>
    1ad0:	e3110601 	tst	r1, #1048576	; 0x100000
    1ad4:	01811000 	orreq	r1, r1, r0
    1ad8:	03a00000 	moveq	r0, #0
    1adc:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1ae0:	835c0c07 	cmphi	r12, #1792	; 0x700
    1ae4:	8affff43 	bhi	17f8 <__aeabi_dmul+0xec>
    1ae8:	e055c003 	subs	r12, r5, r3
    1aec:	0056c002 	subseq	r12, r6, r2
    1af0:	01b0c0a0 	lsrseq	r12, r0, #1
    1af4:	e2b00000 	adcs	r0, r0, #0
    1af8:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1afc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b00:	e12fff1e 	bx	lr
    1b04:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1b08:	e18e1621 	orr	r1, lr, r1, lsr #12
    1b0c:	e09440ac 	adds	r4, r4, r12, lsr #1
    1b10:	c074500c 	rsbsgt	r5, r4, r12
    1b14:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1b18:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1b1c:	c12fff1e 	bxgt	lr
    1b20:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1b24:	e3a0e000 	mov	lr, #0
    1b28:	e2544001 	subs	r4, r4, #1
    1b2c:	eaffff31 	b	17f8 <__aeabi_dmul+0xec>
    1b30:	e185e006 	orr	lr, r5, r6
    1b34:	eaffff2f 	b	17f8 <__aeabi_dmul+0xec>
    1b38:	e00c5a23 	and	r5, r12, r3, lsr #20
    1b3c:	e134000c 	teq	r4, r12
    1b40:	0135000c 	teqeq	r5, r12
    1b44:	0affff90 	beq	198c <__aeabi_dmul+0x280>
    1b48:	e134000c 	teq	r4, r12
    1b4c:	1a000006 	bne	1b6c <__aeabi_ddiv+0x1d0>
    1b50:	e1904601 	orrs	r4, r0, r1, lsl #12
    1b54:	1affff8c 	bne	198c <__aeabi_dmul+0x280>
    1b58:	e135000c 	teq	r5, r12
    1b5c:	1affff83 	bne	1970 <__aeabi_dmul+0x264>
    1b60:	e1a00002 	mov	r0, r2
    1b64:	e1a01003 	mov	r1, r3
    1b68:	eaffff87 	b	198c <__aeabi_dmul+0x280>
    1b6c:	e135000c 	teq	r5, r12
    1b70:	1a000004 	bne	1b88 <__aeabi_ddiv+0x1ec>
    1b74:	e1925603 	orrs	r5, r2, r3, lsl #12
    1b78:	0affff68 	beq	1920 <__aeabi_dmul+0x214>
    1b7c:	e1a00002 	mov	r0, r2
    1b80:	e1a01003 	mov	r1, r3
    1b84:	eaffff80 	b	198c <__aeabi_dmul+0x280>
    1b88:	e1906081 	orrs	r6, r0, r1, lsl #1
    1b8c:	11926083 	orrsne	r6, r2, r3, lsl #1
    1b90:	1affff48 	bne	18b8 <__aeabi_dmul+0x1ac>
    1b94:	e1904081 	orrs	r4, r0, r1, lsl #1
    1b98:	1affff74 	bne	1970 <__aeabi_dmul+0x264>
    1b9c:	e1925083 	orrs	r5, r2, r3, lsl #1
    1ba0:	1affff5e 	bne	1920 <__aeabi_dmul+0x214>
    1ba4:	eaffff78 	b	198c <__aeabi_dmul+0x280>

00001ba8 <__aeabi_d2iz>:
    1ba8:	e1a02081 	lsl	r2, r1, #1
    1bac:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    1bb0:	2a00000c 	bcs	1be8 <__aeabi_d2iz+0x40>
    1bb4:	5a000009 	bpl	1be0 <__aeabi_d2iz+0x38>
    1bb8:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    1bbc:	e0532ac2 	subs	r2, r3, r2, asr #21
    1bc0:	9a00000a 	bls	1bf0 <__aeabi_d2iz+0x48>
    1bc4:	e1a03581 	lsl	r3, r1, #11
    1bc8:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1bcc:	e1833aa0 	orr	r3, r3, r0, lsr #21
    1bd0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1bd4:	e1a00233 	lsr	r0, r3, r2
    1bd8:	12600000 	rsbne	r0, r0, #0
    1bdc:	e12fff1e 	bx	lr
    1be0:	e3a00000 	mov	r0, #0
    1be4:	e12fff1e 	bx	lr
    1be8:	e1900601 	orrs	r0, r0, r1, lsl #12
    1bec:	1a000002 	bne	1bfc <__aeabi_d2iz+0x54>
    1bf0:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    1bf4:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1bf8:	e12fff1e 	bx	lr
    1bfc:	e3a00000 	mov	r0, #0
    1c00:	e12fff1e 	bx	lr

00001c04 <__aeabi_f2iz>:
    1c04:	e1a02080 	lsl	r2, r0, #1
    1c08:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    1c0c:	3a000008 	bcc	1c34 <__aeabi_f2iz+0x30>
    1c10:	e3a0309e 	mov	r3, #158	; 0x9e
    1c14:	e0532c22 	subs	r2, r3, r2, lsr #24
    1c18:	9a000007 	bls	1c3c <__aeabi_f2iz+0x38>
    1c1c:	e1a03400 	lsl	r3, r0, #8
    1c20:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1c24:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    1c28:	e1a00233 	lsr	r0, r3, r2
    1c2c:	12600000 	rsbne	r0, r0, #0
    1c30:	e12fff1e 	bx	lr
    1c34:	e3a00000 	mov	r0, #0
    1c38:	e12fff1e 	bx	lr
    1c3c:	e3720061 	cmn	r2, #97	; 0x61
    1c40:	1a000001 	bne	1c4c <__aeabi_f2iz+0x48>
    1c44:	e1b02480 	lsls	r2, r0, #9
    1c48:	1a000002 	bne	1c58 <__aeabi_f2iz+0x54>
    1c4c:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    1c50:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1c54:	e12fff1e 	bx	lr
    1c58:	e3a00000 	mov	r0, #0
    1c5c:	e12fff1e 	bx	lr

00001c60 <atexit>:
    1c60:	e1a01000 	mov	r1, r0
    1c64:	e3a00000 	mov	r0, #0
    1c68:	e92d4008 	push	{r3, lr}
    1c6c:	e1a02000 	mov	r2, r0
    1c70:	e1a03000 	mov	r3, r0
    1c74:	eb00000e 	bl	1cb4 <__register_exitproc>
    1c78:	e8bd4008 	pop	{r3, lr}
    1c7c:	e12fff1e 	bx	lr

00001c80 <exit>:
    1c80:	e92d4008 	push	{r3, lr}
    1c84:	e3a01000 	mov	r1, #0
    1c88:	e1a04000 	mov	r4, r0
    1c8c:	eb000045 	bl	1da8 <__call_exitprocs>
    1c90:	e59f3018 	ldr	r3, [pc, #24]	; 1cb0 <exit+0x30>
    1c94:	e5930000 	ldr	r0, [r3]
    1c98:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1c9c:	e3530000 	cmp	r3, #0
    1ca0:	11a0e00f 	movne	lr, pc
    1ca4:	112fff13 	bxne	r3
    1ca8:	e1a00004 	mov	r0, r4
    1cac:	eb0000c9 	bl	1fd8 <_exit>
    1cb0:	00002080 	.word	0x00002080

00001cb4 <__register_exitproc>:
    1cb4:	e59fc0e4 	ldr	r12, [pc, #228]	; 1da0 <__register_exitproc+0xec>
    1cb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1cbc:	e59c4000 	ldr	r4, [r12]
    1cc0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1cc4:	e35c0000 	cmp	r12, #0
    1cc8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1ccc:	e59c5004 	ldr	r5, [r12, #4]
    1cd0:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1cd4:	e355001f 	cmp	r5, #31
    1cd8:	e24dd010 	sub	sp, sp, #16
    1cdc:	e1a06000 	mov	r6, r0
    1ce0:	da000015 	ble	1d3c <__register_exitproc+0x88>
    1ce4:	e59f00b8 	ldr	r0, [pc, #184]	; 1da4 <__register_exitproc+0xf0>
    1ce8:	e3500000 	cmp	r0, #0
    1cec:	1a000001 	bne	1cf8 <__register_exitproc+0x44>
    1cf0:	e3e00000 	mvn	r0, #0
    1cf4:	ea000018 	b	1d5c <__register_exitproc+0xa8>
    1cf8:	e3a00e19 	mov	r0, #400	; 0x190
    1cfc:	e58d100c 	str	r1, [sp, #12]
    1d00:	e58d2008 	str	r2, [sp, #8]
    1d04:	e58d3004 	str	r3, [sp, #4]
    1d08:	e320f000 	nop	{0}
    1d0c:	e250c000 	subs	r12, r0, #0
    1d10:	e59d100c 	ldr	r1, [sp, #12]
    1d14:	e59d2008 	ldr	r2, [sp, #8]
    1d18:	e59d3004 	ldr	r3, [sp, #4]
    1d1c:	0afffff3 	beq	1cf0 <__register_exitproc+0x3c>
    1d20:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1d24:	e3a00000 	mov	r0, #0
    1d28:	e58c0004 	str	r0, [r12, #4]
    1d2c:	e58c5000 	str	r5, [r12]
    1d30:	e584c148 	str	r12, [r4, #328]	; 0x148
    1d34:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1d38:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1d3c:	e3560000 	cmp	r6, #0
    1d40:	e59c4004 	ldr	r4, [r12, #4]
    1d44:	1a000007 	bne	1d68 <__register_exitproc+0xb4>
    1d48:	e2843002 	add	r3, r4, #2
    1d4c:	e2844001 	add	r4, r4, #1
    1d50:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1d54:	e58c4004 	str	r4, [r12, #4]
    1d58:	e3a00000 	mov	r0, #0
    1d5c:	e28dd010 	add	sp, sp, #16
    1d60:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1d64:	e12fff1e 	bx	lr
    1d68:	e3a00001 	mov	r0, #1
    1d6c:	e1a00410 	lsl	r0, r0, r4
    1d70:	e08c8104 	add	r8, r12, r4, lsl #2
    1d74:	e3560002 	cmp	r6, #2
    1d78:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1d7c:	e5883108 	str	r3, [r8, #264]	; 0x108
    1d80:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1d84:	e1877000 	orr	r7, r7, r0
    1d88:	01830000 	orreq	r0, r3, r0
    1d8c:	e1a05008 	mov	r5, r8
    1d90:	e5882088 	str	r2, [r8, #136]	; 0x88
    1d94:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1d98:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1d9c:	eaffffe9 	b	1d48 <__register_exitproc+0x94>
    1da0:	00002080 	.word	0x00002080
    1da4:	00000000 	.word	0x00000000

00001da8 <__call_exitprocs>:
    1da8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1dac:	e59f3168 	ldr	r3, [pc, #360]	; 1f1c <__call_exitprocs+0x174>
    1db0:	e5933000 	ldr	r3, [r3]
    1db4:	e24dd014 	sub	sp, sp, #20
    1db8:	e58d3004 	str	r3, [sp, #4]
    1dbc:	e2833f52 	add	r3, r3, #328	; 0x148
    1dc0:	e58d0008 	str	r0, [sp, #8]
    1dc4:	e58d300c 	str	r3, [sp, #12]
    1dc8:	e1a07001 	mov	r7, r1
    1dcc:	e3a08001 	mov	r8, #1
    1dd0:	e59d3004 	ldr	r3, [sp, #4]
    1dd4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1dd8:	e3560000 	cmp	r6, #0
    1ddc:	e59db00c 	ldr	r11, [sp, #12]
    1de0:	0a000033 	beq	1eb4 <__call_exitprocs+0x10c>
    1de4:	e5965004 	ldr	r5, [r6, #4]
    1de8:	e2554001 	subs	r4, r5, #1
    1dec:	5286a088 	addpl	r10, r6, #136	; 0x88
    1df0:	5285501f 	addpl	r5, r5, #31
    1df4:	508a5105 	addpl	r5, r10, r5, lsl #2
    1df8:	5a000007 	bpl	1e1c <__call_exitprocs+0x74>
    1dfc:	ea000029 	b	1ea8 <__call_exitprocs+0x100>
    1e00:	e5953000 	ldr	r3, [r5]
    1e04:	e1530007 	cmp	r3, r7
    1e08:	0a000005 	beq	1e24 <__call_exitprocs+0x7c>
    1e0c:	e2444001 	sub	r4, r4, #1
    1e10:	e3740001 	cmn	r4, #1
    1e14:	e2455004 	sub	r5, r5, #4
    1e18:	0a000022 	beq	1ea8 <__call_exitprocs+0x100>
    1e1c:	e3570000 	cmp	r7, #0
    1e20:	1afffff6 	bne	1e00 <__call_exitprocs+0x58>
    1e24:	e5963004 	ldr	r3, [r6, #4]
    1e28:	e06a2005 	rsb	r2, r10, r5
    1e2c:	e2433001 	sub	r3, r3, #1
    1e30:	e0862002 	add	r2, r6, r2
    1e34:	e1530004 	cmp	r3, r4
    1e38:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1e3c:	13a01000 	movne	r1, #0
    1e40:	05864004 	streq	r4, [r6, #4]
    1e44:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1e48:	e3530000 	cmp	r3, #0
    1e4c:	0affffee 	beq	1e0c <__call_exitprocs+0x64>
    1e50:	e1a02418 	lsl	r2, r8, r4
    1e54:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1e58:	e1120001 	tst	r2, r1
    1e5c:	e5969004 	ldr	r9, [r6, #4]
    1e60:	0a000016 	beq	1ec0 <__call_exitprocs+0x118>
    1e64:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1e68:	e1120001 	tst	r2, r1
    1e6c:	1a000016 	bne	1ecc <__call_exitprocs+0x124>
    1e70:	e59d0008 	ldr	r0, [sp, #8]
    1e74:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1e78:	e1a0e00f 	mov	lr, pc
    1e7c:	e12fff13 	bx	r3
    1e80:	e5963004 	ldr	r3, [r6, #4]
    1e84:	e1530009 	cmp	r3, r9
    1e88:	1affffd0 	bne	1dd0 <__call_exitprocs+0x28>
    1e8c:	e59b3000 	ldr	r3, [r11]
    1e90:	e1530006 	cmp	r3, r6
    1e94:	1affffcd 	bne	1dd0 <__call_exitprocs+0x28>
    1e98:	e2444001 	sub	r4, r4, #1
    1e9c:	e3740001 	cmn	r4, #1
    1ea0:	e2455004 	sub	r5, r5, #4
    1ea4:	1affffdc 	bne	1e1c <__call_exitprocs+0x74>
    1ea8:	e59f1070 	ldr	r1, [pc, #112]	; 1f20 <__call_exitprocs+0x178>
    1eac:	e3510000 	cmp	r1, #0
    1eb0:	1a000009 	bne	1edc <__call_exitprocs+0x134>
    1eb4:	e28dd014 	add	sp, sp, #20
    1eb8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1ebc:	e12fff1e 	bx	lr
    1ec0:	e1a0e00f 	mov	lr, pc
    1ec4:	e12fff13 	bx	r3
    1ec8:	eaffffec 	b	1e80 <__call_exitprocs+0xd8>
    1ecc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1ed0:	e1a0e00f 	mov	lr, pc
    1ed4:	e12fff13 	bx	r3
    1ed8:	eaffffe8 	b	1e80 <__call_exitprocs+0xd8>
    1edc:	e5963004 	ldr	r3, [r6, #4]
    1ee0:	e3530000 	cmp	r3, #0
    1ee4:	e5963000 	ldr	r3, [r6]
    1ee8:	1a000008 	bne	1f10 <__call_exitprocs+0x168>
    1eec:	e3530000 	cmp	r3, #0
    1ef0:	0a000006 	beq	1f10 <__call_exitprocs+0x168>
    1ef4:	e1a00006 	mov	r0, r6
    1ef8:	e58b3000 	str	r3, [r11]
    1efc:	e320f000 	nop	{0}
    1f00:	e59b6000 	ldr	r6, [r11]
    1f04:	e3560000 	cmp	r6, #0
    1f08:	1affffb5 	bne	1de4 <__call_exitprocs+0x3c>
    1f0c:	eaffffe8 	b	1eb4 <__call_exitprocs+0x10c>
    1f10:	e1a0b006 	mov	r11, r6
    1f14:	e1a06003 	mov	r6, r3
    1f18:	eafffff9 	b	1f04 <__call_exitprocs+0x15c>
    1f1c:	00002080 	.word	0x00002080
    1f20:	00000000 	.word	0x00000000

00001f24 <register_fini>:
    1f24:	e92d4008 	push	{r3, lr}
    1f28:	e59f3010 	ldr	r3, [pc, #16]	; 1f40 <register_fini+0x1c>
    1f2c:	e3530000 	cmp	r3, #0
    1f30:	159f000c 	ldrne	r0, [pc, #12]	; 1f44 <register_fini+0x20>
    1f34:	1bffff49 	blne	1c60 <atexit>
    1f38:	e8bd4008 	pop	{r3, lr}
    1f3c:	e12fff1e 	bx	lr
    1f40:	000020a8 	.word	0x000020a8
    1f44:	00001f48 	.word	0x00001f48

00001f48 <__libc_fini_array>:
    1f48:	e92d4038 	push	{r3, r4, r5, lr}
    1f4c:	e59f5030 	ldr	r5, [pc, #48]	; 1f84 <__libc_fini_array+0x3c>
    1f50:	e59f4030 	ldr	r4, [pc, #48]	; 1f88 <__libc_fini_array+0x40>
    1f54:	e0654004 	rsb	r4, r5, r4
    1f58:	e1b04144 	asrs	r4, r4, #2
    1f5c:	10855104 	addne	r5, r5, r4, lsl #2
    1f60:	0a000004 	beq	1f78 <__libc_fini_array+0x30>
    1f64:	e5353004 	ldr	r3, [r5, #-4]!
    1f68:	e1a0e00f 	mov	lr, pc
    1f6c:	e12fff13 	bx	r3
    1f70:	e2544001 	subs	r4, r4, #1
    1f74:	1afffffa 	bne	1f64 <__libc_fini_array+0x1c>
    1f78:	eb00004a 	bl	20a8 <__libc_fini>
    1f7c:	e8bd4038 	pop	{r3, r4, r5, lr}
    1f80:	e12fff1e 	bx	lr
    1f84:	000020c0 	.word	0x000020c0
    1f88:	000020c4 	.word	0x000020c4

00001f8c <__cs3_premain>:
    1f8c:	e92d4008 	push	{r3, lr}
    1f90:	eb000017 	bl	1ff4 <__libc_init_array>
    1f94:	e59f3030 	ldr	r3, [pc, #48]	; 1fcc <__cs3_premain+0x40>
    1f98:	e3530000 	cmp	r3, #0
    1f9c:	15930000 	ldrne	r0, [r3]
    1fa0:	01a00003 	moveq	r0, r3
    1fa4:	e59f3024 	ldr	r3, [pc, #36]	; 1fd0 <__cs3_premain+0x44>
    1fa8:	e3530000 	cmp	r3, #0
    1fac:	15931000 	ldrne	r1, [r3]
    1fb0:	01a01003 	moveq	r1, r3
    1fb4:	e3a02000 	mov	r2, #0
    1fb8:	ebfff8c9 	bl	2e4 <main>
    1fbc:	e59f3010 	ldr	r3, [pc, #16]	; 1fd4 <__cs3_premain+0x48>
    1fc0:	e3530000 	cmp	r3, #0
    1fc4:	1bffff2d 	blne	1c80 <exit>
    1fc8:	eafffffe 	b	1fc8 <__cs3_premain+0x3c>
	...
    1fd4:	00001c80 	.word	0x00001c80

00001fd8 <_exit>:
    1fd8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1fdc:	e3a00018 	mov	r0, #24
    1fe0:	e59f1004 	ldr	r1, [pc, #4]	; 1fec <_exit+0x14>
    1fe4:	ef123456 	svc	0x00123456
    1fe8:	eafffffe 	b	1fe8 <_exit+0x10>
    1fec:	00020026 	.word	0x00020026

00001ff0 <__cs3_isr_interrupt>:
    1ff0:	eafffffe 	b	1ff0 <__cs3_isr_interrupt>

00001ff4 <__libc_init_array>:
    1ff4:	e92d4070 	push	{r4, r5, r6, lr}
    1ff8:	e59f506c 	ldr	r5, [pc, #108]	; 206c <__libc_init_array+0x78>
    1ffc:	e59f606c 	ldr	r6, [pc, #108]	; 2070 <__libc_init_array+0x7c>
    2000:	e0656006 	rsb	r6, r5, r6
    2004:	e1b06146 	asrs	r6, r6, #2
    2008:	12455004 	subne	r5, r5, #4
    200c:	13a04000 	movne	r4, #0
    2010:	0a000005 	beq	202c <__libc_init_array+0x38>
    2014:	e5b53004 	ldr	r3, [r5, #4]!
    2018:	e2844001 	add	r4, r4, #1
    201c:	e1a0e00f 	mov	lr, pc
    2020:	e12fff13 	bx	r3
    2024:	e1560004 	cmp	r6, r4
    2028:	1afffff9 	bne	2014 <__libc_init_array+0x20>
    202c:	e59f5040 	ldr	r5, [pc, #64]	; 2074 <__libc_init_array+0x80>
    2030:	e59f6040 	ldr	r6, [pc, #64]	; 2078 <__libc_init_array+0x84>
    2034:	e0656006 	rsb	r6, r5, r6
    2038:	eb000012 	bl	2088 <_init>
    203c:	e1b06146 	asrs	r6, r6, #2
    2040:	12455004 	subne	r5, r5, #4
    2044:	13a04000 	movne	r4, #0
    2048:	0a000005 	beq	2064 <__libc_init_array+0x70>
    204c:	e5b53004 	ldr	r3, [r5, #4]!
    2050:	e2844001 	add	r4, r4, #1
    2054:	e1a0e00f 	mov	lr, pc
    2058:	e12fff13 	bx	r3
    205c:	e1560004 	cmp	r6, r4
    2060:	1afffff9 	bne	204c <__libc_init_array+0x58>
    2064:	e8bd4070 	pop	{r4, r5, r6, lr}
    2068:	e12fff1e 	bx	lr
    206c:	000020a0 	.word	0x000020a0
    2070:	000020a0 	.word	0x000020a0
    2074:	000020a0 	.word	0x000020a0
    2078:	000020a8 	.word	0x000020a8

Disassembly of section .rodata:

00002080 <_global_impure_ptr>:
    2080:	00030f08 00000043                       ....C...

00002088 <_init>:
    2088:	e1a0c00d 	mov	r12, sp
    208c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2090:	e24cb004 	sub	r11, r12, #4
    2094:	e24bd028 	sub	sp, r11, #40	; 0x28
    2098:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    209c:	e12fff1e 	bx	lr

000020a0 <__init_array_start>:
    20a0:	00001f24 	.word	0x00001f24

000020a4 <__frame_dummy_init_array_entry>:
    20a4:	00000208                                ....

000020a8 <__libc_fini>:
    20a8:	e1a0c00d 	mov	r12, sp
    20ac:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    20b0:	e24cb004 	sub	r11, r12, #4
    20b4:	e24bd028 	sub	sp, r11, #40	; 0x28
    20b8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    20bc:	e12fff1e 	bx	lr

000020c0 <__fini_array_start>:
    20c0:	000001c4 	.word	0x000001c4

000020c4 <__cs3_regions>:
	...
    20d0:	00031338 	.word	0x00031338
    20d4:	00000020 	.word	0x00000020
