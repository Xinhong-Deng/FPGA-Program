
P:/G91_Lab3/stopwatch.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	b0 0f 00 00 bc 0f 00 00 c8 0f 00 00 d4 0f 00 00     ................
  30:	e0 0f 00 00 f0 13 00 00 58 0e 00 00 ec 0f 00 00     ........X.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <HEX_8+0x59>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <HEX_8+0x55>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <HEX_8+0x5d>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <HEX_8+0x25>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <HEX_8+0x25>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <HEX_8+0xd>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <HEX_8+0x45>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <HEX_8+0x35>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <HEX_D+0x6>
      d4:	eb0004ac 	bl	138c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000014e0 	.word	0x000014e0

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001918 	.word	0x00001918

00000124 <__cs3_heap_start_ptr>:
     124:	00001940 	.word	0x00001940

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001920 	.word	0x00001920
     170:	00001923 	.word	0x00001923
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001920 	.word	0x00001920
     1bc:	00001920 	.word	0x00001920
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001920 	.word	0x00001920
     200:	00000000 	.word	0x00000000
     204:	0000147c 	.word	0x0000147c

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	0000147c 	.word	0x0000147c
     250:	00001924 	.word	0x00001924
     254:	000014e0 	.word	0x000014e0
     258:	00000000 	.word	0x00000000

0000025c <main>:

	return 0;
}
**/

int main(){
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd038 	sub	sp, sp, #56	; 0x38

int timer_start=0;
     268:	e3a03000 	mov	r3, #0
     26c:	e50b3008 	str	r3, [r11, #-8]
int ms=0;
     270:	e3a03000 	mov	r3, #0
     274:	e50b300c 	str	r3, [r11, #-12]
int second=0;
     278:	e3a03000 	mov	r3, #0
     27c:	e50b3010 	str	r3, [r11, #-16]
int minute = 0;
     280:	e3a03000 	mov	r3, #0
     284:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
char mmsDis = '0';
     288:	e3a03030 	mov	r3, #48	; 0x30
     28c:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
char msDis = '0';
     290:	e3a03030 	mov	r3, #48	; 0x30
     294:	e54b3016 	strb	r3, [r11, #-22]	; 0xffffffea
char secondDis = '0';
     298:	e3a03030 	mov	r3, #48	; 0x30
     29c:	e54b3017 	strb	r3, [r11, #-23]	; 0xffffffe9
char tensDis = '0';
     2a0:	e3a03030 	mov	r3, #48	; 0x30
     2a4:	e54b3018 	strb	r3, [r11, #-24]	; 0xffffffe8
char minuteDis = '0';
     2a8:	e3a03030 	mov	r3, #48	; 0x30
     2ac:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
char tenmDis = '0';
     2b0:	e3a03030 	mov	r3, #48	; 0x30
     2b4:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6

int_setup(2, (int []){199, 73});
     2b8:	e3013480 	movw	r3, #5248	; 0x1480
     2bc:	e3403000 	movt	r3, #0
     2c0:	e24b2028 	sub	r2, r11, #40	; 0x28
     2c4:	e8930003 	ldm	r3, {r0, r1}
     2c8:	e8820003 	stm	r2, {r0, r1}
     2cc:	e24b3028 	sub	r3, r11, #40	; 0x28
     2d0:	e3a00002 	mov	r0, #2
     2d4:	e1a01003 	mov	r1, r3
     2d8:	eb000352 	bl	1028 <int_setup>

HPS_TIM_config_t hpstim;
hpstim.tim = TIM0;
     2dc:	e3a03001 	mov	r3, #1
     2e0:	e54b303c 	strb	r3, [r11, #-60]	; 0xffffffc4
hpstim.timeout = 10000; 
     2e4:	e3023710 	movw	r3, #10000	; 0x2710
     2e8:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
hpstim.LD_en = 1;
     2ec:	e3a03001 	mov	r3, #1
     2f0:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
hpstim.INT_en = 0;
     2f4:	e3a03000 	mov	r3, #0
     2f8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
hpstim.enable = 1;
     2fc:	e3a03001 	mov	r3, #1
     300:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
HPS_TIM_config_ASM(&hpstim);
     304:	e24b303c 	sub	r3, r11, #60	; 0x3c
     308:	e1a00003 	mov	r0, r3
     30c:	eb000172 	bl	8dc <HPS_TIM_config_ASM>
disable_PB_INT_ASM(PB0|PB1|PB2);
     310:	e3a00007 	mov	r0, #7
     314:	eb000221 	bl	ba0 <disable_PB_INT_ASM>

while(1){
	if ( hps_tim0_int_flag && timer_start) {
     318:	e3003bfc 	movw	r3, #3068	; 0xbfc
     31c:	e3403000 	movt	r3, #0
     320:	e5933000 	ldr	r3, [r3]
     324:	e3530000 	cmp	r3, #0
     328:	0a000086 	beq	548 <main+0x2ec>
     32c:	e51b3008 	ldr	r3, [r11, #-8]
     330:	e3530000 	cmp	r3, #0
     334:	0a000083 	beq	548 <main+0x2ec>
		hps_tim0_int_flag=0;
     338:	e3003bfc 	movw	r3, #3068	; 0xbfc
     33c:	e3403000 	movt	r3, #0
     340:	e3a02000 	mov	r2, #0
     344:	e5832000 	str	r2, [r3]
    	ms=ms+10;
     348:	e51b300c 	ldr	r3, [r11, #-12]
     34c:	e283300a 	add	r3, r3, #10
     350:	e50b300c 	str	r3, [r11, #-12]
     	if(ms>=1000){
     354:	e51b200c 	ldr	r2, [r11, #-12]
     358:	e30033e7 	movw	r3, #999	; 0x3e7
     35c:	e1520003 	cmp	r2, r3
     360:	da000011 	ble	3ac <main+0x150>
      		ms=0;
     364:	e3a03000 	mov	r3, #0
     368:	e50b300c 	str	r3, [r11, #-12]
      		second++;
     36c:	e51b3010 	ldr	r3, [r11, #-16]
     370:	e2833001 	add	r3, r3, #1
     374:	e50b3010 	str	r3, [r11, #-16]
      		if(second>=60){
     378:	e51b3010 	ldr	r3, [r11, #-16]
     37c:	e353003b 	cmp	r3, #59	; 0x3b
     380:	da000009 	ble	3ac <main+0x150>
        		second=0;
     384:	e3a03000 	mov	r3, #0
     388:	e50b3010 	str	r3, [r11, #-16]
        		minute++;
     38c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     390:	e2833001 	add	r3, r3, #1
     394:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        		if(minute>=60){
     398:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     39c:	e353003b 	cmp	r3, #59	; 0x3b
     3a0:	da000001 	ble	3ac <main+0x150>
       				minute=0;
     3a4:	e3a03000 	mov	r3, #0
     3a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        		}
      		}
     	}
     	mmsDis=ms%100/10+48;
     3ac:	e51b200c 	ldr	r2, [r11, #-12]
     3b0:	e308351f 	movw	r3, #34079	; 0x851f
     3b4:	e34531eb 	movt	r3, #20971	; 0x51eb
     3b8:	e0c31293 	smull	r1, r3, r3, r2
     3bc:	e1a012c3 	asr	r1, r3, #5
     3c0:	e1a03fc2 	asr	r3, r2, #31
     3c4:	e0633001 	rsb	r3, r3, r1
     3c8:	e3a01064 	mov	r1, #100	; 0x64
     3cc:	e0030391 	mul	r3, r1, r3
     3d0:	e0633002 	rsb	r3, r3, r2
     3d4:	e3062667 	movw	r2, #26215	; 0x6667
     3d8:	e3462666 	movt	r2, #26214	; 0x6666
     3dc:	e0c21392 	smull	r1, r2, r2, r3
     3e0:	e1a02142 	asr	r2, r2, #2
     3e4:	e1a03fc3 	asr	r3, r3, #31
     3e8:	e0633002 	rsb	r3, r3, r2
     3ec:	e6ef3073 	uxtb	r3, r3
     3f0:	e2833030 	add	r3, r3, #48	; 0x30
     3f4:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
     	msDis=ms/100+48;
     3f8:	e51b200c 	ldr	r2, [r11, #-12]
     3fc:	e308351f 	movw	r3, #34079	; 0x851f
     400:	e34531eb 	movt	r3, #20971	; 0x51eb
     404:	e0c31293 	smull	r1, r3, r3, r2
     408:	e1a012c3 	asr	r1, r3, #5
     40c:	e1a03fc2 	asr	r3, r2, #31
     410:	e0633001 	rsb	r3, r3, r1
     414:	e6ef3073 	uxtb	r3, r3
     418:	e2833030 	add	r3, r3, #48	; 0x30
     41c:	e54b3016 	strb	r3, [r11, #-22]	; 0xffffffea
     	secondDis=second%10+48;
     420:	e51b1010 	ldr	r1, [r11, #-16]
     424:	e3063667 	movw	r3, #26215	; 0x6667
     428:	e3463666 	movt	r3, #26214	; 0x6666
     42c:	e0c32193 	smull	r2, r3, r3, r1
     430:	e1a02143 	asr	r2, r3, #2
     434:	e1a03fc1 	asr	r3, r1, #31
     438:	e0632002 	rsb	r2, r3, r2
     43c:	e1a03002 	mov	r3, r2
     440:	e1a03103 	lsl	r3, r3, #2
     444:	e0833002 	add	r3, r3, r2
     448:	e1a03083 	lsl	r3, r3, #1
     44c:	e0632001 	rsb	r2, r3, r1
     450:	e6ef3072 	uxtb	r3, r2
     454:	e2833030 	add	r3, r3, #48	; 0x30
     458:	e54b3017 	strb	r3, [r11, #-23]	; 0xffffffe9
     	tensDis=second/10 +48;
     45c:	e51b2010 	ldr	r2, [r11, #-16]
     460:	e3063667 	movw	r3, #26215	; 0x6667
     464:	e3463666 	movt	r3, #26214	; 0x6666
     468:	e0c31293 	smull	r1, r3, r3, r2
     46c:	e1a01143 	asr	r1, r3, #2
     470:	e1a03fc2 	asr	r3, r2, #31
     474:	e0633001 	rsb	r3, r3, r1
     478:	e6ef3073 	uxtb	r3, r3
     47c:	e2833030 	add	r3, r3, #48	; 0x30
     480:	e54b3018 	strb	r3, [r11, #-24]	; 0xffffffe8
     	minuteDis=minute%10+48;
     484:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     488:	e3063667 	movw	r3, #26215	; 0x6667
     48c:	e3463666 	movt	r3, #26214	; 0x6666
     490:	e0c32193 	smull	r2, r3, r3, r1
     494:	e1a02143 	asr	r2, r3, #2
     498:	e1a03fc1 	asr	r3, r1, #31
     49c:	e0632002 	rsb	r2, r3, r2
     4a0:	e1a03002 	mov	r3, r2
     4a4:	e1a03103 	lsl	r3, r3, #2
     4a8:	e0833002 	add	r3, r3, r2
     4ac:	e1a03083 	lsl	r3, r3, #1
     4b0:	e0632001 	rsb	r2, r3, r1
     4b4:	e6ef3072 	uxtb	r3, r2
     4b8:	e2833030 	add	r3, r3, #48	; 0x30
     4bc:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
     	tenmDis=minute/10+48;
     4c0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     4c4:	e3063667 	movw	r3, #26215	; 0x6667
     4c8:	e3463666 	movt	r3, #26214	; 0x6666
     4cc:	e0c31293 	smull	r1, r3, r3, r2
     4d0:	e1a01143 	asr	r1, r3, #2
     4d4:	e1a03fc2 	asr	r3, r2, #31
     4d8:	e0633001 	rsb	r3, r3, r1
     4dc:	e6ef3073 	uxtb	r3, r3
     4e0:	e2833030 	add	r3, r3, #48	; 0x30
     4e4:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6
     
      	HEX_write_ASM(HEX0, mmsDis);
     4e8:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     4ec:	e3a00001 	mov	r0, #1
     4f0:	e1a01003 	mov	r1, r3
     4f4:	eb00009f 	bl	778 <HEX_write_ASM>
		HEX_write_ASM(HEX1, msDis);
     4f8:	e55b3016 	ldrb	r3, [r11, #-22]	; 0xffffffea
     4fc:	e3a00002 	mov	r0, #2
     500:	e1a01003 	mov	r1, r3
     504:	eb00009b 	bl	778 <HEX_write_ASM>
		HEX_write_ASM(HEX2, secondDis);
     508:	e55b3017 	ldrb	r3, [r11, #-23]	; 0xffffffe9
     50c:	e3a00004 	mov	r0, #4
     510:	e1a01003 	mov	r1, r3
     514:	eb000097 	bl	778 <HEX_write_ASM>
		HEX_write_ASM(HEX3, tensDis);
     518:	e55b3018 	ldrb	r3, [r11, #-24]	; 0xffffffe8
     51c:	e3a00008 	mov	r0, #8
     520:	e1a01003 	mov	r1, r3
     524:	eb000093 	bl	778 <HEX_write_ASM>
		HEX_write_ASM(HEX4, minuteDis);
     528:	e55b3019 	ldrb	r3, [r11, #-25]	; 0xffffffe7
     52c:	e3a00010 	mov	r0, #16
     530:	e1a01003 	mov	r1, r3
     534:	eb00008f 	bl	778 <HEX_write_ASM>
		HEX_write_ASM(HEX5, tenmDis);
     538:	e55b301a 	ldrb	r3, [r11, #-26]	; 0xffffffe6
     53c:	e3a00020 	mov	r0, #32
     540:	e1a01003 	mov	r1, r3
     544:	eb00008b 	bl	778 <HEX_write_ASM>
	}
  
	int pushButtonStatus = read_PB_data_ASM();		
     548:	eb000145 	bl	a64 <read_PB_data_ASM>
     54c:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
	if (pushButtonStatus & 1) { //Start timer
     550:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     554:	e2033001 	and	r3, r3, #1
     558:	e3530000 	cmp	r3, #0
     55c:	0a000002 	beq	56c <main+0x310>
		timer_start = 1;
     560:	e3a03001 	mov	r3, #1
     564:	e50b3008 	str	r3, [r11, #-8]
     568:	ea000021 	b	5f4 <main+0x398>
	} else if ((pushButtonStatus & 2) && (timer_start)) { //Stop timer
     56c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     570:	e2033002 	and	r3, r3, #2
     574:	e3530000 	cmp	r3, #0
     578:	0a000005 	beq	594 <main+0x338>
     57c:	e51b3008 	ldr	r3, [r11, #-8]
     580:	e3530000 	cmp	r3, #0
     584:	0a000002 	beq	594 <main+0x338>
		timer_start = 0;
     588:	e3a03000 	mov	r3, #0
     58c:	e50b3008 	str	r3, [r11, #-8]
     590:	ea000017 	b	5f4 <main+0x398>
	} else if (pushButtonStatus & 4) { 
     594:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     598:	e2033004 	and	r3, r3, #4
     59c:	e3530000 	cmp	r3, #0
     5a0:	0a000013 	beq	5f4 <main+0x398>
		ms = 0;
     5a4:	e3a03000 	mov	r3, #0
     5a8:	e50b300c 	str	r3, [r11, #-12]
		second = 0;
     5ac:	e3a03000 	mov	r3, #0
     5b0:	e50b3010 	str	r3, [r11, #-16]
		minute = 0;
     5b4:	e3a03000 	mov	r3, #0
     5b8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		timer_start = 0; 
     5bc:	e3a03000 	mov	r3, #0
     5c0:	e50b3008 	str	r3, [r11, #-8]
		mmsDis = '0';
     5c4:	e3a03030 	mov	r3, #48	; 0x30
     5c8:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
		msDis = '0';
     5cc:	e3a03030 	mov	r3, #48	; 0x30
     5d0:	e54b3016 	strb	r3, [r11, #-22]	; 0xffffffea
		secondDis = '0';
     5d4:	e3a03030 	mov	r3, #48	; 0x30
     5d8:	e54b3017 	strb	r3, [r11, #-23]	; 0xffffffe9
		tensDis = '0';
     5dc:	e3a03030 	mov	r3, #48	; 0x30
     5e0:	e54b3018 	strb	r3, [r11, #-24]	; 0xffffffe8
		minuteDis = '0';
     5e4:	e3a03030 	mov	r3, #48	; 0x30
     5e8:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
		tenmDis = '0';
     5ec:	e3a03030 	mov	r3, #48	; 0x30
     5f0:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6
	}
				
				
	HEX_write_ASM(HEX0, mmsDis);
     5f4:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     5f8:	e3a00001 	mov	r0, #1
     5fc:	e1a01003 	mov	r1, r3
     600:	eb00005c 	bl	778 <HEX_write_ASM>
	HEX_write_ASM(HEX1, msDis);
     604:	e55b3016 	ldrb	r3, [r11, #-22]	; 0xffffffea
     608:	e3a00002 	mov	r0, #2
     60c:	e1a01003 	mov	r1, r3
     610:	eb000058 	bl	778 <HEX_write_ASM>
	HEX_write_ASM(HEX2, secondDis);
     614:	e55b3017 	ldrb	r3, [r11, #-23]	; 0xffffffe9
     618:	e3a00004 	mov	r0, #4
     61c:	e1a01003 	mov	r1, r3
     620:	eb000054 	bl	778 <HEX_write_ASM>
	HEX_write_ASM(HEX3, tensDis);
     624:	e55b3018 	ldrb	r3, [r11, #-24]	; 0xffffffe8
     628:	e3a00008 	mov	r0, #8
     62c:	e1a01003 	mov	r1, r3
     630:	eb000050 	bl	778 <HEX_write_ASM>
	HEX_write_ASM(HEX4, minuteDis);
     634:	e55b3019 	ldrb	r3, [r11, #-25]	; 0xffffffe7
     638:	e3a00010 	mov	r0, #16
     63c:	e1a01003 	mov	r1, r3
     640:	eb00004c 	bl	778 <HEX_write_ASM>
	HEX_write_ASM(HEX5, tenmDis);
     644:	e55b301a 	ldrb	r3, [r11, #-26]	; 0xffffffe6
     648:	e3a00020 	mov	r0, #32
     64c:	e1a01003 	mov	r1, r3
     650:	eb000048 	bl	778 <HEX_write_ASM>
}
     654:	eaffff2f 	b	318 <main+0xbc>

00000658 <HEX_clear_ASM>:
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
     658:	e59f1274 	ldr	r1, [pc, #628]	; 8d4 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
     65c:	e59f2274 	ldr	r2, [pc, #628]	; 8d8 <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
     660:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
     664:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
     668:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
     66c:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
     670:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
     674:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
     678:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
     67c:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
     680:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
     684:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
     688:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
     68c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
     690:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF00FFFF
     694:	e3e038ff 	mvn	r3, #16711680	; 0xff0000
CMP R5, #1
     698:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
     69c:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
     6a0:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
     6a4:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FFFFFF
     6a8:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
CMP R5, #1
     6ac:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
     6b0:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
     6b4:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
     6b8:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
     6bc:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
     6c0:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
     6c4:	00077003 	andeq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
     6c8:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
     6cc:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
     6d0:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
     6d4:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
     6d8:	00077003 	andeq	r7, r7, r3

STR R6, [R1]
     6dc:	e5816000 	str	r6, [r1]
STR R7, [R2]
     6e0:	e5827000 	str	r7, [r2]

BX LR
     6e4:	e12fff1e 	bx	lr

000006e8 <HEX_flood_ASM>:
HEX_flood_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
     6e8:	e59f11e4 	ldr	r1, [pc, #484]	; 8d4 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
     6ec:	e59f21e4 	ldr	r2, [pc, #484]	; 8d8 <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
     6f0:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
     6f4:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
     6f8:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF		//OFF
     6fc:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
     700:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
     704:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
     708:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
     70c:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
     710:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
     714:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
     718:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
     71c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
     720:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FF0000
     724:	e3a038ff 	mov	r3, #16711680	; 0xff0000
CMP R5, #1
     728:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
     72c:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
     730:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
     734:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF000000
     738:	e3a034ff 	mov	r3, #-16777216	; 0xff000000
CMP R5, #1
     73c:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
     740:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
     744:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
     748:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF	//OFF
     74c:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
     750:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
     754:	01877003 	orreq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
     758:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
     75c:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
     760:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
     764:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
     768:	01877003 	orreq	r7, r7, r3

STR R6, [R1]
     76c:	e5816000 	str	r6, [r1]
STR R7, [R2]
     770:	e5827000 	str	r7, [r2]

BX LR
     774:	e12fff1e 	bx	lr

00000778 <HEX_write_ASM>:
HEX_write_ASM:
CMP R1,#48
     778:	e3510030 	cmp	r1, #48	; 0x30
MOVEQ R4, #HEX_0
     77c:	03a0403f 	moveq	r4, #63	; 0x3f
BEQ WRITE
     780:	0a00002c 	beq	838 <WRITE>
CMP R1,#49
     784:	e3510031 	cmp	r1, #49	; 0x31
MOVEQ R4, #HEX_1
     788:	03a04006 	moveq	r4, #6
BEQ WRITE
     78c:	0a000029 	beq	838 <WRITE>
CMP R1,#50
     790:	e3510032 	cmp	r1, #50	; 0x32
MOVEQ R4, #HEX_2
     794:	03a0405b 	moveq	r4, #91	; 0x5b
BEQ WRITE
     798:	0a000026 	beq	838 <WRITE>
CMP R1,#51
     79c:	e3510033 	cmp	r1, #51	; 0x33
MOVEQ R4, #HEX_3
     7a0:	03a0404f 	moveq	r4, #79	; 0x4f
BEQ WRITE
     7a4:	0a000023 	beq	838 <WRITE>
CMP R1,#52
     7a8:	e3510034 	cmp	r1, #52	; 0x34
MOVEQ R4, #HEX_4
     7ac:	03a04066 	moveq	r4, #102	; 0x66
BEQ WRITE
     7b0:	0a000020 	beq	838 <WRITE>
CMP R1,#53
     7b4:	e3510035 	cmp	r1, #53	; 0x35
MOVEQ R4, #HEX_5
     7b8:	03a0406d 	moveq	r4, #109	; 0x6d
BEQ WRITE
     7bc:	0a00001d 	beq	838 <WRITE>
CMP R1,#54
     7c0:	e3510036 	cmp	r1, #54	; 0x36
MOVEQ R4, #HEX_6
     7c4:	03a0407d 	moveq	r4, #125	; 0x7d
BEQ WRITE
     7c8:	0a00001a 	beq	838 <WRITE>
CMP R1,#55
     7cc:	e3510037 	cmp	r1, #55	; 0x37
MOVEQ R4, #HEX_7
     7d0:	03a04007 	moveq	r4, #7
BEQ WRITE
     7d4:	0a000017 	beq	838 <WRITE>
CMP R1,#56
     7d8:	e3510038 	cmp	r1, #56	; 0x38
MOVEQ R4, #HEX_8
     7dc:	03a0407f 	moveq	r4, #127	; 0x7f
BEQ WRITE
     7e0:	0a000014 	beq	838 <WRITE>
CMP R1,#57
     7e4:	e3510039 	cmp	r1, #57	; 0x39
MOVEQ R4, #HEX_9
     7e8:	03a0406f 	moveq	r4, #111	; 0x6f
BEQ WRITE
     7ec:	0a000011 	beq	838 <WRITE>
CMP R1,#65
     7f0:	e3510041 	cmp	r1, #65	; 0x41
MOVEQ R4, #HEX_A
     7f4:	03a04077 	moveq	r4, #119	; 0x77
BEQ WRITE
     7f8:	0a00000e 	beq	838 <WRITE>
CMP R1,#66
     7fc:	e3510042 	cmp	r1, #66	; 0x42
MOVEQ R4, #HEX_B
     800:	03a0407c 	moveq	r4, #124	; 0x7c
BEQ WRITE
     804:	0a00000b 	beq	838 <WRITE>
CMP R1,#67
     808:	e3510043 	cmp	r1, #67	; 0x43
MOVEQ R4, #HEX_C
     80c:	03a04039 	moveq	r4, #57	; 0x39
BEQ WRITE
     810:	0a000008 	beq	838 <WRITE>
CMP R1,#68
     814:	e3510044 	cmp	r1, #68	; 0x44
MOVEQ R4, #HEX_D
     818:	03a0405e 	moveq	r4, #94	; 0x5e
BEQ WRITE
     81c:	0a000005 	beq	838 <WRITE>
CMP R1,#69
     820:	e3510045 	cmp	r1, #69	; 0x45
MOVEQ R4, #HEX_E
     824:	03a04079 	moveq	r4, #121	; 0x79
BEQ WRITE
     828:	0a000002 	beq	838 <WRITE>
CMP R1,#70
     82c:	e3510046 	cmp	r1, #70	; 0x46
MOVEQ R4, #HEX_F
     830:	03a04071 	moveq	r4, #113	; 0x71
BEQ WRITE
     834:	0affffff 	beq	838 <WRITE>

00000838 <WRITE>:
WRITE:

LDR R2, =HEX_BASE1		//0-3 HEX DISPLAY
     838:	e59f2094 	ldr	r2, [pc, #148]	; 8d4 <WRITE+0x9c>
LDR R3, =HEX_BASE2		//4-5 HEX DISPLAY
     83c:	e59f3094 	ldr	r3, [pc, #148]	; 8d8 <WRITE+0xa0>
LDR R5, [R2]			//LOAD STATE OF 0-3 HEX DISPLAY
     840:	e5925000 	ldr	r5, [r2]
LDR R6, [R3]			//LOAD STATE OF 4-5 HEX DISPLAY
     844:	e5936000 	ldr	r6, [r3]

CMP R0, #0x00000001
     848:	e3500001 	cmp	r0, #1
MOVEQ R7, #0xFFFFFF00		//OFF
     84c:	03e070ff 	mvneq	r7, #255	; 0xff
ANDEQ R7, R7, R5		//APPLY THE MASK
     850:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
     854:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
     858:	05827000 	streq	r7, [r2]

CMP R0, #0x00000002
     85c:	e3500002 	cmp	r0, #2
MOVEQ R7, #0xFFFF00FF		//OFF
     860:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
     864:	01a04404 	lsleq	r4, r4, #8
ANDEQ R7, R7, R5		//APPLY THE MASK
     868:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
     86c:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
     870:	05827000 	streq	r7, [r2]

CMP R0, #0x00000004
     874:	e3500004 	cmp	r0, #4
MOVEQ R7, #0xFF00FFFF		//OFF
     878:	03e078ff 	mvneq	r7, #16711680	; 0xff0000
LSLEQ R4, #16
     87c:	01a04804 	lsleq	r4, r4, #16
ANDEQ R7, R7, R5		//APPLY THE MASK
     880:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
     884:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
     888:	05827000 	streq	r7, [r2]

CMP R0, #0x00000008
     88c:	e3500008 	cmp	r0, #8
MOVEQ R7, #0x00FFFFFF		//OFF
     890:	03e074ff 	mvneq	r7, #-16777216	; 0xff000000
LSLEQ R4, #24
     894:	01a04c04 	lsleq	r4, r4, #24
ANDEQ R7, R7, R5		//APPLY THE MASK
     898:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
     89c:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
     8a0:	05827000 	streq	r7, [r2]

CMP R0, #0x00000010
     8a4:	e3500010 	cmp	r0, #16
MOVEQ R8, #0xFFFFFF00		//OFF
     8a8:	03e080ff 	mvneq	r8, #255	; 0xff
ANDEQ R8, R8, R6		//APPLY THE MASK
     8ac:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
     8b0:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
     8b4:	05838000 	streq	r8, [r3]

CMP R0, #0x00000020
     8b8:	e3500020 	cmp	r0, #32
MOVEQ R7, #0xFFFF00FF		//OFF
     8bc:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
     8c0:	01a04404 	lsleq	r4, r4, #8
ANDEQ R8, R8, R6		//APPLY THE MASK
     8c4:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
     8c8:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
     8cc:	05838000 	streq	r8, [r3]


BX LR
     8d0:	e12fff1e 	bx	lr
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
     8d4:	ff200020 	.word	0xff200020
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
     8d8:	ff200030 	.word	0xff200030

000008dc <HPS_TIM_config_ASM>:
.equ TIM3, 0xFFC01000

.global HPS_TIM_config_ASM, HPS_TIM_read_INT_ASM, HPS_TIM_clear_INT_ASM
HPS_TIM_config_ASM:
//R0: address of the first component(TIM) in the struct
PUSH {LR}
     8dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
//PUSH {R1-R8}
LDR R1,[R0]
     8e0:	e5901000 	ldr	r1, [r0]
AND R2, R1, #0x00000001				//get the bit0
     8e4:	e2012001 	and	r2, r1, #1
CMP R2, #0x00000001					//check whether bit0 is
     8e8:	e3520001 	cmp	r2, #1
LDREQ R3, =TIM0
     8ec:	059f3144 	ldreq	r3, [pc, #324]	; a38 <SET_F_S+0x8>
MOVEQ R8, #100
     8f0:	03a08064 	moveq	r8, #100	; 0x64
BLEQ SET
     8f4:	0b000010 	bleq	93c <SET>
AND R2, R1, #0x00000002				//get the bit1
     8f8:	e2012002 	and	r2, r1, #2
CMP R2, #0x00000002					//check whether bit1 is 1
     8fc:	e3520002 	cmp	r2, #2
LDREQ R3, =TIM1
     900:	059f3134 	ldreq	r3, [pc, #308]	; a3c <SET_F_S+0xc>
MOVEQ R8, #100
     904:	03a08064 	moveq	r8, #100	; 0x64
BLEQ SET
     908:	0b00000b 	bleq	93c <SET>
AND R2, R1, #0x00000004				//get the bit 2
     90c:	e2012004 	and	r2, r1, #4
CMP R2, #0x00000004					//check whether bit2 is 1
     910:	e3520004 	cmp	r2, #4
LDREQ R3, =TIM2
     914:	059f3124 	ldreq	r3, [pc, #292]	; a40 <SET_F_S+0x10>
MOVEQ R8, #25
     918:	03a08019 	moveq	r8, #25
BLEQ SET
     91c:	0b000006 	bleq	93c <SET>
AND R2, R1, #0x00000008				//get the bit 3
     920:	e2012008 	and	r2, r1, #8
CMP R2, #0x00000008					//check whether bit3 is 1
     924:	e3520008 	cmp	r2, #8
LDREQ R3, =TIM3
     928:	059f3114 	ldreq	r3, [pc, #276]	; a44 <SET_F_S+0x14>
MOVEQ R8, #25
     92c:	03a08019 	moveq	r8, #25
BLEQ SET
     930:	0b000001 	bleq	93c <SET>
//POP {R1-R8}
POP {LR}
     934:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
BX LR
     938:	e12fff1e 	bx	lr

0000093c <SET>:

SET:
ADD R4, R3, #8						//R4 IS THE ADDRESS OF THE CONTROL REGISTER
     93c:	e2834008 	add	r4, r3, #8
LDR R5, [R4]						//R5 STORES THE CONTROL PART OF THE TIMER
     940:	e5945000 	ldr	r5, [r4]

LDR R7, [R0, #8]					//READ THE LOAD ENABLE PARAMETER
     944:	e5907008 	ldr	r7, [r0, #8]
CMP R7, #1							//CHECK WHETHER ENABLE IS 1
     948:	e3570001 	cmp	r7, #1
ORREQ R5, R5, #0x00000002			//UPDATE THE bitM WITH 1
     94c:	03855002 	orreq	r5, r5, #2
ANDEQ R5, R5, #0xFFFFFFFE			//SET THE E TO 0, SO THE LOAD VALUE CAN BE WRITE TO THE LOAD REGISTER
     950:	03c55001 	biceq	r5, r5, #1
STREQ R5, [R0, #8] 
     954:	05805008 	streq	r5, [r0, #8]
LDREQ R6, [R0, #4] 					//R6 STORES THE TIME OUT PARAMETER
     958:	05906004 	ldreq	r6, [r0, #4]
MULEQ R6, R6, R8					//CALCUALTE THE LOAD VALUE CONSIDERING THE CLOCK FREQUENCY
     95c:	00060896 	muleq	r6, r6, r8
STREQ R6, [R3] 						//UPDATE THE LOAD REGISTER
     960:	05836000 	streq	r6, [r3]
ANDNE R5, R5, #0xFFFFFFFD			//UPDATE THE bitM WITH 0
     964:	13c55002 	bicne	r5, r5, #2

LDR R7, [R0, #16]					//READ THE ENABLE PARAMETER
     968:	e5907010 	ldr	r7, [r0, #16]
CMP R7, #0x00000001							
     96c:	e3570001 	cmp	r7, #1
ORREQ R5, R5, #0x00000001			//UPDATE THE bitE BASED ON THE PARAMETER
     970:	03855001 	orreq	r5, r5, #1
ANDNE R5, R5, #0xFFFFFFFE
     974:	13c55001 	bicne	r5, r5, #1

//SET THE I
LDR R7, [R0, #12]					//READ THE INT_ENABLE PARAMETER
     978:	e590700c 	ldr	r7, [r0, #12]
CMP R7, #1
     97c:	e3570001 	cmp	r7, #1
ORREQ R5, R5, #0x00000004			//UPDATE THE bitI based on the parameter
     980:	03855004 	orreq	r5, r5, #4
ANDNE R5, R5, #0xFFFFFFFB
     984:	13c55004 	bicne	r5, r5, #4

STR R5, [R3, #8]
     988:	e5835008 	str	r5, [r3, #8]
BX LR
     98c:	e12fff1e 	bx	lr

00000990 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
//PUSH {R1-R4}
MOV R1, R0							//LOAD THE PARAMETER VALUE (first component: TIM)
     990:	e1a01000 	mov	r1, r0
AND R2, R1, #0x00000001				//get the bit0
     994:	e2012001 	and	r2, r1, #1
CMP R2, #0x00000001
     998:	e3520001 	cmp	r2, #1
LDREQ R3,=TIM0
     99c:	059f3094 	ldreq	r3, [pc, #148]	; a38 <SET_F_S+0x8>
BEQ READS
     9a0:	0a00000b 	beq	9d4 <READS>
AND R2, R1, #0x00000002				//get the bit1
     9a4:	e2012002 	and	r2, r1, #2
CMP R2, #0x00000002	
     9a8:	e3520002 	cmp	r2, #2
LDREQ R3,=TIM1
     9ac:	059f3088 	ldreq	r3, [pc, #136]	; a3c <SET_F_S+0xc>
BEQ READS
     9b0:	0a000007 	beq	9d4 <READS>
AND R2, R1, #0x00000004				//get the bit2
     9b4:	e2012004 	and	r2, r1, #4
CMP R2, #0x00000004
     9b8:	e3520004 	cmp	r2, #4
LDREQ R3,=TIM2
     9bc:	059f307c 	ldreq	r3, [pc, #124]	; a40 <SET_F_S+0x10>
BEQ READS
     9c0:	0a000003 	beq	9d4 <READS>
AND R2, R1, #0x00000008				//get the bit3
     9c4:	e2012008 	and	r2, r1, #8
CMP R2, #0x00000008
     9c8:	e3520008 	cmp	r2, #8
LDREQ R3,=TIM3
     9cc:	059f3070 	ldreq	r3, [pc, #112]	; a44 <SET_F_S+0x14>
BEQ READS
     9d0:	0affffff 	beq	9d4 <READS>

000009d4 <READS>:
READS:
LDR R4, [R3, #16]					//R4 is the interrupt signal value
     9d4:	e5934010 	ldr	r4, [r3, #16]
AND R0, R4, #1
     9d8:	e2040001 	and	r0, r4, #1
//POP {R1-R4}
BX LR
     9dc:	e12fff1e 	bx	lr

000009e0 <HPS_TIM_clear_INT_ASM>:


HPS_TIM_clear_INT_ASM:
PUSH {LR}
     9e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
//PUSH {R1-R10}
MOV R1, R0
     9e4:	e1a01000 	mov	r1, r0
AND R2, R1, #0x00000001				//get the bit0
     9e8:	e2012001 	and	r2, r1, #1
CMP R2, #0x00000001					//check whether bit0 is
     9ec:	e3520001 	cmp	r2, #1
LDREQ R3, =TIM0
     9f0:	059f3040 	ldreq	r3, [pc, #64]	; a38 <SET_F_S+0x8>
BLEQ SET_F_S
     9f4:	0b00000d 	bleq	a30 <SET_F_S>
AND R2, R1, #0x00000002				//get the bit1
     9f8:	e2012002 	and	r2, r1, #2
CMP R2, #0x00000002					//check whether bit1 is 1
     9fc:	e3520002 	cmp	r2, #2
LDREQ R3, =TIM1
     a00:	059f3034 	ldreq	r3, [pc, #52]	; a3c <SET_F_S+0xc>
BLEQ SET_F_S
     a04:	0b000009 	bleq	a30 <SET_F_S>
AND R2, R1, #0x00000004				//get the bit 2
     a08:	e2012004 	and	r2, r1, #4
CMP R2, #0x00000004					//check whether bit2 is 1
     a0c:	e3520004 	cmp	r2, #4
LDREQ R3, =TIM2
     a10:	059f3028 	ldreq	r3, [pc, #40]	; a40 <SET_F_S+0x10>
BLEQ SET_F_S
     a14:	0b000005 	bleq	a30 <SET_F_S>
AND R2, R1, #0x00000008				//get the bit 3
     a18:	e2012008 	and	r2, r1, #8
CMP R2, #0x00000008					//check whether bit3 is 1
     a1c:	e3520008 	cmp	r2, #8
LDREQ R3, =TIM3
     a20:	059f301c 	ldreq	r3, [pc, #28]	; a44 <SET_F_S+0x14>
BLEQ SET_F_S
     a24:	0b000001 	bleq	a30 <SET_F_S>
//POP {R1-R10}
POP {LR}
     a28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
BX LR
     a2c:	e12fff1e 	bx	lr

00000a30 <SET_F_S>:
SET_F_S:
LDR R4, [R3, #12]
     a30:	e593400c 	ldr	r4, [r3, #12]
BX LR
     a34:	e12fff1e 	bx	lr
PUSH {LR}
//PUSH {R1-R8}
LDR R1,[R0]
AND R2, R1, #0x00000001				//get the bit0
CMP R2, #0x00000001					//check whether bit0 is
LDREQ R3, =TIM0
     a38:	ffc08000 	.word	0xffc08000
MOVEQ R8, #100
BLEQ SET
AND R2, R1, #0x00000002				//get the bit1
CMP R2, #0x00000002					//check whether bit1 is 1
LDREQ R3, =TIM1
     a3c:	ffc09000 	.word	0xffc09000
MOVEQ R8, #100
BLEQ SET
AND R2, R1, #0x00000004				//get the bit 2
CMP R2, #0x00000004					//check whether bit2 is 1
LDREQ R3, =TIM2
     a40:	ffd00000 	.word	0xffd00000
MOVEQ R8, #25
BLEQ SET
AND R2, R1, #0x00000008				//get the bit 3
CMP R2, #0x00000008					//check whether bit3 is 1
LDREQ R3, =TIM3
     a44:	ffc01000 	.word	0xffc01000

00000a48 <read_LEDs_ASM>:
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
     a48:	e59f1010 	ldr	r1, [pc, #16]	; a60 <write_LEDs_ASM+0xc>
LDR R0, [R1]
     a4c:	e5910000 	ldr	r0, [r1]
BX LR
     a50:	e12fff1e 	bx	lr

00000a54 <write_LEDs_ASM>:
write_LEDs_ASM:
LDR R1, =SW_BASE
     a54:	e59f1004 	ldr	r1, [pc, #4]	; a60 <write_LEDs_ASM+0xc>
STR R0, [R1]
     a58:	e5810000 	str	r0, [r1]
BX LR
     a5c:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
     a60:	ff200000 	.word	0xff200000

00000a64 <read_PB_data_ASM>:
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecap_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
     a64:	e59f1174 	ldr	r1, [pc, #372]	; be0 <STORE_INTERRUPT_DISABLE+0x8>
LDR R0, [R1]
     a68:	e5910000 	ldr	r0, [r1]
BX LR
     a6c:	e12fff1e 	bx	lr

00000a70 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
//R0 parameter from C
LDR R1, =PUSHBUTTON_BASE
     a70:	e59f1168 	ldr	r1, [pc, #360]	; be0 <STORE_INTERRUPT_DISABLE+0x8>
LDR R2, [R1]			//value of the data register
     a74:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
     a78:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
     a7c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
     a80:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     a84:	03a00001 	moveq	r0, #1
BXEQ LR
     a88:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
     a8c:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
     a90:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     a94:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
     a98:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     a9c:	03a00001 	moveq	r0, #1
BXEQ LR
     aa0:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
     aa4:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
     aa8:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
     aac:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
     ab0:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     ab4:	03a00001 	moveq	r0, #1
BXEQ LR
     ab8:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
     abc:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
     ac0:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     ac4:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
     ac8:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     acc:	03a00001 	moveq	r0, #1
BXEQ LR
     ad0:	012fff1e 	bxeq	lr

MOV R0, #0
     ad4:	e3a00000 	mov	r0, #0
BX LR
     ad8:	e12fff1e 	bx	lr

00000adc <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
     adc:	e59f1100 	ldr	r1, [pc, #256]	; be4 <STORE_INTERRUPT_DISABLE+0xc>
LDR R0, [R1]
     ae0:	e5910000 	ldr	r0, [r1]
BX LR
     ae4:	e12fff1e 	bx	lr

00000ae8 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
     ae8:	e59f10f4 	ldr	r1, [pc, #244]	; be4 <STORE_INTERRUPT_DISABLE+0xc>
LDR R2, [R1]			//value of edge register
     aec:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
     af0:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
     af4:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
     af8:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     afc:	03a00001 	moveq	r0, #1
BXEQ LR
     b00:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
     b04:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
     b08:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     b0c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
     b10:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     b14:	03a00001 	moveq	r0, #1
BXEQ LR
     b18:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
     b1c:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
     b20:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
     b24:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
     b28:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     b2c:	03a00001 	moveq	r0, #1
BXEQ LR
     b30:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
     b34:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
     b38:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     b3c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
     b40:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     b44:	03a00001 	moveq	r0, #1
BXEQ LR
     b48:	012fff1e 	bxeq	lr

MOV R0, #0
     b4c:	e3a00000 	mov	r0, #0

BX LR
     b50:	e12fff1e 	bx	lr

00000b54 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
//R0 PARAMETER FROM C
LDR R1, =PUSHBUTTON_EDGECAPTURE
     b54:	e59f1088 	ldr	r1, [pc, #136]	; be4 <STORE_INTERRUPT_DISABLE+0xc>
MOV R5, #0
     b58:	e3a05000 	mov	r5, #0
STR R5, [R1]
     b5c:	e5815000 	str	r5, [r1]
BX LR
     b60:	e12fff1e 	bx	lr

00000b64 <enable_PB_INT_ASM>:


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
     b64:	e59f107c 	ldr	r1, [pc, #124]	; be8 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
     b68:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
     b6c:	e3a04003 	mov	r4, #3
MOV R5, #0x0000000F		//mask
     b70:	e3a0500f 	mov	r5, #15

00000b74 <LOOP_ENABLE_INT>:
LOOP_ENABLE_INT:
SUBS R4, R4, #1			//update counter
     b74:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_ENABLE
     b78:	ba000006 	blt	b98 <STORE_INTERRUPT_ENABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
     b7c:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
     b80:	e3530001 	cmp	r3, #1
ORREQ R2, R2, R5		//modify the value
     b84:	01822005 	orreq	r2, r2, r5
MOV R6, #2
     b88:	e3a06002 	mov	r6, #2
MUL R5, R5, R6			//update the mask for the next iteration
     b8c:	e0050695 	mul	r5, r5, r6
LSR R0, #1
     b90:	e1a000a0 	lsr	r0, r0, #1
B LOOP_ENABLE_INT
     b94:	eafffff6 	b	b74 <LOOP_ENABLE_INT>

00000b98 <STORE_INTERRUPT_ENABLE>:
STORE_INTERRUPT_ENABLE:
STR R2, [R1]
     b98:	e5812000 	str	r2, [r1]
BX LR
     b9c:	e12fff1e 	bx	lr

00000ba0 <disable_PB_INT_ASM>:


disable_PB_INT_ASM:
LDR R1, =PUSHBUTTON_INTERRUPTION
     ba0:	e59f1040 	ldr	r1, [pc, #64]	; be8 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
     ba4:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
     ba8:	e3a04003 	mov	r4, #3
MOV R5, #0xFFFFFFF0		//mask
     bac:	e3e0500f 	mvn	r5, #15

00000bb0 <LOOP_DISABLE_INT>:
LOOP_DISABLE_INT:
SUBS R4, R4, #1			//update counter
     bb0:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_DISABLE
     bb4:	ba000007 	blt	bd8 <STORE_INTERRUPT_DISABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
     bb8:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
     bbc:	e3530001 	cmp	r3, #1
ANDEQ R2, R2, R5		//modify the value
     bc0:	00022005 	andeq	r2, r2, r5
MOV R6, #2
     bc4:	e3a06002 	mov	r6, #2
MOV R7, #15
     bc8:	e3a0700f 	mov	r7, #15
MLA R5, R5, R6, R7		//update the mask for the next iteration
     bcc:	e0257695 	mla	r5, r5, r6, r7
LSR R0, #1
     bd0:	e1a000a0 	lsr	r0, r0, #1
B LOOP_DISABLE_INT
     bd4:	eafffff5 	b	bb0 <LOOP_DISABLE_INT>

00000bd8 <STORE_INTERRUPT_DISABLE>:
STORE_INTERRUPT_DISABLE:
STR R2, [R1]
     bd8:	e5812000 	str	r2, [r1]
BX LR
     bdc:	e12fff1e 	bx	lr
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecap_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
     be0:	ff200050 	.word	0xff200050

MOV R0, #0
BX LR

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
     be4:	ff20005c 	.word	0xff20005c
BX LR


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
     be8:	ff200058 	.word	0xff200058

00000bec <read_slider_switches_ASM>:
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
     bec:	e59f1004 	ldr	r1, [pc, #4]	; bf8 <read_slider_switches_ASM+0xc>
LDR R0, [R1]
     bf0:	e5910000 	ldr	r0, [r1]
BX LR
     bf4:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
     bf8:	ff200040 	.word	0xff200040

00000bfc <hps_tim0_int_flag>:
     bfc:	00000000 	.word	0x00000000

00000c00 <pb_int_flag>:
     c00:	00000000 	.word	0x00000000

00000c04 <A9_PRIV_TIM_ISR>:

pb_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     c04:	e12fff1e 	bx	lr

00000c08 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     c08:	e12fff1e 	bx	lr

00000c0c <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:						 
	push {LR}				
     c0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     c10:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM		
     c14:	ebffff71 	bl	9e0 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag 		
     c18:	e59f0054 	ldr	r0, [pc, #84]	; c74 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1					
     c1c:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     c20:	e5801000 	str	r1, [r0]

	POP	{LR}
     c24:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     c28:	e12fff1e 	bx	lr

00000c2c <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     c2c:	e12fff1e 	bx	lr

00000c30 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     c30:	e12fff1e 	bx	lr

00000c34 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     c34:	e12fff1e 	bx	lr

00000c38 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     c38:	e12fff1e 	bx	lr

00000c3c <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:					
	PUSH {LR}
     c3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	BL read_PB_edgecap_ASM			
     c40:	ebffffa5 	bl	adc <read_PB_edgecap_ASM>
	
	LDR R1, =pb_int_flag
     c44:	e59f102c 	ldr	r1, [pc, #44]	; c78 <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]					
     c48:	e5810000 	str	r0, [r1]
	
	BL PB_clear_edgecap_ASM	
     c4c:	ebffffc0 	bl	b54 <PB_clear_edgecap_ASM>
	POP {LR}
     c50:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     c54:	e12fff1e 	bx	lr

00000c58 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     c58:	e12fff1e 	bx	lr

00000c5c <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     c5c:	e12fff1e 	bx	lr

00000c60 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     c60:	e12fff1e 	bx	lr

00000c64 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     c64:	e12fff1e 	bx	lr

00000c68 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     c68:	e12fff1e 	bx	lr

00000c6c <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     c6c:	e12fff1e 	bx	lr

00000c70 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     c70:	e12fff1e 	bx	lr
	push {LR}				
	
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM		

	LDR R0, =hps_tim0_int_flag 		
     c74:	00000bfc 	.word	0x00000bfc
	
FPGA_PB_KEYS_ISR:					
	PUSH {LR}
	BL read_PB_edgecap_ASM			
	
	LDR R1, =pb_int_flag
     c78:	00000c00 	.word	0x00000c00

00000c7c <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     c7c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     c80:	e28db000 	add	r11, sp, #0
     c84:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     c88:	e3a030d3 	mov	r3, #211	; 0xd3
     c8c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     c90:	e51b3008 	ldr	r3, [r11, #-8]
     c94:	e129f003 	msr	CPSR_fc, r3
}
     c98:	e28bd000 	add	sp, r11, #0
     c9c:	e8bd0800 	ldmfd	sp!, {r11}
     ca0:	e12fff1e 	bx	lr

00000ca4 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     ca4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ca8:	e28db000 	add	r11, sp, #0
     cac:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     cb0:	e3a03053 	mov	r3, #83	; 0x53
     cb4:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     cb8:	e51b3008 	ldr	r3, [r11, #-8]
     cbc:	e129f003 	msr	CPSR_fc, r3
}
     cc0:	e28bd000 	add	sp, r11, #0
     cc4:	e8bd0800 	ldmfd	sp!, {r11}
     cc8:	e12fff1e 	bx	lr

00000ccc <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     ccc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cd0:	e28db000 	add	r11, sp, #0
     cd4:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     cd8:	e3e03007 	mvn	r3, #7
     cdc:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     ce0:	e3a030d2 	mov	r3, #210	; 0xd2
     ce4:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     ce8:	e51b300c 	ldr	r3, [r11, #-12]
     cec:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     cf0:	e51b3008 	ldr	r3, [r11, #-8]
     cf4:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     cf8:	e3a030d3 	mov	r3, #211	; 0xd3
     cfc:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     d00:	e51b300c 	ldr	r3, [r11, #-12]
     d04:	e129f003 	msr	CPSR_fc, r3
}
     d08:	e28bd000 	add	sp, r11, #0
     d0c:	e8bd0800 	ldmfd	sp!, {r11}
     d10:	e12fff1e 	bx	lr

00000d14 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     d14:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d18:	e28db000 	add	r11, sp, #0
     d1c:	e24dd01c 	sub	sp, sp, #28
     d20:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     d24:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     d28:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d2c:	e1a031c3 	asr	r3, r3, #3
     d30:	e3c33003 	bic	r3, r3, #3
     d34:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     d38:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d3c:	e203301f 	and	r3, r3, #31
     d40:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     d44:	e3a02001 	mov	r2, #1
     d48:	e51b300c 	ldr	r3, [r11, #-12]
     d4c:	e1a03312 	lsl	r3, r2, r3
     d50:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     d54:	e51b3008 	ldr	r3, [r11, #-8]
     d58:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     d5c:	e2433c03 	sub	r3, r3, #768	; 0x300
     d60:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     d64:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     d68:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     d6c:	e5921000 	ldr	r1, [r2]
     d70:	e51b2010 	ldr	r2, [r11, #-16]
     d74:	e1812002 	orr	r2, r1, r2
     d78:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     d7c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d80:	e3c33003 	bic	r3, r3, #3
     d84:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     d88:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d8c:	e2033003 	and	r3, r3, #3
     d90:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     d94:	e51b2008 	ldr	r2, [r11, #-8]
     d98:	e51b300c 	ldr	r3, [r11, #-12]
     d9c:	e0823003 	add	r3, r2, r3
     da0:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     da4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     da8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     dac:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     db0:	e6ef2072 	uxtb	r2, r2
     db4:	e5c32000 	strb	r2, [r3]
}
     db8:	e28bd000 	add	sp, r11, #0
     dbc:	e8bd0800 	ldmfd	sp!, {r11}
     dc0:	e12fff1e 	bx	lr

00000dc4 <config_GIC>:

void config_GIC(int len, int* IDs) {
     dc4:	e92d4800 	push	{r11, lr}
     dc8:	e28db004 	add	r11, sp, #4
     dcc:	e24dd010 	sub	sp, sp, #16
     dd0:	e50b0010 	str	r0, [r11, #-16]
     dd4:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     dd8:	e3a03000 	mov	r3, #0
     ddc:	e50b3008 	str	r3, [r11, #-8]
     de0:	ea00000a 	b	e10 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     de4:	e51b3008 	ldr	r3, [r11, #-8]
     de8:	e1a03103 	lsl	r3, r3, #2
     dec:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     df0:	e0823003 	add	r3, r2, r3
     df4:	e5933000 	ldr	r3, [r3]
     df8:	e1a00003 	mov	r0, r3
     dfc:	e3a01001 	mov	r1, #1
     e00:	ebffffc3 	bl	d14 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     e04:	e51b3008 	ldr	r3, [r11, #-8]
     e08:	e2833001 	add	r3, r3, #1
     e0c:	e50b3008 	str	r3, [r11, #-8]
     e10:	e51b2008 	ldr	r2, [r11, #-8]
     e14:	e51b3010 	ldr	r3, [r11, #-16]
     e18:	e1520003 	cmp	r2, r3
     e1c:	bafffff0 	blt	de4 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     e20:	e30c3104 	movw	r3, #49412	; 0xc104
     e24:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e28:	e30f2fff 	movw	r2, #65535	; 0xffff
     e2c:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     e30:	e3a03cc1 	mov	r3, #49408	; 0xc100
     e34:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e38:	e3a02001 	mov	r2, #1
     e3c:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     e40:	e3a03a0d 	mov	r3, #53248	; 0xd000
     e44:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e48:	e3a02001 	mov	r2, #1
     e4c:	e5832000 	str	r2, [r3]
}
     e50:	e24bd004 	sub	sp, r11, #4
     e54:	e8bd8800 	pop	{r11, pc}

00000e58 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     e58:	e24ee004 	sub	lr, lr, #4
     e5c:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     e60:	e28db018 	add	r11, sp, #24
     e64:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     e68:	e30c310c 	movw	r3, #49420	; 0xc10c
     e6c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e70:	e5933000 	ldr	r3, [r3]
     e74:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     e78:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     e7c:	e3530053 	cmp	r3, #83	; 0x53
     e80:	0a00003d 	beq	f7c <__cs3_isr_irq+0x124>
     e84:	e3530053 	cmp	r3, #83	; 0x53
     e88:	ca000011 	bgt	ed4 <__cs3_isr_irq+0x7c>
     e8c:	e353004e 	cmp	r3, #78	; 0x4e
     e90:	0a000031 	beq	f5c <__cs3_isr_irq+0x104>
     e94:	e353004e 	cmp	r3, #78	; 0x4e
     e98:	ca000006 	bgt	eb8 <__cs3_isr_irq+0x60>
     e9c:	e3530048 	cmp	r3, #72	; 0x48
     ea0:	0a000029 	beq	f4c <__cs3_isr_irq+0xf4>
     ea4:	e3530049 	cmp	r3, #73	; 0x49
     ea8:	0a000029 	beq	f54 <__cs3_isr_irq+0xfc>
     eac:	e353001d 	cmp	r3, #29
     eb0:	0a000019 	beq	f1c <__cs3_isr_irq+0xc4>
     eb4:	ea000036 	b	f94 <__cs3_isr_irq+0x13c>
     eb8:	e3530050 	cmp	r3, #80	; 0x50
     ebc:	0a00002a 	beq	f6c <__cs3_isr_irq+0x114>
     ec0:	e3530050 	cmp	r3, #80	; 0x50
     ec4:	ba000026 	blt	f64 <__cs3_isr_irq+0x10c>
     ec8:	e3530051 	cmp	r3, #81	; 0x51
     ecc:	0a000028 	beq	f74 <__cs3_isr_irq+0x11c>
     ed0:	ea00002f 	b	f94 <__cs3_isr_irq+0x13c>
     ed4:	e35300c7 	cmp	r3, #199	; 0xc7
     ed8:	0a000013 	beq	f2c <__cs3_isr_irq+0xd4>
     edc:	e35300c7 	cmp	r3, #199	; 0xc7
     ee0:	ca000006 	bgt	f00 <__cs3_isr_irq+0xa8>
     ee4:	e3530059 	cmp	r3, #89	; 0x59
     ee8:	0a000027 	beq	f8c <__cs3_isr_irq+0x134>
     eec:	e35300c5 	cmp	r3, #197	; 0xc5
     ef0:	0a00000b 	beq	f24 <__cs3_isr_irq+0xcc>
     ef4:	e3530054 	cmp	r3, #84	; 0x54
     ef8:	0a000021 	beq	f84 <__cs3_isr_irq+0x12c>
     efc:	ea000024 	b	f94 <__cs3_isr_irq+0x13c>
     f00:	e35300c9 	cmp	r3, #201	; 0xc9
     f04:	0a00000c 	beq	f3c <__cs3_isr_irq+0xe4>
     f08:	e35300c9 	cmp	r3, #201	; 0xc9
     f0c:	ba000008 	blt	f34 <__cs3_isr_irq+0xdc>
     f10:	e35300ca 	cmp	r3, #202	; 0xca
     f14:	0a00000a 	beq	f44 <__cs3_isr_irq+0xec>
     f18:	ea00001d 	b	f94 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     f1c:	ebffff38 	bl	c04 <A9_PRIV_TIM_ISR>
     f20:	ea00001c 	b	f98 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     f24:	ebffff37 	bl	c08 <HPS_GPIO1_ISR>
     f28:	ea00001a 	b	f98 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     f2c:	ebffff36 	bl	c0c <HPS_TIM0_ISR>
     f30:	ea000018 	b	f98 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     f34:	ebffff3c 	bl	c2c <HPS_TIM1_ISR>
     f38:	ea000016 	b	f98 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     f3c:	ebffff3b 	bl	c30 <HPS_TIM2_ISR>
     f40:	ea000014 	b	f98 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     f44:	ebffff3a 	bl	c34 <HPS_TIM3_ISR>
     f48:	ea000012 	b	f98 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     f4c:	ebffff39 	bl	c38 <FPGA_INTERVAL_TIM_ISR>
     f50:	ea000010 	b	f98 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     f54:	ebffff38 	bl	c3c <FPGA_PB_KEYS_ISR>
     f58:	ea00000e 	b	f98 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     f5c:	ebffff3d 	bl	c58 <FPGA_Audio_ISR>
     f60:	ea00000c 	b	f98 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     f64:	ebffff3c 	bl	c5c <FPGA_PS2_ISR>
     f68:	ea00000a 	b	f98 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     f6c:	ebffff3b 	bl	c60 <FPGA_JTAG_ISR>
     f70:	ea000008 	b	f98 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     f74:	ebffff3a 	bl	c64 <FPGA_IrDA_ISR>
     f78:	ea000006 	b	f98 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     f7c:	ebffff39 	bl	c68 <FPGA_JP1_ISR>
     f80:	ea000004 	b	f98 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     f84:	ebffff38 	bl	c6c <FPGA_JP2_ISR>
     f88:	ea000002 	b	f98 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     f8c:	ebffff37 	bl	c70 <FPGA_PS2_DUAL_ISR>
     f90:	ea000000 	b	f98 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     f94:	eafffffe 	b	f94 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     f98:	e30c3110 	movw	r3, #49424	; 0xc110
     f9c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     fa0:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     fa4:	e5832000 	str	r2, [r3]
}
     fa8:	e24bd018 	sub	sp, r11, #24
     fac:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000fb0 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     fb0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fb4:	e28db000 	add	r11, sp, #0
	while(1);
     fb8:	eafffffe 	b	fb8 <__cs3_reset+0x8>

00000fbc <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     fbc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fc0:	e28db000 	add	r11, sp, #0
	while(1);
     fc4:	eafffffe 	b	fc4 <__cs3_isr_undef+0x8>

00000fc8 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     fc8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fcc:	e28db000 	add	r11, sp, #0
	while(1);
     fd0:	eafffffe 	b	fd0 <__cs3_isr_swi+0x8>

00000fd4 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     fd4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fd8:	e28db000 	add	r11, sp, #0
	while(1);
     fdc:	eafffffe 	b	fdc <__cs3_isr_pabort+0x8>

00000fe0 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     fe0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fe4:	e28db000 	add	r11, sp, #0
	while(1);
     fe8:	eafffffe 	b	fe8 <__cs3_isr_dabort+0x8>

00000fec <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     fec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ff0:	e28db000 	add	r11, sp, #0
	while(1);
     ff4:	eafffffe 	b	ff4 <__cs3_isr_fiq+0x8>

00000ff8 <fix_bug>:
}

void fix_bug() {
     ff8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ffc:	e28db000 	add	r11, sp, #0
    1000:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    1004:	e30d3198 	movw	r3, #53656	; 0xd198
    1008:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    100c:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    1010:	e51b3008 	ldr	r3, [r11, #-8]
    1014:	e3a02703 	mov	r2, #786432	; 0xc0000
    1018:	e5832000 	str	r2, [r3]
}
    101c:	e28bd000 	add	sp, r11, #0
    1020:	e8bd0800 	ldmfd	sp!, {r11}
    1024:	e12fff1e 	bx	lr

00001028 <int_setup>:

void int_setup(int len, int* IDs) {
    1028:	e92d4800 	push	{r11, lr}
    102c:	e28db004 	add	r11, sp, #4
    1030:	e24dd008 	sub	sp, sp, #8
    1034:	e50b0008 	str	r0, [r11, #-8]
    1038:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    103c:	ebffff0e 	bl	c7c <disable_A9_interrupts>
	set_A9_IRQ_stack();
    1040:	ebffff21 	bl	ccc <set_A9_IRQ_stack>
	fix_bug();
    1044:	ebffffeb 	bl	ff8 <fix_bug>
	config_GIC(len, IDs);
    1048:	e51b0008 	ldr	r0, [r11, #-8]
    104c:	e51b100c 	ldr	r1, [r11, #-12]
    1050:	ebffff5b 	bl	dc4 <config_GIC>
	enable_A9_interrupts();
    1054:	ebffff12 	bl	ca4 <enable_A9_interrupts>
}
    1058:	e24bd004 	sub	sp, r11, #4
    105c:	e8bd8800 	pop	{r11, pc}

00001060 <atexit>:
    1060:	e1a01000 	mov	r1, r0
    1064:	e3a00000 	mov	r0, #0
    1068:	e92d4008 	push	{r3, lr}
    106c:	e1a02000 	mov	r2, r0
    1070:	e1a03000 	mov	r3, r0
    1074:	eb00000e 	bl	10b4 <__register_exitproc>
    1078:	e8bd4008 	pop	{r3, lr}
    107c:	e12fff1e 	bx	lr

00001080 <exit>:
    1080:	e92d4008 	push	{r3, lr}
    1084:	e3a01000 	mov	r1, #0
    1088:	e1a04000 	mov	r4, r0
    108c:	eb000045 	bl	11a8 <__call_exitprocs>
    1090:	e59f3018 	ldr	r3, [pc, #24]	; 10b0 <exit+0x30>
    1094:	e5930000 	ldr	r0, [r3]
    1098:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    109c:	e3530000 	cmp	r3, #0
    10a0:	11a0e00f 	movne	lr, pc
    10a4:	112fff13 	bxne	r3
    10a8:	e1a00004 	mov	r0, r4
    10ac:	eb0000c9 	bl	13d8 <_exit>
    10b0:	00001488 	.word	0x00001488

000010b4 <__register_exitproc>:
    10b4:	e59fc0e4 	ldr	r12, [pc, #228]	; 11a0 <__register_exitproc+0xec>
    10b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    10bc:	e59c4000 	ldr	r4, [r12]
    10c0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    10c4:	e35c0000 	cmp	r12, #0
    10c8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    10cc:	e59c5004 	ldr	r5, [r12, #4]
    10d0:	0584c148 	streq	r12, [r4, #328]	; 0x148
    10d4:	e355001f 	cmp	r5, #31
    10d8:	e24dd010 	sub	sp, sp, #16
    10dc:	e1a06000 	mov	r6, r0
    10e0:	da000015 	ble	113c <__register_exitproc+0x88>
    10e4:	e59f00b8 	ldr	r0, [pc, #184]	; 11a4 <__register_exitproc+0xf0>
    10e8:	e3500000 	cmp	r0, #0
    10ec:	1a000001 	bne	10f8 <__register_exitproc+0x44>
    10f0:	e3e00000 	mvn	r0, #0
    10f4:	ea000018 	b	115c <__register_exitproc+0xa8>
    10f8:	e3a00e19 	mov	r0, #400	; 0x190
    10fc:	e58d100c 	str	r1, [sp, #12]
    1100:	e58d2008 	str	r2, [sp, #8]
    1104:	e58d3004 	str	r3, [sp, #4]
    1108:	e320f000 	nop	{0}
    110c:	e250c000 	subs	r12, r0, #0
    1110:	e59d100c 	ldr	r1, [sp, #12]
    1114:	e59d2008 	ldr	r2, [sp, #8]
    1118:	e59d3004 	ldr	r3, [sp, #4]
    111c:	0afffff3 	beq	10f0 <__register_exitproc+0x3c>
    1120:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1124:	e3a00000 	mov	r0, #0
    1128:	e58c0004 	str	r0, [r12, #4]
    112c:	e58c5000 	str	r5, [r12]
    1130:	e584c148 	str	r12, [r4, #328]	; 0x148
    1134:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1138:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    113c:	e3560000 	cmp	r6, #0
    1140:	e59c4004 	ldr	r4, [r12, #4]
    1144:	1a000007 	bne	1168 <__register_exitproc+0xb4>
    1148:	e2843002 	add	r3, r4, #2
    114c:	e2844001 	add	r4, r4, #1
    1150:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1154:	e58c4004 	str	r4, [r12, #4]
    1158:	e3a00000 	mov	r0, #0
    115c:	e28dd010 	add	sp, sp, #16
    1160:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1164:	e12fff1e 	bx	lr
    1168:	e3a00001 	mov	r0, #1
    116c:	e1a00410 	lsl	r0, r0, r4
    1170:	e08c8104 	add	r8, r12, r4, lsl #2
    1174:	e3560002 	cmp	r6, #2
    1178:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    117c:	e5883108 	str	r3, [r8, #264]	; 0x108
    1180:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1184:	e1877000 	orr	r7, r7, r0
    1188:	01830000 	orreq	r0, r3, r0
    118c:	e1a05008 	mov	r5, r8
    1190:	e5882088 	str	r2, [r8, #136]	; 0x88
    1194:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1198:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    119c:	eaffffe9 	b	1148 <__register_exitproc+0x94>
    11a0:	00001488 	.word	0x00001488
    11a4:	00000000 	.word	0x00000000

000011a8 <__call_exitprocs>:
    11a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    11ac:	e59f3168 	ldr	r3, [pc, #360]	; 131c <__call_exitprocs+0x174>
    11b0:	e5933000 	ldr	r3, [r3]
    11b4:	e24dd014 	sub	sp, sp, #20
    11b8:	e58d3004 	str	r3, [sp, #4]
    11bc:	e2833f52 	add	r3, r3, #328	; 0x148
    11c0:	e58d0008 	str	r0, [sp, #8]
    11c4:	e58d300c 	str	r3, [sp, #12]
    11c8:	e1a07001 	mov	r7, r1
    11cc:	e3a08001 	mov	r8, #1
    11d0:	e59d3004 	ldr	r3, [sp, #4]
    11d4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    11d8:	e3560000 	cmp	r6, #0
    11dc:	e59db00c 	ldr	r11, [sp, #12]
    11e0:	0a000033 	beq	12b4 <__call_exitprocs+0x10c>
    11e4:	e5965004 	ldr	r5, [r6, #4]
    11e8:	e2554001 	subs	r4, r5, #1
    11ec:	5286a088 	addpl	r10, r6, #136	; 0x88
    11f0:	5285501f 	addpl	r5, r5, #31
    11f4:	508a5105 	addpl	r5, r10, r5, lsl #2
    11f8:	5a000007 	bpl	121c <__call_exitprocs+0x74>
    11fc:	ea000029 	b	12a8 <__call_exitprocs+0x100>
    1200:	e5953000 	ldr	r3, [r5]
    1204:	e1530007 	cmp	r3, r7
    1208:	0a000005 	beq	1224 <__call_exitprocs+0x7c>
    120c:	e2444001 	sub	r4, r4, #1
    1210:	e3740001 	cmn	r4, #1
    1214:	e2455004 	sub	r5, r5, #4
    1218:	0a000022 	beq	12a8 <__call_exitprocs+0x100>
    121c:	e3570000 	cmp	r7, #0
    1220:	1afffff6 	bne	1200 <__call_exitprocs+0x58>
    1224:	e5963004 	ldr	r3, [r6, #4]
    1228:	e06a2005 	rsb	r2, r10, r5
    122c:	e2433001 	sub	r3, r3, #1
    1230:	e0862002 	add	r2, r6, r2
    1234:	e1530004 	cmp	r3, r4
    1238:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    123c:	13a01000 	movne	r1, #0
    1240:	05864004 	streq	r4, [r6, #4]
    1244:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1248:	e3530000 	cmp	r3, #0
    124c:	0affffee 	beq	120c <__call_exitprocs+0x64>
    1250:	e1a02418 	lsl	r2, r8, r4
    1254:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1258:	e1120001 	tst	r2, r1
    125c:	e5969004 	ldr	r9, [r6, #4]
    1260:	0a000016 	beq	12c0 <__call_exitprocs+0x118>
    1264:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1268:	e1120001 	tst	r2, r1
    126c:	1a000016 	bne	12cc <__call_exitprocs+0x124>
    1270:	e59d0008 	ldr	r0, [sp, #8]
    1274:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1278:	e1a0e00f 	mov	lr, pc
    127c:	e12fff13 	bx	r3
    1280:	e5963004 	ldr	r3, [r6, #4]
    1284:	e1530009 	cmp	r3, r9
    1288:	1affffd0 	bne	11d0 <__call_exitprocs+0x28>
    128c:	e59b3000 	ldr	r3, [r11]
    1290:	e1530006 	cmp	r3, r6
    1294:	1affffcd 	bne	11d0 <__call_exitprocs+0x28>
    1298:	e2444001 	sub	r4, r4, #1
    129c:	e3740001 	cmn	r4, #1
    12a0:	e2455004 	sub	r5, r5, #4
    12a4:	1affffdc 	bne	121c <__call_exitprocs+0x74>
    12a8:	e59f1070 	ldr	r1, [pc, #112]	; 1320 <__call_exitprocs+0x178>
    12ac:	e3510000 	cmp	r1, #0
    12b0:	1a000009 	bne	12dc <__call_exitprocs+0x134>
    12b4:	e28dd014 	add	sp, sp, #20
    12b8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    12bc:	e12fff1e 	bx	lr
    12c0:	e1a0e00f 	mov	lr, pc
    12c4:	e12fff13 	bx	r3
    12c8:	eaffffec 	b	1280 <__call_exitprocs+0xd8>
    12cc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    12d0:	e1a0e00f 	mov	lr, pc
    12d4:	e12fff13 	bx	r3
    12d8:	eaffffe8 	b	1280 <__call_exitprocs+0xd8>
    12dc:	e5963004 	ldr	r3, [r6, #4]
    12e0:	e3530000 	cmp	r3, #0
    12e4:	e5963000 	ldr	r3, [r6]
    12e8:	1a000008 	bne	1310 <__call_exitprocs+0x168>
    12ec:	e3530000 	cmp	r3, #0
    12f0:	0a000006 	beq	1310 <__call_exitprocs+0x168>
    12f4:	e1a00006 	mov	r0, r6
    12f8:	e58b3000 	str	r3, [r11]
    12fc:	e320f000 	nop	{0}
    1300:	e59b6000 	ldr	r6, [r11]
    1304:	e3560000 	cmp	r6, #0
    1308:	1affffb5 	bne	11e4 <__call_exitprocs+0x3c>
    130c:	eaffffe8 	b	12b4 <__call_exitprocs+0x10c>
    1310:	e1a0b006 	mov	r11, r6
    1314:	e1a06003 	mov	r6, r3
    1318:	eafffff9 	b	1304 <__call_exitprocs+0x15c>
    131c:	00001488 	.word	0x00001488
    1320:	00000000 	.word	0x00000000

00001324 <register_fini>:
    1324:	e92d4008 	push	{r3, lr}
    1328:	e59f3010 	ldr	r3, [pc, #16]	; 1340 <register_fini+0x1c>
    132c:	e3530000 	cmp	r3, #0
    1330:	159f000c 	ldrne	r0, [pc, #12]	; 1344 <register_fini+0x20>
    1334:	1bffff49 	blne	1060 <atexit>
    1338:	e8bd4008 	pop	{r3, lr}
    133c:	e12fff1e 	bx	lr
    1340:	000014b0 	.word	0x000014b0
    1344:	00001348 	.word	0x00001348

00001348 <__libc_fini_array>:
    1348:	e92d4038 	push	{r3, r4, r5, lr}
    134c:	e59f5030 	ldr	r5, [pc, #48]	; 1384 <__libc_fini_array+0x3c>
    1350:	e59f4030 	ldr	r4, [pc, #48]	; 1388 <__libc_fini_array+0x40>
    1354:	e0654004 	rsb	r4, r5, r4
    1358:	e1b04144 	asrs	r4, r4, #2
    135c:	10855104 	addne	r5, r5, r4, lsl #2
    1360:	0a000004 	beq	1378 <__libc_fini_array+0x30>
    1364:	e5353004 	ldr	r3, [r5, #-4]!
    1368:	e1a0e00f 	mov	lr, pc
    136c:	e12fff13 	bx	r3
    1370:	e2544001 	subs	r4, r4, #1
    1374:	1afffffa 	bne	1364 <__libc_fini_array+0x1c>
    1378:	eb00004c 	bl	14b0 <__libc_fini>
    137c:	e8bd4038 	pop	{r3, r4, r5, lr}
    1380:	e12fff1e 	bx	lr
    1384:	000014c8 	.word	0x000014c8
    1388:	000014cc 	.word	0x000014cc

0000138c <__cs3_premain>:
    138c:	e92d4008 	push	{r3, lr}
    1390:	eb000017 	bl	13f4 <__libc_init_array>
    1394:	e59f3030 	ldr	r3, [pc, #48]	; 13cc <__cs3_premain+0x40>
    1398:	e3530000 	cmp	r3, #0
    139c:	15930000 	ldrne	r0, [r3]
    13a0:	01a00003 	moveq	r0, r3
    13a4:	e59f3024 	ldr	r3, [pc, #36]	; 13d0 <__cs3_premain+0x44>
    13a8:	e3530000 	cmp	r3, #0
    13ac:	15931000 	ldrne	r1, [r3]
    13b0:	01a01003 	moveq	r1, r3
    13b4:	e3a02000 	mov	r2, #0
    13b8:	ebfffba7 	bl	25c <main>
    13bc:	e59f3010 	ldr	r3, [pc, #16]	; 13d4 <__cs3_premain+0x48>
    13c0:	e3530000 	cmp	r3, #0
    13c4:	1bffff2d 	blne	1080 <exit>
    13c8:	eafffffe 	b	13c8 <__cs3_premain+0x3c>
	...
    13d4:	00001080 	.word	0x00001080

000013d8 <_exit>:
    13d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    13dc:	e3a00018 	mov	r0, #24
    13e0:	e59f1004 	ldr	r1, [pc, #4]	; 13ec <_exit+0x14>
    13e4:	ef123456 	svc	0x00123456
    13e8:	eafffffe 	b	13e8 <_exit+0x10>
    13ec:	00020026 	.word	0x00020026

000013f0 <__cs3_isr_interrupt>:
    13f0:	eafffffe 	b	13f0 <__cs3_isr_interrupt>

000013f4 <__libc_init_array>:
    13f4:	e92d4070 	push	{r4, r5, r6, lr}
    13f8:	e59f506c 	ldr	r5, [pc, #108]	; 146c <__libc_init_array+0x78>
    13fc:	e59f606c 	ldr	r6, [pc, #108]	; 1470 <__libc_init_array+0x7c>
    1400:	e0656006 	rsb	r6, r5, r6
    1404:	e1b06146 	asrs	r6, r6, #2
    1408:	12455004 	subne	r5, r5, #4
    140c:	13a04000 	movne	r4, #0
    1410:	0a000005 	beq	142c <__libc_init_array+0x38>
    1414:	e5b53004 	ldr	r3, [r5, #4]!
    1418:	e2844001 	add	r4, r4, #1
    141c:	e1a0e00f 	mov	lr, pc
    1420:	e12fff13 	bx	r3
    1424:	e1560004 	cmp	r6, r4
    1428:	1afffff9 	bne	1414 <__libc_init_array+0x20>
    142c:	e59f5040 	ldr	r5, [pc, #64]	; 1474 <__libc_init_array+0x80>
    1430:	e59f6040 	ldr	r6, [pc, #64]	; 1478 <__libc_init_array+0x84>
    1434:	e0656006 	rsb	r6, r5, r6
    1438:	eb000014 	bl	1490 <_init>
    143c:	e1b06146 	asrs	r6, r6, #2
    1440:	12455004 	subne	r5, r5, #4
    1444:	13a04000 	movne	r4, #0
    1448:	0a000005 	beq	1464 <__libc_init_array+0x70>
    144c:	e5b53004 	ldr	r3, [r5, #4]!
    1450:	e2844001 	add	r4, r4, #1
    1454:	e1a0e00f 	mov	lr, pc
    1458:	e12fff13 	bx	r3
    145c:	e1560004 	cmp	r6, r4
    1460:	1afffff9 	bne	144c <__libc_init_array+0x58>
    1464:	e8bd4070 	pop	{r4, r5, r6, lr}
    1468:	e12fff1e 	bx	lr
    146c:	000014a8 	.word	0x000014a8
    1470:	000014a8 	.word	0x000014a8
    1474:	000014a8 	.word	0x000014a8
    1478:	000014b0 	.word	0x000014b0

Disassembly of section .rodata:

00001480 <_global_impure_ptr-0x8>:
    1480:	000000c7 	.word	0x000000c7
    1484:	00000049 	.word	0x00000049

00001488 <_global_impure_ptr>:
    1488:	000014f0 00000043                       ....C...

00001490 <_init>:
    1490:	e1a0c00d 	mov	r12, sp
    1494:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1498:	e24cb004 	sub	r11, r12, #4
    149c:	e24bd028 	sub	sp, r11, #40	; 0x28
    14a0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    14a4:	e12fff1e 	bx	lr

000014a8 <__init_array_start>:
    14a8:	00001324 	.word	0x00001324

000014ac <__frame_dummy_init_array_entry>:
    14ac:	00000208                                ....

000014b0 <__libc_fini>:
    14b0:	e1a0c00d 	mov	r12, sp
    14b4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    14b8:	e24cb004 	sub	r11, r12, #4
    14bc:	e24bd028 	sub	sp, r11, #40	; 0x28
    14c0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    14c4:	e12fff1e 	bx	lr

000014c8 <__fini_array_start>:
    14c8:	000001c4 	.word	0x000001c4

000014cc <__cs3_regions>:
    14cc:	00000000 	.word	0x00000000
    14d0:	00000040 	.word	0x00000040
    14d4:	00000040 	.word	0x00000040
    14d8:	000018e0 	.word	0x000018e0
    14dc:	00000020 	.word	0x00000020
