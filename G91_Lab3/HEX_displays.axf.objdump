
P:/G91_Lab3/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	b4 0b 00 00 c0 0b 00 00 cc 0b 00 00 d8 0b 00 00     ................
  30:	e4 0b 00 00 64 11 00 00 5c 0a 00 00 f0 0b 00 00     ....d...\.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <HEX_8+0x59>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <HEX_8+0x55>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <HEX_8+0x5d>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <HEX_8+0x25>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <HEX_8+0x25>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <HEX_8+0xd>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <HEX_8+0x45>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <HEX_8+0x35>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <HEX_D+0x6>
      d4:	eb000409 	bl	1100 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000124c 	.word	0x0000124c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001688 	.word	0x00001688

00000124 <__cs3_heap_start_ptr>:
     124:	000016b0 	.word	0x000016b0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001690 	.word	0x00001690
     170:	00001693 	.word	0x00001693
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001690 	.word	0x00001690
     1bc:	00001690 	.word	0x00001690
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001690 	.word	0x00001690
     200:	00000000 	.word	0x00000000
     204:	000011f0 	.word	0x000011f0

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000011f0 	.word	0x000011f0
     250:	00001694 	.word	0x00001694
     254:	00001250 	.word	0x00001250
     258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
     25c:	e59f1274 	ldr	r1, [pc, #628]	; 4d8 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
     260:	e59f2274 	ldr	r2, [pc, #628]	; 4dc <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
     264:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
     268:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
     26c:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
     270:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
     274:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
     278:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
     27c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
     280:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
     284:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
     288:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
     28c:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
     290:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
     294:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF00FFFF
     298:	e3e038ff 	mvn	r3, #16711680	; 0xff0000
CMP R5, #1
     29c:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
     2a0:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
     2a4:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
     2a8:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FFFFFF
     2ac:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
CMP R5, #1
     2b0:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
     2b4:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
     2b8:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
     2bc:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
     2c0:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
     2c4:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
     2c8:	00077003 	andeq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
     2cc:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
     2d0:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
     2d4:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
     2d8:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
     2dc:	00077003 	andeq	r7, r7, r3

STR R6, [R1]
     2e0:	e5816000 	str	r6, [r1]
STR R7, [R2]
     2e4:	e5827000 	str	r7, [r2]

BX LR
     2e8:	e12fff1e 	bx	lr

000002ec <HEX_flood_ASM>:
HEX_flood_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
     2ec:	e59f11e4 	ldr	r1, [pc, #484]	; 4d8 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
     2f0:	e59f21e4 	ldr	r2, [pc, #484]	; 4dc <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
     2f4:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
     2f8:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
     2fc:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF		//OFF
     300:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
     304:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
     308:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
     30c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
     310:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
     314:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
     318:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
     31c:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
     320:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
     324:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FF0000
     328:	e3a038ff 	mov	r3, #16711680	; 0xff0000
CMP R5, #1
     32c:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
     330:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
     334:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
     338:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF000000
     33c:	e3a034ff 	mov	r3, #-16777216	; 0xff000000
CMP R5, #1
     340:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
     344:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
     348:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
     34c:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF	//OFF
     350:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
     354:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
     358:	01877003 	orreq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
     35c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
     360:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
     364:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
     368:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
     36c:	01877003 	orreq	r7, r7, r3

STR R6, [R1]
     370:	e5816000 	str	r6, [r1]
STR R7, [R2]
     374:	e5827000 	str	r7, [r2]

BX LR
     378:	e12fff1e 	bx	lr

0000037c <HEX_write_ASM>:
HEX_write_ASM:
CMP R1,#48
     37c:	e3510030 	cmp	r1, #48	; 0x30
MOVEQ R4, #HEX_0
     380:	03a0403f 	moveq	r4, #63	; 0x3f
BEQ WRITE
     384:	0a00002c 	beq	43c <WRITE>
CMP R1,#49
     388:	e3510031 	cmp	r1, #49	; 0x31
MOVEQ R4, #HEX_1
     38c:	03a04006 	moveq	r4, #6
BEQ WRITE
     390:	0a000029 	beq	43c <WRITE>
CMP R1,#50
     394:	e3510032 	cmp	r1, #50	; 0x32
MOVEQ R4, #HEX_2
     398:	03a0405b 	moveq	r4, #91	; 0x5b
BEQ WRITE
     39c:	0a000026 	beq	43c <WRITE>
CMP R1,#51
     3a0:	e3510033 	cmp	r1, #51	; 0x33
MOVEQ R4, #HEX_3
     3a4:	03a0404f 	moveq	r4, #79	; 0x4f
BEQ WRITE
     3a8:	0a000023 	beq	43c <WRITE>
CMP R1,#52
     3ac:	e3510034 	cmp	r1, #52	; 0x34
MOVEQ R4, #HEX_4
     3b0:	03a04066 	moveq	r4, #102	; 0x66
BEQ WRITE
     3b4:	0a000020 	beq	43c <WRITE>
CMP R1,#53
     3b8:	e3510035 	cmp	r1, #53	; 0x35
MOVEQ R4, #HEX_5
     3bc:	03a0406d 	moveq	r4, #109	; 0x6d
BEQ WRITE
     3c0:	0a00001d 	beq	43c <WRITE>
CMP R1,#54
     3c4:	e3510036 	cmp	r1, #54	; 0x36
MOVEQ R4, #HEX_6
     3c8:	03a0407d 	moveq	r4, #125	; 0x7d
BEQ WRITE
     3cc:	0a00001a 	beq	43c <WRITE>
CMP R1,#55
     3d0:	e3510037 	cmp	r1, #55	; 0x37
MOVEQ R4, #HEX_7
     3d4:	03a04007 	moveq	r4, #7
BEQ WRITE
     3d8:	0a000017 	beq	43c <WRITE>
CMP R1,#56
     3dc:	e3510038 	cmp	r1, #56	; 0x38
MOVEQ R4, #HEX_8
     3e0:	03a0407f 	moveq	r4, #127	; 0x7f
BEQ WRITE
     3e4:	0a000014 	beq	43c <WRITE>
CMP R1,#57
     3e8:	e3510039 	cmp	r1, #57	; 0x39
MOVEQ R4, #HEX_9
     3ec:	03a0406f 	moveq	r4, #111	; 0x6f
BEQ WRITE
     3f0:	0a000011 	beq	43c <WRITE>
CMP R1,#65
     3f4:	e3510041 	cmp	r1, #65	; 0x41
MOVEQ R4, #HEX_A
     3f8:	03a04077 	moveq	r4, #119	; 0x77
BEQ WRITE
     3fc:	0a00000e 	beq	43c <WRITE>
CMP R1,#66
     400:	e3510042 	cmp	r1, #66	; 0x42
MOVEQ R4, #HEX_B
     404:	03a0407c 	moveq	r4, #124	; 0x7c
BEQ WRITE
     408:	0a00000b 	beq	43c <WRITE>
CMP R1,#67
     40c:	e3510043 	cmp	r1, #67	; 0x43
MOVEQ R4, #HEX_C
     410:	03a04039 	moveq	r4, #57	; 0x39
BEQ WRITE
     414:	0a000008 	beq	43c <WRITE>
CMP R1,#68
     418:	e3510044 	cmp	r1, #68	; 0x44
MOVEQ R4, #HEX_D
     41c:	03a0405e 	moveq	r4, #94	; 0x5e
BEQ WRITE
     420:	0a000005 	beq	43c <WRITE>
CMP R1,#69
     424:	e3510045 	cmp	r1, #69	; 0x45
MOVEQ R4, #HEX_E
     428:	03a04079 	moveq	r4, #121	; 0x79
BEQ WRITE
     42c:	0a000002 	beq	43c <WRITE>
CMP R1,#70
     430:	e3510046 	cmp	r1, #70	; 0x46
MOVEQ R4, #HEX_F
     434:	03a04071 	moveq	r4, #113	; 0x71
BEQ WRITE
     438:	0affffff 	beq	43c <WRITE>

0000043c <WRITE>:
WRITE:

LDR R2, =HEX_BASE1		//0-3 HEX DISPLAY
     43c:	e59f2094 	ldr	r2, [pc, #148]	; 4d8 <WRITE+0x9c>
LDR R3, =HEX_BASE2		//4-5 HEX DISPLAY
     440:	e59f3094 	ldr	r3, [pc, #148]	; 4dc <WRITE+0xa0>
LDR R5, [R2]			//LOAD STATE OF 0-3 HEX DISPLAY
     444:	e5925000 	ldr	r5, [r2]
LDR R6, [R3]			//LOAD STATE OF 4-5 HEX DISPLAY
     448:	e5936000 	ldr	r6, [r3]

CMP R0, #0x00000001
     44c:	e3500001 	cmp	r0, #1
MOVEQ R7, #0xFFFFFF00		//OFF
     450:	03e070ff 	mvneq	r7, #255	; 0xff
ANDEQ R7, R7, R5		//APPLY THE MASK
     454:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
     458:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
     45c:	05827000 	streq	r7, [r2]

CMP R0, #0x00000002
     460:	e3500002 	cmp	r0, #2
MOVEQ R7, #0xFFFF00FF		//OFF
     464:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
     468:	01a04404 	lsleq	r4, r4, #8
ANDEQ R7, R7, R5		//APPLY THE MASK
     46c:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
     470:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
     474:	05827000 	streq	r7, [r2]

CMP R0, #0x00000004
     478:	e3500004 	cmp	r0, #4
MOVEQ R7, #0xFF00FFFF		//OFF
     47c:	03e078ff 	mvneq	r7, #16711680	; 0xff0000
LSLEQ R4, #16
     480:	01a04804 	lsleq	r4, r4, #16
ANDEQ R7, R7, R5		//APPLY THE MASK
     484:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
     488:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
     48c:	05827000 	streq	r7, [r2]

CMP R0, #0x00000008
     490:	e3500008 	cmp	r0, #8
MOVEQ R7, #0x00FFFFFF		//OFF
     494:	03e074ff 	mvneq	r7, #-16777216	; 0xff000000
LSLEQ R4, #24
     498:	01a04c04 	lsleq	r4, r4, #24
ANDEQ R7, R7, R5		//APPLY THE MASK
     49c:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
     4a0:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
     4a4:	05827000 	streq	r7, [r2]

CMP R0, #0x00000010
     4a8:	e3500010 	cmp	r0, #16
MOVEQ R8, #0xFFFFFF00		//OFF
     4ac:	03e080ff 	mvneq	r8, #255	; 0xff
ANDEQ R8, R8, R6		//APPLY THE MASK
     4b0:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
     4b4:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
     4b8:	05838000 	streq	r8, [r3]

CMP R0, #0x00000020
     4bc:	e3500020 	cmp	r0, #32
MOVEQ R7, #0xFFFF00FF		//OFF
     4c0:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
     4c4:	01a04404 	lsleq	r4, r4, #8
ANDEQ R8, R8, R6		//APPLY THE MASK
     4c8:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
     4cc:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
     4d0:	05838000 	streq	r8, [r3]


BX LR
     4d4:	e12fff1e 	bx	lr
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
     4d8:	ff200020 	.word	0xff200020
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
     4dc:	ff200030 	.word	0xff200030

000004e0 <HPS_TIM_config_ASM>:
.equ TIM3, 0xFFC01000

.global HPS_TIM_config_ASM, HPS_TIM_read_INT_ASM, HPS_TIM_clear_INT_ASM
HPS_TIM_config_ASM:
//R0: address of the first component(TIM) in the struct
PUSH {LR}
     4e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
//PUSH {R1-R8}
LDR R1,[R0]
     4e4:	e5901000 	ldr	r1, [r0]
AND R2, R1, #0x00000001				//get the bit0
     4e8:	e2012001 	and	r2, r1, #1
CMP R2, #0x00000001					//check whether bit0 is
     4ec:	e3520001 	cmp	r2, #1
LDREQ R3, =TIM0
     4f0:	059f3144 	ldreq	r3, [pc, #324]	; 63c <SET_F_S+0x8>
MOVEQ R8, #100
     4f4:	03a08064 	moveq	r8, #100	; 0x64
BLEQ SET
     4f8:	0b000010 	bleq	540 <SET>
AND R2, R1, #0x00000002				//get the bit1
     4fc:	e2012002 	and	r2, r1, #2
CMP R2, #0x00000002					//check whether bit1 is 1
     500:	e3520002 	cmp	r2, #2
LDREQ R3, =TIM1
     504:	059f3134 	ldreq	r3, [pc, #308]	; 640 <SET_F_S+0xc>
MOVEQ R8, #100
     508:	03a08064 	moveq	r8, #100	; 0x64
BLEQ SET
     50c:	0b00000b 	bleq	540 <SET>
AND R2, R1, #0x00000004				//get the bit 2
     510:	e2012004 	and	r2, r1, #4
CMP R2, #0x00000004					//check whether bit2 is 1
     514:	e3520004 	cmp	r2, #4
LDREQ R3, =TIM2
     518:	059f3124 	ldreq	r3, [pc, #292]	; 644 <SET_F_S+0x10>
MOVEQ R8, #25
     51c:	03a08019 	moveq	r8, #25
BLEQ SET
     520:	0b000006 	bleq	540 <SET>
AND R2, R1, #0x00000008				//get the bit 3
     524:	e2012008 	and	r2, r1, #8
CMP R2, #0x00000008					//check whether bit3 is 1
     528:	e3520008 	cmp	r2, #8
LDREQ R3, =TIM3
     52c:	059f3114 	ldreq	r3, [pc, #276]	; 648 <SET_F_S+0x14>
MOVEQ R8, #25
     530:	03a08019 	moveq	r8, #25
BLEQ SET
     534:	0b000001 	bleq	540 <SET>
//POP {R1-R8}
POP {LR}
     538:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
BX LR
     53c:	e12fff1e 	bx	lr

00000540 <SET>:

SET:
ADD R4, R3, #8						//R4 IS THE ADDRESS OF THE CONTROL REGISTER
     540:	e2834008 	add	r4, r3, #8
LDR R5, [R4]						//R5 STORES THE CONTROL PART OF THE TIMER
     544:	e5945000 	ldr	r5, [r4]

LDR R7, [R0, #8]					//READ THE LOAD ENABLE PARAMETER
     548:	e5907008 	ldr	r7, [r0, #8]
CMP R7, #1							//CHECK WHETHER ENABLE IS 1
     54c:	e3570001 	cmp	r7, #1
ORREQ R5, R5, #0x00000002			//UPDATE THE bitM WITH 1
     550:	03855002 	orreq	r5, r5, #2
ANDEQ R5, R5, #0xFFFFFFFE			//SET THE E TO 0, SO THE LOAD VALUE CAN BE WRITE TO THE LOAD REGISTER
     554:	03c55001 	biceq	r5, r5, #1
STREQ R5, [R0, #8] 
     558:	05805008 	streq	r5, [r0, #8]
LDREQ R6, [R0, #4] 					//R6 STORES THE TIME OUT PARAMETER
     55c:	05906004 	ldreq	r6, [r0, #4]
MULEQ R6, R6, R8					//CALCUALTE THE LOAD VALUE CONSIDERING THE CLOCK FREQUENCY
     560:	00060896 	muleq	r6, r6, r8
STREQ R6, [R3] 						//UPDATE THE LOAD REGISTER
     564:	05836000 	streq	r6, [r3]
ANDNE R5, R5, #0xFFFFFFFD			//UPDATE THE bitM WITH 0
     568:	13c55002 	bicne	r5, r5, #2

LDR R7, [R0, #16]					//READ THE ENABLE PARAMETER
     56c:	e5907010 	ldr	r7, [r0, #16]
CMP R7, #0x00000001							
     570:	e3570001 	cmp	r7, #1
ORREQ R5, R5, #0x00000001			//UPDATE THE bitE BASED ON THE PARAMETER
     574:	03855001 	orreq	r5, r5, #1
ANDNE R5, R5, #0xFFFFFFFE
     578:	13c55001 	bicne	r5, r5, #1

//SET THE I
LDR R7, [R0, #12]					//READ THE INT_ENABLE PARAMETER
     57c:	e590700c 	ldr	r7, [r0, #12]
CMP R7, #1
     580:	e3570001 	cmp	r7, #1
ORREQ R5, R5, #0x00000004			//UPDATE THE bitI based on the parameter
     584:	03855004 	orreq	r5, r5, #4
ANDNE R5, R5, #0xFFFFFFFB
     588:	13c55004 	bicne	r5, r5, #4

STR R5, [R3, #8]
     58c:	e5835008 	str	r5, [r3, #8]
BX LR
     590:	e12fff1e 	bx	lr

00000594 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
//PUSH {R1-R4}
MOV R1, R0							//LOAD THE PARAMETER VALUE (first component: TIM)
     594:	e1a01000 	mov	r1, r0
AND R2, R1, #0x00000001				//get the bit0
     598:	e2012001 	and	r2, r1, #1
CMP R2, #0x00000001
     59c:	e3520001 	cmp	r2, #1
LDREQ R3,=TIM0
     5a0:	059f3094 	ldreq	r3, [pc, #148]	; 63c <SET_F_S+0x8>
BEQ READS
     5a4:	0a00000b 	beq	5d8 <READS>
AND R2, R1, #0x00000002				//get the bit1
     5a8:	e2012002 	and	r2, r1, #2
CMP R2, #0x00000002	
     5ac:	e3520002 	cmp	r2, #2
LDREQ R3,=TIM1
     5b0:	059f3088 	ldreq	r3, [pc, #136]	; 640 <SET_F_S+0xc>
BEQ READS
     5b4:	0a000007 	beq	5d8 <READS>
AND R2, R1, #0x00000004				//get the bit2
     5b8:	e2012004 	and	r2, r1, #4
CMP R2, #0x00000004
     5bc:	e3520004 	cmp	r2, #4
LDREQ R3,=TIM2
     5c0:	059f307c 	ldreq	r3, [pc, #124]	; 644 <SET_F_S+0x10>
BEQ READS
     5c4:	0a000003 	beq	5d8 <READS>
AND R2, R1, #0x00000008				//get the bit3
     5c8:	e2012008 	and	r2, r1, #8
CMP R2, #0x00000008
     5cc:	e3520008 	cmp	r2, #8
LDREQ R3,=TIM3
     5d0:	059f3070 	ldreq	r3, [pc, #112]	; 648 <SET_F_S+0x14>
BEQ READS
     5d4:	0affffff 	beq	5d8 <READS>

000005d8 <READS>:
READS:
LDR R4, [R3, #16]					//R4 is the interrupt signal value
     5d8:	e5934010 	ldr	r4, [r3, #16]
AND R0, R4, #1
     5dc:	e2040001 	and	r0, r4, #1
//POP {R1-R4}
BX LR
     5e0:	e12fff1e 	bx	lr

000005e4 <HPS_TIM_clear_INT_ASM>:


HPS_TIM_clear_INT_ASM:
PUSH {LR}
     5e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
//PUSH {R1-R10}
MOV R1, R0
     5e8:	e1a01000 	mov	r1, r0
AND R2, R1, #0x00000001				//get the bit0
     5ec:	e2012001 	and	r2, r1, #1
CMP R2, #0x00000001					//check whether bit0 is
     5f0:	e3520001 	cmp	r2, #1
LDREQ R3, =TIM0
     5f4:	059f3040 	ldreq	r3, [pc, #64]	; 63c <SET_F_S+0x8>
BLEQ SET_F_S
     5f8:	0b00000d 	bleq	634 <SET_F_S>
AND R2, R1, #0x00000002				//get the bit1
     5fc:	e2012002 	and	r2, r1, #2
CMP R2, #0x00000002					//check whether bit1 is 1
     600:	e3520002 	cmp	r2, #2
LDREQ R3, =TIM1
     604:	059f3034 	ldreq	r3, [pc, #52]	; 640 <SET_F_S+0xc>
BLEQ SET_F_S
     608:	0b000009 	bleq	634 <SET_F_S>
AND R2, R1, #0x00000004				//get the bit 2
     60c:	e2012004 	and	r2, r1, #4
CMP R2, #0x00000004					//check whether bit2 is 1
     610:	e3520004 	cmp	r2, #4
LDREQ R3, =TIM2
     614:	059f3028 	ldreq	r3, [pc, #40]	; 644 <SET_F_S+0x10>
BLEQ SET_F_S
     618:	0b000005 	bleq	634 <SET_F_S>
AND R2, R1, #0x00000008				//get the bit 3
     61c:	e2012008 	and	r2, r1, #8
CMP R2, #0x00000008					//check whether bit3 is 1
     620:	e3520008 	cmp	r2, #8
LDREQ R3, =TIM3
     624:	059f301c 	ldreq	r3, [pc, #28]	; 648 <SET_F_S+0x14>
BLEQ SET_F_S
     628:	0b000001 	bleq	634 <SET_F_S>
//POP {R1-R10}
POP {LR}
     62c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
BX LR
     630:	e12fff1e 	bx	lr

00000634 <SET_F_S>:
SET_F_S:
LDR R4, [R3, #12]
     634:	e593400c 	ldr	r4, [r3, #12]
BX LR
     638:	e12fff1e 	bx	lr
PUSH {LR}
//PUSH {R1-R8}
LDR R1,[R0]
AND R2, R1, #0x00000001				//get the bit0
CMP R2, #0x00000001					//check whether bit0 is
LDREQ R3, =TIM0
     63c:	ffc08000 	.word	0xffc08000
MOVEQ R8, #100
BLEQ SET
AND R2, R1, #0x00000002				//get the bit1
CMP R2, #0x00000002					//check whether bit1 is 1
LDREQ R3, =TIM1
     640:	ffc09000 	.word	0xffc09000
MOVEQ R8, #100
BLEQ SET
AND R2, R1, #0x00000004				//get the bit 2
CMP R2, #0x00000004					//check whether bit2 is 1
LDREQ R3, =TIM2
     644:	ffd00000 	.word	0xffd00000
MOVEQ R8, #25
BLEQ SET
AND R2, R1, #0x00000008				//get the bit 3
CMP R2, #0x00000008					//check whether bit3 is 1
LDREQ R3, =TIM3
     648:	ffc01000 	.word	0xffc01000

0000064c <read_LEDs_ASM>:
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
     64c:	e59f1010 	ldr	r1, [pc, #16]	; 664 <write_LEDs_ASM+0xc>
LDR R0, [R1]
     650:	e5910000 	ldr	r0, [r1]
BX LR
     654:	e12fff1e 	bx	lr

00000658 <write_LEDs_ASM>:
write_LEDs_ASM:
LDR R1, =SW_BASE
     658:	e59f1004 	ldr	r1, [pc, #4]	; 664 <write_LEDs_ASM+0xc>
STR R0, [R1]
     65c:	e5810000 	str	r0, [r1]
BX LR
     660:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
     664:	ff200000 	.word	0xff200000

00000668 <read_PB_data_ASM>:
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecap_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
     668:	e59f1174 	ldr	r1, [pc, #372]	; 7e4 <STORE_INTERRUPT_DISABLE+0x8>
LDR R0, [R1]
     66c:	e5910000 	ldr	r0, [r1]
BX LR
     670:	e12fff1e 	bx	lr

00000674 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
//R0 parameter from C
LDR R1, =PUSHBUTTON_BASE
     674:	e59f1168 	ldr	r1, [pc, #360]	; 7e4 <STORE_INTERRUPT_DISABLE+0x8>
LDR R2, [R1]			//value of the data register
     678:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
     67c:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
     680:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
     684:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     688:	03a00001 	moveq	r0, #1
BXEQ LR
     68c:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
     690:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
     694:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     698:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
     69c:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     6a0:	03a00001 	moveq	r0, #1
BXEQ LR
     6a4:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
     6a8:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
     6ac:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
     6b0:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
     6b4:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     6b8:	03a00001 	moveq	r0, #1
BXEQ LR
     6bc:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
     6c0:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
     6c4:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     6c8:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
     6cc:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     6d0:	03a00001 	moveq	r0, #1
BXEQ LR
     6d4:	012fff1e 	bxeq	lr

MOV R0, #0
     6d8:	e3a00000 	mov	r0, #0
BX LR
     6dc:	e12fff1e 	bx	lr

000006e0 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
     6e0:	e59f1100 	ldr	r1, [pc, #256]	; 7e8 <STORE_INTERRUPT_DISABLE+0xc>
LDR R0, [R1]
     6e4:	e5910000 	ldr	r0, [r1]
BX LR
     6e8:	e12fff1e 	bx	lr

000006ec <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
     6ec:	e59f10f4 	ldr	r1, [pc, #244]	; 7e8 <STORE_INTERRUPT_DISABLE+0xc>
LDR R2, [R1]			//value of edge register
     6f0:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
     6f4:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
     6f8:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
     6fc:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     700:	03a00001 	moveq	r0, #1
BXEQ LR
     704:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
     708:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
     70c:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     710:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
     714:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     718:	03a00001 	moveq	r0, #1
BXEQ LR
     71c:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
     720:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
     724:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
     728:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
     72c:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     730:	03a00001 	moveq	r0, #1
BXEQ LR
     734:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
     738:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
     73c:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     740:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
     744:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     748:	03a00001 	moveq	r0, #1
BXEQ LR
     74c:	012fff1e 	bxeq	lr

MOV R0, #0
     750:	e3a00000 	mov	r0, #0

BX LR
     754:	e12fff1e 	bx	lr

00000758 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
//R0 PARAMETER FROM C
LDR R1, =PUSHBUTTON_EDGECAPTURE
     758:	e59f1088 	ldr	r1, [pc, #136]	; 7e8 <STORE_INTERRUPT_DISABLE+0xc>
MOV R5, #0
     75c:	e3a05000 	mov	r5, #0
STR R5, [R1]
     760:	e5815000 	str	r5, [r1]
BX LR
     764:	e12fff1e 	bx	lr

00000768 <enable_PB_INT_ASM>:


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
     768:	e59f107c 	ldr	r1, [pc, #124]	; 7ec <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
     76c:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
     770:	e3a04003 	mov	r4, #3
MOV R5, #0x0000000F		//mask
     774:	e3a0500f 	mov	r5, #15

00000778 <LOOP_ENABLE_INT>:
LOOP_ENABLE_INT:
SUBS R4, R4, #1			//update counter
     778:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_ENABLE
     77c:	ba000006 	blt	79c <STORE_INTERRUPT_ENABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
     780:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
     784:	e3530001 	cmp	r3, #1
ORREQ R2, R2, R5		//modify the value
     788:	01822005 	orreq	r2, r2, r5
MOV R6, #2
     78c:	e3a06002 	mov	r6, #2
MUL R5, R5, R6			//update the mask for the next iteration
     790:	e0050695 	mul	r5, r5, r6
LSR R0, #1
     794:	e1a000a0 	lsr	r0, r0, #1
B LOOP_ENABLE_INT
     798:	eafffff6 	b	778 <LOOP_ENABLE_INT>

0000079c <STORE_INTERRUPT_ENABLE>:
STORE_INTERRUPT_ENABLE:
STR R2, [R1]
     79c:	e5812000 	str	r2, [r1]
BX LR
     7a0:	e12fff1e 	bx	lr

000007a4 <disable_PB_INT_ASM>:


disable_PB_INT_ASM:
LDR R1, =PUSHBUTTON_INTERRUPTION
     7a4:	e59f1040 	ldr	r1, [pc, #64]	; 7ec <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
     7a8:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
     7ac:	e3a04003 	mov	r4, #3
MOV R5, #0xFFFFFFF0		//mask
     7b0:	e3e0500f 	mvn	r5, #15

000007b4 <LOOP_DISABLE_INT>:
LOOP_DISABLE_INT:
SUBS R4, R4, #1			//update counter
     7b4:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_DISABLE
     7b8:	ba000007 	blt	7dc <STORE_INTERRUPT_DISABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
     7bc:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
     7c0:	e3530001 	cmp	r3, #1
ANDEQ R2, R2, R5		//modify the value
     7c4:	00022005 	andeq	r2, r2, r5
MOV R6, #2
     7c8:	e3a06002 	mov	r6, #2
MOV R7, #15
     7cc:	e3a0700f 	mov	r7, #15
MLA R5, R5, R6, R7		//update the mask for the next iteration
     7d0:	e0257695 	mla	r5, r5, r6, r7
LSR R0, #1
     7d4:	e1a000a0 	lsr	r0, r0, #1
B LOOP_DISABLE_INT
     7d8:	eafffff5 	b	7b4 <LOOP_DISABLE_INT>

000007dc <STORE_INTERRUPT_DISABLE>:
STORE_INTERRUPT_DISABLE:
STR R2, [R1]
     7dc:	e5812000 	str	r2, [r1]
BX LR
     7e0:	e12fff1e 	bx	lr
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecap_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
     7e4:	ff200050 	.word	0xff200050

MOV R0, #0
BX LR

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
     7e8:	ff20005c 	.word	0xff20005c
BX LR


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
     7ec:	ff200058 	.word	0xff200058

000007f0 <read_slider_switches_ASM>:
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
     7f0:	e59f1004 	ldr	r1, [pc, #4]	; 7fc <read_slider_switches_ASM+0xc>
LDR R0, [R1]
     7f4:	e5910000 	ldr	r0, [r1]
BX LR
     7f8:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
     7fc:	ff200040 	.word	0xff200040

00000800 <hps_tim0_int_flag>:
     800:	00000000 	.word	0x00000000

00000804 <pb_int_flag>:
     804:	00000000 	.word	0x00000000

00000808 <A9_PRIV_TIM_ISR>:

pb_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     808:	e12fff1e 	bx	lr

0000080c <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     80c:	e12fff1e 	bx	lr

00000810 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:						 
	push {LR}				
     810:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     814:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM		
     818:	ebffff71 	bl	5e4 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag 		
     81c:	e59f0054 	ldr	r0, [pc, #84]	; 878 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1					
     820:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     824:	e5801000 	str	r1, [r0]

	POP	{LR}
     828:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     82c:	e12fff1e 	bx	lr

00000830 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     830:	e12fff1e 	bx	lr

00000834 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     834:	e12fff1e 	bx	lr

00000838 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     838:	e12fff1e 	bx	lr

0000083c <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     83c:	e12fff1e 	bx	lr

00000840 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:					
	PUSH {LR}
     840:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	BL read_PB_edgecap_ASM			
     844:	ebffffa5 	bl	6e0 <read_PB_edgecap_ASM>
	
	LDR R1, =pb_int_flag
     848:	e59f102c 	ldr	r1, [pc, #44]	; 87c <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]					
     84c:	e5810000 	str	r0, [r1]
	
	BL PB_clear_edgecap_ASM	
     850:	ebffffc0 	bl	758 <PB_clear_edgecap_ASM>
	POP {LR}
     854:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     858:	e12fff1e 	bx	lr

0000085c <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     85c:	e12fff1e 	bx	lr

00000860 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     860:	e12fff1e 	bx	lr

00000864 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     864:	e12fff1e 	bx	lr

00000868 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     868:	e12fff1e 	bx	lr

0000086c <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     86c:	e12fff1e 	bx	lr

00000870 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     870:	e12fff1e 	bx	lr

00000874 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     874:	e12fff1e 	bx	lr
	push {LR}				
	
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM		

	LDR R0, =hps_tim0_int_flag 		
     878:	00000800 	.word	0x00000800
	
FPGA_PB_KEYS_ISR:					
	PUSH {LR}
	BL read_PB_edgecap_ASM			
	
	LDR R1, =pb_int_flag
     87c:	00000804 	.word	0x00000804

00000880 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     880:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     884:	e28db000 	add	r11, sp, #0
     888:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     88c:	e3a030d3 	mov	r3, #211	; 0xd3
     890:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     894:	e51b3008 	ldr	r3, [r11, #-8]
     898:	e129f003 	msr	CPSR_fc, r3
}
     89c:	e28bd000 	add	sp, r11, #0
     8a0:	e8bd0800 	ldmfd	sp!, {r11}
     8a4:	e12fff1e 	bx	lr

000008a8 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     8a8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     8ac:	e28db000 	add	r11, sp, #0
     8b0:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     8b4:	e3a03053 	mov	r3, #83	; 0x53
     8b8:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     8bc:	e51b3008 	ldr	r3, [r11, #-8]
     8c0:	e129f003 	msr	CPSR_fc, r3
}
     8c4:	e28bd000 	add	sp, r11, #0
     8c8:	e8bd0800 	ldmfd	sp!, {r11}
     8cc:	e12fff1e 	bx	lr

000008d0 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     8d0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     8d4:	e28db000 	add	r11, sp, #0
     8d8:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     8dc:	e3e03007 	mvn	r3, #7
     8e0:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     8e4:	e3a030d2 	mov	r3, #210	; 0xd2
     8e8:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     8ec:	e51b300c 	ldr	r3, [r11, #-12]
     8f0:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     8f4:	e51b3008 	ldr	r3, [r11, #-8]
     8f8:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     8fc:	e3a030d3 	mov	r3, #211	; 0xd3
     900:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     904:	e51b300c 	ldr	r3, [r11, #-12]
     908:	e129f003 	msr	CPSR_fc, r3
}
     90c:	e28bd000 	add	sp, r11, #0
     910:	e8bd0800 	ldmfd	sp!, {r11}
     914:	e12fff1e 	bx	lr

00000918 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     918:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     91c:	e28db000 	add	r11, sp, #0
     920:	e24dd01c 	sub	sp, sp, #28
     924:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     928:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     92c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     930:	e1a031c3 	asr	r3, r3, #3
     934:	e3c33003 	bic	r3, r3, #3
     938:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     93c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     940:	e203301f 	and	r3, r3, #31
     944:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     948:	e3a02001 	mov	r2, #1
     94c:	e51b300c 	ldr	r3, [r11, #-12]
     950:	e1a03312 	lsl	r3, r2, r3
     954:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     958:	e51b3008 	ldr	r3, [r11, #-8]
     95c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     960:	e2433c03 	sub	r3, r3, #768	; 0x300
     964:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     968:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     96c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     970:	e5921000 	ldr	r1, [r2]
     974:	e51b2010 	ldr	r2, [r11, #-16]
     978:	e1812002 	orr	r2, r1, r2
     97c:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     980:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     984:	e3c33003 	bic	r3, r3, #3
     988:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     98c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     990:	e2033003 	and	r3, r3, #3
     994:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     998:	e51b2008 	ldr	r2, [r11, #-8]
     99c:	e51b300c 	ldr	r3, [r11, #-12]
     9a0:	e0823003 	add	r3, r2, r3
     9a4:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     9a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     9ac:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     9b0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     9b4:	e6ef2072 	uxtb	r2, r2
     9b8:	e5c32000 	strb	r2, [r3]
}
     9bc:	e28bd000 	add	sp, r11, #0
     9c0:	e8bd0800 	ldmfd	sp!, {r11}
     9c4:	e12fff1e 	bx	lr

000009c8 <config_GIC>:

void config_GIC(int len, int* IDs) {
     9c8:	e92d4800 	push	{r11, lr}
     9cc:	e28db004 	add	r11, sp, #4
     9d0:	e24dd010 	sub	sp, sp, #16
     9d4:	e50b0010 	str	r0, [r11, #-16]
     9d8:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     9dc:	e3a03000 	mov	r3, #0
     9e0:	e50b3008 	str	r3, [r11, #-8]
     9e4:	ea00000a 	b	a14 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     9e8:	e51b3008 	ldr	r3, [r11, #-8]
     9ec:	e1a03103 	lsl	r3, r3, #2
     9f0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     9f4:	e0823003 	add	r3, r2, r3
     9f8:	e5933000 	ldr	r3, [r3]
     9fc:	e1a00003 	mov	r0, r3
     a00:	e3a01001 	mov	r1, #1
     a04:	ebffffc3 	bl	918 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     a08:	e51b3008 	ldr	r3, [r11, #-8]
     a0c:	e2833001 	add	r3, r3, #1
     a10:	e50b3008 	str	r3, [r11, #-8]
     a14:	e51b2008 	ldr	r2, [r11, #-8]
     a18:	e51b3010 	ldr	r3, [r11, #-16]
     a1c:	e1520003 	cmp	r2, r3
     a20:	bafffff0 	blt	9e8 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     a24:	e30c3104 	movw	r3, #49412	; 0xc104
     a28:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a2c:	e30f2fff 	movw	r2, #65535	; 0xffff
     a30:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     a34:	e3a03cc1 	mov	r3, #49408	; 0xc100
     a38:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a3c:	e3a02001 	mov	r2, #1
     a40:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     a44:	e3a03a0d 	mov	r3, #53248	; 0xd000
     a48:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a4c:	e3a02001 	mov	r2, #1
     a50:	e5832000 	str	r2, [r3]
}
     a54:	e24bd004 	sub	sp, r11, #4
     a58:	e8bd8800 	pop	{r11, pc}

00000a5c <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     a5c:	e24ee004 	sub	lr, lr, #4
     a60:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     a64:	e28db018 	add	r11, sp, #24
     a68:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     a6c:	e30c310c 	movw	r3, #49420	; 0xc10c
     a70:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a74:	e5933000 	ldr	r3, [r3]
     a78:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     a7c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     a80:	e3530053 	cmp	r3, #83	; 0x53
     a84:	0a00003d 	beq	b80 <__cs3_isr_irq+0x124>
     a88:	e3530053 	cmp	r3, #83	; 0x53
     a8c:	ca000011 	bgt	ad8 <__cs3_isr_irq+0x7c>
     a90:	e353004e 	cmp	r3, #78	; 0x4e
     a94:	0a000031 	beq	b60 <__cs3_isr_irq+0x104>
     a98:	e353004e 	cmp	r3, #78	; 0x4e
     a9c:	ca000006 	bgt	abc <__cs3_isr_irq+0x60>
     aa0:	e3530048 	cmp	r3, #72	; 0x48
     aa4:	0a000029 	beq	b50 <__cs3_isr_irq+0xf4>
     aa8:	e3530049 	cmp	r3, #73	; 0x49
     aac:	0a000029 	beq	b58 <__cs3_isr_irq+0xfc>
     ab0:	e353001d 	cmp	r3, #29
     ab4:	0a000019 	beq	b20 <__cs3_isr_irq+0xc4>
     ab8:	ea000036 	b	b98 <__cs3_isr_irq+0x13c>
     abc:	e3530050 	cmp	r3, #80	; 0x50
     ac0:	0a00002a 	beq	b70 <__cs3_isr_irq+0x114>
     ac4:	e3530050 	cmp	r3, #80	; 0x50
     ac8:	ba000026 	blt	b68 <__cs3_isr_irq+0x10c>
     acc:	e3530051 	cmp	r3, #81	; 0x51
     ad0:	0a000028 	beq	b78 <__cs3_isr_irq+0x11c>
     ad4:	ea00002f 	b	b98 <__cs3_isr_irq+0x13c>
     ad8:	e35300c7 	cmp	r3, #199	; 0xc7
     adc:	0a000013 	beq	b30 <__cs3_isr_irq+0xd4>
     ae0:	e35300c7 	cmp	r3, #199	; 0xc7
     ae4:	ca000006 	bgt	b04 <__cs3_isr_irq+0xa8>
     ae8:	e3530059 	cmp	r3, #89	; 0x59
     aec:	0a000027 	beq	b90 <__cs3_isr_irq+0x134>
     af0:	e35300c5 	cmp	r3, #197	; 0xc5
     af4:	0a00000b 	beq	b28 <__cs3_isr_irq+0xcc>
     af8:	e3530054 	cmp	r3, #84	; 0x54
     afc:	0a000021 	beq	b88 <__cs3_isr_irq+0x12c>
     b00:	ea000024 	b	b98 <__cs3_isr_irq+0x13c>
     b04:	e35300c9 	cmp	r3, #201	; 0xc9
     b08:	0a00000c 	beq	b40 <__cs3_isr_irq+0xe4>
     b0c:	e35300c9 	cmp	r3, #201	; 0xc9
     b10:	ba000008 	blt	b38 <__cs3_isr_irq+0xdc>
     b14:	e35300ca 	cmp	r3, #202	; 0xca
     b18:	0a00000a 	beq	b48 <__cs3_isr_irq+0xec>
     b1c:	ea00001d 	b	b98 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     b20:	ebffff38 	bl	808 <A9_PRIV_TIM_ISR>
     b24:	ea00001c 	b	b9c <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     b28:	ebffff37 	bl	80c <HPS_GPIO1_ISR>
     b2c:	ea00001a 	b	b9c <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     b30:	ebffff36 	bl	810 <HPS_TIM0_ISR>
     b34:	ea000018 	b	b9c <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     b38:	ebffff3c 	bl	830 <HPS_TIM1_ISR>
     b3c:	ea000016 	b	b9c <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     b40:	ebffff3b 	bl	834 <HPS_TIM2_ISR>
     b44:	ea000014 	b	b9c <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     b48:	ebffff3a 	bl	838 <HPS_TIM3_ISR>
     b4c:	ea000012 	b	b9c <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     b50:	ebffff39 	bl	83c <FPGA_INTERVAL_TIM_ISR>
     b54:	ea000010 	b	b9c <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     b58:	ebffff38 	bl	840 <FPGA_PB_KEYS_ISR>
     b5c:	ea00000e 	b	b9c <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     b60:	ebffff3d 	bl	85c <FPGA_Audio_ISR>
     b64:	ea00000c 	b	b9c <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     b68:	ebffff3c 	bl	860 <FPGA_PS2_ISR>
     b6c:	ea00000a 	b	b9c <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     b70:	ebffff3b 	bl	864 <FPGA_JTAG_ISR>
     b74:	ea000008 	b	b9c <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     b78:	ebffff3a 	bl	868 <FPGA_IrDA_ISR>
     b7c:	ea000006 	b	b9c <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     b80:	ebffff39 	bl	86c <FPGA_JP1_ISR>
     b84:	ea000004 	b	b9c <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     b88:	ebffff38 	bl	870 <FPGA_JP2_ISR>
     b8c:	ea000002 	b	b9c <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     b90:	ebffff37 	bl	874 <FPGA_PS2_DUAL_ISR>
     b94:	ea000000 	b	b9c <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     b98:	eafffffe 	b	b98 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     b9c:	e30c3110 	movw	r3, #49424	; 0xc110
     ba0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ba4:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     ba8:	e5832000 	str	r2, [r3]
}
     bac:	e24bd018 	sub	sp, r11, #24
     bb0:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000bb4 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     bb4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bb8:	e28db000 	add	r11, sp, #0
	while(1);
     bbc:	eafffffe 	b	bbc <__cs3_reset+0x8>

00000bc0 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     bc0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bc4:	e28db000 	add	r11, sp, #0
	while(1);
     bc8:	eafffffe 	b	bc8 <__cs3_isr_undef+0x8>

00000bcc <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     bcc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bd0:	e28db000 	add	r11, sp, #0
	while(1);
     bd4:	eafffffe 	b	bd4 <__cs3_isr_swi+0x8>

00000bd8 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     bd8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bdc:	e28db000 	add	r11, sp, #0
	while(1);
     be0:	eafffffe 	b	be0 <__cs3_isr_pabort+0x8>

00000be4 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     be4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     be8:	e28db000 	add	r11, sp, #0
	while(1);
     bec:	eafffffe 	b	bec <__cs3_isr_dabort+0x8>

00000bf0 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     bf0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bf4:	e28db000 	add	r11, sp, #0
	while(1);
     bf8:	eafffffe 	b	bf8 <__cs3_isr_fiq+0x8>

00000bfc <fix_bug>:
}

void fix_bug() {
     bfc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     c00:	e28db000 	add	r11, sp, #0
     c04:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     c08:	e30d3198 	movw	r3, #53656	; 0xd198
     c0c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c10:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     c14:	e51b3008 	ldr	r3, [r11, #-8]
     c18:	e3a02703 	mov	r2, #786432	; 0xc0000
     c1c:	e5832000 	str	r2, [r3]
}
     c20:	e28bd000 	add	sp, r11, #0
     c24:	e8bd0800 	ldmfd	sp!, {r11}
     c28:	e12fff1e 	bx	lr

00000c2c <int_setup>:

void int_setup(int len, int* IDs) {
     c2c:	e92d4800 	push	{r11, lr}
     c30:	e28db004 	add	r11, sp, #4
     c34:	e24dd008 	sub	sp, sp, #8
     c38:	e50b0008 	str	r0, [r11, #-8]
     c3c:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     c40:	ebffff0e 	bl	880 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     c44:	ebffff21 	bl	8d0 <set_A9_IRQ_stack>
	fix_bug();
     c48:	ebffffeb 	bl	bfc <fix_bug>
	config_GIC(len, IDs);
     c4c:	e51b0008 	ldr	r0, [r11, #-8]
     c50:	e51b100c 	ldr	r1, [r11, #-12]
     c54:	ebffff5b 	bl	9c8 <config_GIC>
	enable_A9_interrupts();
     c58:	ebffff12 	bl	8a8 <enable_A9_interrupts>
}
     c5c:	e24bd004 	sub	sp, r11, #4
     c60:	e8bd8800 	pop	{r11, pc}

00000c64 <main>:
#include <stdio.h>
#include "./drivers/inc/LEDs.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"

int main(){
     c64:	e92d4800 	push	{r11, lr}
     c68:	e28db004 	add	r11, sp, #4
     c6c:	e24dd010 	sub	sp, sp, #16
	while(1){
		int switchStatus = read_slider_switches_ASM();
     c70:	ebfffede 	bl	7f0 <read_slider_switches_ASM>
     c74:	e50b000c 	str	r0, [r11, #-12]
		write_LEDs_ASM(switchStatus);		//MAP THE SWITCH TO THE LED
     c78:	e51b000c 	ldr	r0, [r11, #-12]
     c7c:	ebfffe75 	bl	658 <write_LEDs_ASM>
		
		if (switchStatus == 0x200)
     c80:	e51b300c 	ldr	r3, [r11, #-12]
     c84:	e3530c02 	cmp	r3, #512	; 0x200
     c88:	1a000002 	bne	c98 <main+0x34>
		{
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
     c8c:	e3a0003f 	mov	r0, #63	; 0x3f
     c90:	ebfffd71 	bl	25c <HEX_clear_ASM>

			HEX_flood_ASM(HEX4 | HEX5);
			int pushButtonStatus = read_PB_data_ASM();
			HEX_write_ASM(pushButtonStatus, hexValue);
		}
	}
     c94:	eafffff5 	b	c70 <main+0xc>
		}
		else 
		{
			//HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3);
			char hexValue;
			switch (switchStatus) 
     c98:	e51b300c 	ldr	r3, [r11, #-12]
     c9c:	e353000f 	cmp	r3, #15
     ca0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     ca4:	ea00003f 	b	da8 <main+0x144>
     ca8:	00000ce8 	.word	0x00000ce8
     cac:	00000cf4 	.word	0x00000cf4
     cb0:	00000d00 	.word	0x00000d00
     cb4:	00000d0c 	.word	0x00000d0c
     cb8:	00000d18 	.word	0x00000d18
     cbc:	00000d24 	.word	0x00000d24
     cc0:	00000d30 	.word	0x00000d30
     cc4:	00000d3c 	.word	0x00000d3c
     cc8:	00000d48 	.word	0x00000d48
     ccc:	00000d54 	.word	0x00000d54
     cd0:	00000d60 	.word	0x00000d60
     cd4:	00000d6c 	.word	0x00000d6c
     cd8:	00000d78 	.word	0x00000d78
     cdc:	00000d84 	.word	0x00000d84
     ce0:	00000d90 	.word	0x00000d90
     ce4:	00000d9c 	.word	0x00000d9c
			{
				case 0:
					hexValue = '0';
     ce8:	e3a03030 	mov	r3, #48	; 0x30
     cec:	e54b3005 	strb	r3, [r11, #-5]
					break;
     cf0:	ea00002c 	b	da8 <main+0x144>
				case 1:
					hexValue = '1';
     cf4:	e3a03031 	mov	r3, #49	; 0x31
     cf8:	e54b3005 	strb	r3, [r11, #-5]
					break;
     cfc:	ea000029 	b	da8 <main+0x144>
				case 2:
					hexValue = '2';
     d00:	e3a03032 	mov	r3, #50	; 0x32
     d04:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d08:	ea000026 	b	da8 <main+0x144>
				case 3:
					hexValue = '3';
     d0c:	e3a03033 	mov	r3, #51	; 0x33
     d10:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d14:	ea000023 	b	da8 <main+0x144>
				case 4:
					hexValue = '4';
     d18:	e3a03034 	mov	r3, #52	; 0x34
     d1c:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d20:	ea000020 	b	da8 <main+0x144>
				case 5:
					hexValue = '5';
     d24:	e3a03035 	mov	r3, #53	; 0x35
     d28:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d2c:	ea00001d 	b	da8 <main+0x144>
				case 6:
					hexValue = '6';
     d30:	e3a03036 	mov	r3, #54	; 0x36
     d34:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d38:	ea00001a 	b	da8 <main+0x144>
				case 7:
					hexValue = '7';
     d3c:	e3a03037 	mov	r3, #55	; 0x37
     d40:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d44:	ea000017 	b	da8 <main+0x144>
				case 8:
					hexValue = '8';
     d48:	e3a03038 	mov	r3, #56	; 0x38
     d4c:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d50:	ea000014 	b	da8 <main+0x144>
				case 9:
					hexValue = '9';
     d54:	e3a03039 	mov	r3, #57	; 0x39
     d58:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d5c:	ea000011 	b	da8 <main+0x144>
				case 10:
					hexValue = 'A';
     d60:	e3a03041 	mov	r3, #65	; 0x41
     d64:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d68:	ea00000e 	b	da8 <main+0x144>
				case 11:
					hexValue = 'B';
     d6c:	e3a03042 	mov	r3, #66	; 0x42
     d70:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d74:	ea00000b 	b	da8 <main+0x144>
				case 12:
					hexValue = 'C';
     d78:	e3a03043 	mov	r3, #67	; 0x43
     d7c:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d80:	ea000008 	b	da8 <main+0x144>
				case 13:
					hexValue = 'D';
     d84:	e3a03044 	mov	r3, #68	; 0x44
     d88:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d8c:	ea000005 	b	da8 <main+0x144>
				case 14:
					hexValue = 'E';
     d90:	e3a03045 	mov	r3, #69	; 0x45
     d94:	e54b3005 	strb	r3, [r11, #-5]
					break;
     d98:	ea000002 	b	da8 <main+0x144>
				case 15:
					hexValue = 'F';
     d9c:	e3a03046 	mov	r3, #70	; 0x46
     da0:	e54b3005 	strb	r3, [r11, #-5]
					break;
     da4:	e1a00000 	nop			; (mov r0, r0)
				//default:
				//	hexValue = '';
			}

			HEX_flood_ASM(HEX4 | HEX5);
     da8:	e3a00030 	mov	r0, #48	; 0x30
     dac:	ebfffd4e 	bl	2ec <HEX_flood_ASM>
			int pushButtonStatus = read_PB_data_ASM();
     db0:	ebfffe2c 	bl	668 <read_PB_data_ASM>
     db4:	e50b0010 	str	r0, [r11, #-16]
			HEX_write_ASM(pushButtonStatus, hexValue);
     db8:	e51b3010 	ldr	r3, [r11, #-16]
     dbc:	e6ef2073 	uxtb	r2, r3
     dc0:	e55b3005 	ldrb	r3, [r11, #-5]
     dc4:	e1a00002 	mov	r0, r2
     dc8:	e1a01003 	mov	r1, r3
     dcc:	ebfffd6a 	bl	37c <HEX_write_ASM>
		}
	}
     dd0:	eaffffa6 	b	c70 <main+0xc>

00000dd4 <atexit>:
     dd4:	e1a01000 	mov	r1, r0
     dd8:	e3a00000 	mov	r0, #0
     ddc:	e92d4008 	push	{r3, lr}
     de0:	e1a02000 	mov	r2, r0
     de4:	e1a03000 	mov	r3, r0
     de8:	eb00000e 	bl	e28 <__register_exitproc>
     dec:	e8bd4008 	pop	{r3, lr}
     df0:	e12fff1e 	bx	lr

00000df4 <exit>:
     df4:	e92d4008 	push	{r3, lr}
     df8:	e3a01000 	mov	r1, #0
     dfc:	e1a04000 	mov	r4, r0
     e00:	eb000045 	bl	f1c <__call_exitprocs>
     e04:	e59f3018 	ldr	r3, [pc, #24]	; e24 <exit+0x30>
     e08:	e5930000 	ldr	r0, [r3]
     e0c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     e10:	e3530000 	cmp	r3, #0
     e14:	11a0e00f 	movne	lr, pc
     e18:	112fff13 	bxne	r3
     e1c:	e1a00004 	mov	r0, r4
     e20:	eb0000c9 	bl	114c <_exit>
     e24:	000011f4 	.word	0x000011f4

00000e28 <__register_exitproc>:
     e28:	e59fc0e4 	ldr	r12, [pc, #228]	; f14 <__register_exitproc+0xec>
     e2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     e30:	e59c4000 	ldr	r4, [r12]
     e34:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     e38:	e35c0000 	cmp	r12, #0
     e3c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     e40:	e59c5004 	ldr	r5, [r12, #4]
     e44:	0584c148 	streq	r12, [r4, #328]	; 0x148
     e48:	e355001f 	cmp	r5, #31
     e4c:	e24dd010 	sub	sp, sp, #16
     e50:	e1a06000 	mov	r6, r0
     e54:	da000015 	ble	eb0 <__register_exitproc+0x88>
     e58:	e59f00b8 	ldr	r0, [pc, #184]	; f18 <__register_exitproc+0xf0>
     e5c:	e3500000 	cmp	r0, #0
     e60:	1a000001 	bne	e6c <__register_exitproc+0x44>
     e64:	e3e00000 	mvn	r0, #0
     e68:	ea000018 	b	ed0 <__register_exitproc+0xa8>
     e6c:	e3a00e19 	mov	r0, #400	; 0x190
     e70:	e58d100c 	str	r1, [sp, #12]
     e74:	e58d2008 	str	r2, [sp, #8]
     e78:	e58d3004 	str	r3, [sp, #4]
     e7c:	e320f000 	nop	{0}
     e80:	e250c000 	subs	r12, r0, #0
     e84:	e59d100c 	ldr	r1, [sp, #12]
     e88:	e59d2008 	ldr	r2, [sp, #8]
     e8c:	e59d3004 	ldr	r3, [sp, #4]
     e90:	0afffff3 	beq	e64 <__register_exitproc+0x3c>
     e94:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     e98:	e3a00000 	mov	r0, #0
     e9c:	e58c0004 	str	r0, [r12, #4]
     ea0:	e58c5000 	str	r5, [r12]
     ea4:	e584c148 	str	r12, [r4, #328]	; 0x148
     ea8:	e58c0188 	str	r0, [r12, #392]	; 0x188
     eac:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     eb0:	e3560000 	cmp	r6, #0
     eb4:	e59c4004 	ldr	r4, [r12, #4]
     eb8:	1a000007 	bne	edc <__register_exitproc+0xb4>
     ebc:	e2843002 	add	r3, r4, #2
     ec0:	e2844001 	add	r4, r4, #1
     ec4:	e78c1103 	str	r1, [r12, r3, lsl #2]
     ec8:	e58c4004 	str	r4, [r12, #4]
     ecc:	e3a00000 	mov	r0, #0
     ed0:	e28dd010 	add	sp, sp, #16
     ed4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     ed8:	e12fff1e 	bx	lr
     edc:	e3a00001 	mov	r0, #1
     ee0:	e1a00410 	lsl	r0, r0, r4
     ee4:	e08c8104 	add	r8, r12, r4, lsl #2
     ee8:	e3560002 	cmp	r6, #2
     eec:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     ef0:	e5883108 	str	r3, [r8, #264]	; 0x108
     ef4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     ef8:	e1877000 	orr	r7, r7, r0
     efc:	01830000 	orreq	r0, r3, r0
     f00:	e1a05008 	mov	r5, r8
     f04:	e5882088 	str	r2, [r8, #136]	; 0x88
     f08:	e58c7188 	str	r7, [r12, #392]	; 0x188
     f0c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     f10:	eaffffe9 	b	ebc <__register_exitproc+0x94>
     f14:	000011f4 	.word	0x000011f4
     f18:	00000000 	.word	0x00000000

00000f1c <__call_exitprocs>:
     f1c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f20:	e59f3168 	ldr	r3, [pc, #360]	; 1090 <__call_exitprocs+0x174>
     f24:	e5933000 	ldr	r3, [r3]
     f28:	e24dd014 	sub	sp, sp, #20
     f2c:	e58d3004 	str	r3, [sp, #4]
     f30:	e2833f52 	add	r3, r3, #328	; 0x148
     f34:	e58d0008 	str	r0, [sp, #8]
     f38:	e58d300c 	str	r3, [sp, #12]
     f3c:	e1a07001 	mov	r7, r1
     f40:	e3a08001 	mov	r8, #1
     f44:	e59d3004 	ldr	r3, [sp, #4]
     f48:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     f4c:	e3560000 	cmp	r6, #0
     f50:	e59db00c 	ldr	r11, [sp, #12]
     f54:	0a000033 	beq	1028 <__call_exitprocs+0x10c>
     f58:	e5965004 	ldr	r5, [r6, #4]
     f5c:	e2554001 	subs	r4, r5, #1
     f60:	5286a088 	addpl	r10, r6, #136	; 0x88
     f64:	5285501f 	addpl	r5, r5, #31
     f68:	508a5105 	addpl	r5, r10, r5, lsl #2
     f6c:	5a000007 	bpl	f90 <__call_exitprocs+0x74>
     f70:	ea000029 	b	101c <__call_exitprocs+0x100>
     f74:	e5953000 	ldr	r3, [r5]
     f78:	e1530007 	cmp	r3, r7
     f7c:	0a000005 	beq	f98 <__call_exitprocs+0x7c>
     f80:	e2444001 	sub	r4, r4, #1
     f84:	e3740001 	cmn	r4, #1
     f88:	e2455004 	sub	r5, r5, #4
     f8c:	0a000022 	beq	101c <__call_exitprocs+0x100>
     f90:	e3570000 	cmp	r7, #0
     f94:	1afffff6 	bne	f74 <__call_exitprocs+0x58>
     f98:	e5963004 	ldr	r3, [r6, #4]
     f9c:	e06a2005 	rsb	r2, r10, r5
     fa0:	e2433001 	sub	r3, r3, #1
     fa4:	e0862002 	add	r2, r6, r2
     fa8:	e1530004 	cmp	r3, r4
     fac:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     fb0:	13a01000 	movne	r1, #0
     fb4:	05864004 	streq	r4, [r6, #4]
     fb8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     fbc:	e3530000 	cmp	r3, #0
     fc0:	0affffee 	beq	f80 <__call_exitprocs+0x64>
     fc4:	e1a02418 	lsl	r2, r8, r4
     fc8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     fcc:	e1120001 	tst	r2, r1
     fd0:	e5969004 	ldr	r9, [r6, #4]
     fd4:	0a000016 	beq	1034 <__call_exitprocs+0x118>
     fd8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     fdc:	e1120001 	tst	r2, r1
     fe0:	1a000016 	bne	1040 <__call_exitprocs+0x124>
     fe4:	e59d0008 	ldr	r0, [sp, #8]
     fe8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     fec:	e1a0e00f 	mov	lr, pc
     ff0:	e12fff13 	bx	r3
     ff4:	e5963004 	ldr	r3, [r6, #4]
     ff8:	e1530009 	cmp	r3, r9
     ffc:	1affffd0 	bne	f44 <__call_exitprocs+0x28>
    1000:	e59b3000 	ldr	r3, [r11]
    1004:	e1530006 	cmp	r3, r6
    1008:	1affffcd 	bne	f44 <__call_exitprocs+0x28>
    100c:	e2444001 	sub	r4, r4, #1
    1010:	e3740001 	cmn	r4, #1
    1014:	e2455004 	sub	r5, r5, #4
    1018:	1affffdc 	bne	f90 <__call_exitprocs+0x74>
    101c:	e59f1070 	ldr	r1, [pc, #112]	; 1094 <__call_exitprocs+0x178>
    1020:	e3510000 	cmp	r1, #0
    1024:	1a000009 	bne	1050 <__call_exitprocs+0x134>
    1028:	e28dd014 	add	sp, sp, #20
    102c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1030:	e12fff1e 	bx	lr
    1034:	e1a0e00f 	mov	lr, pc
    1038:	e12fff13 	bx	r3
    103c:	eaffffec 	b	ff4 <__call_exitprocs+0xd8>
    1040:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1044:	e1a0e00f 	mov	lr, pc
    1048:	e12fff13 	bx	r3
    104c:	eaffffe8 	b	ff4 <__call_exitprocs+0xd8>
    1050:	e5963004 	ldr	r3, [r6, #4]
    1054:	e3530000 	cmp	r3, #0
    1058:	e5963000 	ldr	r3, [r6]
    105c:	1a000008 	bne	1084 <__call_exitprocs+0x168>
    1060:	e3530000 	cmp	r3, #0
    1064:	0a000006 	beq	1084 <__call_exitprocs+0x168>
    1068:	e1a00006 	mov	r0, r6
    106c:	e58b3000 	str	r3, [r11]
    1070:	e320f000 	nop	{0}
    1074:	e59b6000 	ldr	r6, [r11]
    1078:	e3560000 	cmp	r6, #0
    107c:	1affffb5 	bne	f58 <__call_exitprocs+0x3c>
    1080:	eaffffe8 	b	1028 <__call_exitprocs+0x10c>
    1084:	e1a0b006 	mov	r11, r6
    1088:	e1a06003 	mov	r6, r3
    108c:	eafffff9 	b	1078 <__call_exitprocs+0x15c>
    1090:	000011f4 	.word	0x000011f4
    1094:	00000000 	.word	0x00000000

00001098 <register_fini>:
    1098:	e92d4008 	push	{r3, lr}
    109c:	e59f3010 	ldr	r3, [pc, #16]	; 10b4 <register_fini+0x1c>
    10a0:	e3530000 	cmp	r3, #0
    10a4:	159f000c 	ldrne	r0, [pc, #12]	; 10b8 <register_fini+0x20>
    10a8:	1bffff49 	blne	dd4 <atexit>
    10ac:	e8bd4008 	pop	{r3, lr}
    10b0:	e12fff1e 	bx	lr
    10b4:	0000121c 	.word	0x0000121c
    10b8:	000010bc 	.word	0x000010bc

000010bc <__libc_fini_array>:
    10bc:	e92d4038 	push	{r3, r4, r5, lr}
    10c0:	e59f5030 	ldr	r5, [pc, #48]	; 10f8 <__libc_fini_array+0x3c>
    10c4:	e59f4030 	ldr	r4, [pc, #48]	; 10fc <__libc_fini_array+0x40>
    10c8:	e0654004 	rsb	r4, r5, r4
    10cc:	e1b04144 	asrs	r4, r4, #2
    10d0:	10855104 	addne	r5, r5, r4, lsl #2
    10d4:	0a000004 	beq	10ec <__libc_fini_array+0x30>
    10d8:	e5353004 	ldr	r3, [r5, #-4]!
    10dc:	e1a0e00f 	mov	lr, pc
    10e0:	e12fff13 	bx	r3
    10e4:	e2544001 	subs	r4, r4, #1
    10e8:	1afffffa 	bne	10d8 <__libc_fini_array+0x1c>
    10ec:	eb00004a 	bl	121c <__libc_fini>
    10f0:	e8bd4038 	pop	{r3, r4, r5, lr}
    10f4:	e12fff1e 	bx	lr
    10f8:	00001234 	.word	0x00001234
    10fc:	00001238 	.word	0x00001238

00001100 <__cs3_premain>:
    1100:	e92d4008 	push	{r3, lr}
    1104:	eb000017 	bl	1168 <__libc_init_array>
    1108:	e59f3030 	ldr	r3, [pc, #48]	; 1140 <__cs3_premain+0x40>
    110c:	e3530000 	cmp	r3, #0
    1110:	15930000 	ldrne	r0, [r3]
    1114:	01a00003 	moveq	r0, r3
    1118:	e59f3024 	ldr	r3, [pc, #36]	; 1144 <__cs3_premain+0x44>
    111c:	e3530000 	cmp	r3, #0
    1120:	15931000 	ldrne	r1, [r3]
    1124:	01a01003 	moveq	r1, r3
    1128:	e3a02000 	mov	r2, #0
    112c:	ebfffecc 	bl	c64 <main>
    1130:	e59f3010 	ldr	r3, [pc, #16]	; 1148 <__cs3_premain+0x48>
    1134:	e3530000 	cmp	r3, #0
    1138:	1bffff2d 	blne	df4 <exit>
    113c:	eafffffe 	b	113c <__cs3_premain+0x3c>
	...
    1148:	00000df4 	.word	0x00000df4

0000114c <_exit>:
    114c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1150:	e3a00018 	mov	r0, #24
    1154:	e59f1004 	ldr	r1, [pc, #4]	; 1160 <_exit+0x14>
    1158:	ef123456 	svc	0x00123456
    115c:	eafffffe 	b	115c <_exit+0x10>
    1160:	00020026 	.word	0x00020026

00001164 <__cs3_isr_interrupt>:
    1164:	eafffffe 	b	1164 <__cs3_isr_interrupt>

00001168 <__libc_init_array>:
    1168:	e92d4070 	push	{r4, r5, r6, lr}
    116c:	e59f506c 	ldr	r5, [pc, #108]	; 11e0 <__libc_init_array+0x78>
    1170:	e59f606c 	ldr	r6, [pc, #108]	; 11e4 <__libc_init_array+0x7c>
    1174:	e0656006 	rsb	r6, r5, r6
    1178:	e1b06146 	asrs	r6, r6, #2
    117c:	12455004 	subne	r5, r5, #4
    1180:	13a04000 	movne	r4, #0
    1184:	0a000005 	beq	11a0 <__libc_init_array+0x38>
    1188:	e5b53004 	ldr	r3, [r5, #4]!
    118c:	e2844001 	add	r4, r4, #1
    1190:	e1a0e00f 	mov	lr, pc
    1194:	e12fff13 	bx	r3
    1198:	e1560004 	cmp	r6, r4
    119c:	1afffff9 	bne	1188 <__libc_init_array+0x20>
    11a0:	e59f5040 	ldr	r5, [pc, #64]	; 11e8 <__libc_init_array+0x80>
    11a4:	e59f6040 	ldr	r6, [pc, #64]	; 11ec <__libc_init_array+0x84>
    11a8:	e0656006 	rsb	r6, r5, r6
    11ac:	eb000012 	bl	11fc <_init>
    11b0:	e1b06146 	asrs	r6, r6, #2
    11b4:	12455004 	subne	r5, r5, #4
    11b8:	13a04000 	movne	r4, #0
    11bc:	0a000005 	beq	11d8 <__libc_init_array+0x70>
    11c0:	e5b53004 	ldr	r3, [r5, #4]!
    11c4:	e2844001 	add	r4, r4, #1
    11c8:	e1a0e00f 	mov	lr, pc
    11cc:	e12fff13 	bx	r3
    11d0:	e1560004 	cmp	r6, r4
    11d4:	1afffff9 	bne	11c0 <__libc_init_array+0x58>
    11d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    11dc:	e12fff1e 	bx	lr
    11e0:	00001214 	.word	0x00001214
    11e4:	00001214 	.word	0x00001214
    11e8:	00001214 	.word	0x00001214
    11ec:	0000121c 	.word	0x0000121c

Disassembly of section .rodata:

000011f4 <_global_impure_ptr>:
    11f4:	00001260 00000043                       `...C...

000011fc <_init>:
    11fc:	e1a0c00d 	mov	r12, sp
    1200:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1204:	e24cb004 	sub	r11, r12, #4
    1208:	e24bd028 	sub	sp, r11, #40	; 0x28
    120c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1210:	e12fff1e 	bx	lr

00001214 <__init_array_start>:
    1214:	00001098 	.word	0x00001098

00001218 <__frame_dummy_init_array_entry>:
    1218:	00000208                                ....

0000121c <__libc_fini>:
    121c:	e1a0c00d 	mov	r12, sp
    1220:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1224:	e24cb004 	sub	r11, r12, #4
    1228:	e24bd028 	sub	sp, r11, #40	; 0x28
    122c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1230:	e12fff1e 	bx	lr

00001234 <__fini_array_start>:
    1234:	000001c4 	.word	0x000001c4

00001238 <__cs3_regions>:
    1238:	00000000 	.word	0x00000000
    123c:	00000040 	.word	0x00000040
    1240:	00000040 	.word	0x00000040
    1244:	00001650 	.word	0x00001650
    1248:	00000020 	.word	0x00000020

0000124c <__cs3_regions_end>:
    124c:	00000000 	.word	0x00000000
