
P:/G91_Lab3/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 60 0d 00 00 64 0d 00 00 68 0d 00 00     @...`...d...h...
  30:	6c 0d 00 00 5c 0d 00 00 70 0d 00 00 74 0d 00 00     l...\...p...t...

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <HEX_8+0x59>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <HEX_8+0x55>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <HEX_8+0x5d>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <HEX_8+0x25>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <HEX_8+0x25>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <HEX_8+0xd>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <HEX_8+0x45>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <HEX_8+0x35>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <HEX_D+0x6>
  d4:	eb000307 	bl	cf8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000e5c 	.word	0x00000e5c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001298 	.word	0x00001298

00000124 <__cs3_heap_start_ptr>:
 124:	000012c0 	.word	0x000012c0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000012a0 	.word	0x000012a0
 170:	000012a3 	.word	0x000012a3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000012a0 	.word	0x000012a0
 1bc:	000012a0 	.word	0x000012a0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000012a0 	.word	0x000012a0
 200:	00000000 	.word	0x00000000
 204:	00000e00 	.word	0x00000e00

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000e00 	.word	0x00000e00
 250:	000012a4 	.word	0x000012a4
 254:	00000e60 	.word	0x00000e60
 258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
 25c:	e59f1274 	ldr	r1, [pc, #628]	; 4d8 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
 260:	e59f2274 	ldr	r2, [pc, #628]	; 4dc <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
 264:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
 268:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
 26c:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
 270:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 274:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 278:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 27c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
 280:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
 284:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
 288:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 28c:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
 290:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
 294:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF00FFFF
 298:	e3e038ff 	mvn	r3, #16711680	; 0xff0000
CMP R5, #1
 29c:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 2a0:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
 2a4:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
 2a8:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FFFFFF
 2ac:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
CMP R5, #1
 2b0:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 2b4:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
 2b8:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
 2bc:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
 2c0:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 2c4:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
 2c8:	00077003 	andeq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 2cc:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
 2d0:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
 2d4:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
 2d8:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
 2dc:	00077003 	andeq	r7, r7, r3

STR R6, [R1]
 2e0:	e5816000 	str	r6, [r1]
STR R7, [R2]
 2e4:	e5827000 	str	r7, [r2]

BX LR
 2e8:	e12fff1e 	bx	lr

000002ec <HEX_flood_ASM>:
HEX_flood_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
 2ec:	e59f11e4 	ldr	r1, [pc, #484]	; 4d8 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
 2f0:	e59f21e4 	ldr	r2, [pc, #484]	; 4dc <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
 2f4:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
 2f8:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
 2fc:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF		//OFF
 300:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 304:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 308:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 30c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
 310:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
 314:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
 318:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 31c:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
 320:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
 324:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FF0000
 328:	e3a038ff 	mov	r3, #16711680	; 0xff0000
CMP R5, #1
 32c:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 330:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
 334:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
 338:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF000000
 33c:	e3a034ff 	mov	r3, #-16777216	; 0xff000000
CMP R5, #1
 340:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 344:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
 348:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
 34c:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF	//OFF
 350:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 354:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
 358:	01877003 	orreq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 35c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
 360:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
 364:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
 368:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
 36c:	01877003 	orreq	r7, r7, r3

STR R6, [R1]
 370:	e5816000 	str	r6, [r1]
STR R7, [R2]
 374:	e5827000 	str	r7, [r2]

BX LR
 378:	e12fff1e 	bx	lr

0000037c <HEX_write_ASM>:
HEX_write_ASM:
CMP R1,#48
 37c:	e3510030 	cmp	r1, #48	; 0x30
MOVEQ R4, #HEX_0
 380:	03a0403f 	moveq	r4, #63	; 0x3f
BEQ WRITE
 384:	0a00002c 	beq	43c <WRITE>
CMP R1,#49
 388:	e3510031 	cmp	r1, #49	; 0x31
MOVEQ R4, #HEX_1
 38c:	03a04006 	moveq	r4, #6
BEQ WRITE
 390:	0a000029 	beq	43c <WRITE>
CMP R1,#50
 394:	e3510032 	cmp	r1, #50	; 0x32
MOVEQ R4, #HEX_2
 398:	03a0405b 	moveq	r4, #91	; 0x5b
BEQ WRITE
 39c:	0a000026 	beq	43c <WRITE>
CMP R1,#51
 3a0:	e3510033 	cmp	r1, #51	; 0x33
MOVEQ R4, #HEX_3
 3a4:	03a0404f 	moveq	r4, #79	; 0x4f
BEQ WRITE
 3a8:	0a000023 	beq	43c <WRITE>
CMP R1,#52
 3ac:	e3510034 	cmp	r1, #52	; 0x34
MOVEQ R4, #HEX_4
 3b0:	03a04066 	moveq	r4, #102	; 0x66
BEQ WRITE
 3b4:	0a000020 	beq	43c <WRITE>
CMP R1,#53
 3b8:	e3510035 	cmp	r1, #53	; 0x35
MOVEQ R4, #HEX_5
 3bc:	03a0406d 	moveq	r4, #109	; 0x6d
BEQ WRITE
 3c0:	0a00001d 	beq	43c <WRITE>
CMP R1,#54
 3c4:	e3510036 	cmp	r1, #54	; 0x36
MOVEQ R4, #HEX_6
 3c8:	03a0407d 	moveq	r4, #125	; 0x7d
BEQ WRITE
 3cc:	0a00001a 	beq	43c <WRITE>
CMP R1,#55
 3d0:	e3510037 	cmp	r1, #55	; 0x37
MOVEQ R4, #HEX_7
 3d4:	03a04007 	moveq	r4, #7
BEQ WRITE
 3d8:	0a000017 	beq	43c <WRITE>
CMP R1,#56
 3dc:	e3510038 	cmp	r1, #56	; 0x38
MOVEQ R4, #HEX_8
 3e0:	03a0407f 	moveq	r4, #127	; 0x7f
BEQ WRITE
 3e4:	0a000014 	beq	43c <WRITE>
CMP R1,#57
 3e8:	e3510039 	cmp	r1, #57	; 0x39
MOVEQ R4, #HEX_9
 3ec:	03a0406f 	moveq	r4, #111	; 0x6f
BEQ WRITE
 3f0:	0a000011 	beq	43c <WRITE>
CMP R1,#65
 3f4:	e3510041 	cmp	r1, #65	; 0x41
MOVEQ R4, #HEX_A
 3f8:	03a04077 	moveq	r4, #119	; 0x77
BEQ WRITE
 3fc:	0a00000e 	beq	43c <WRITE>
CMP R1,#66
 400:	e3510042 	cmp	r1, #66	; 0x42
MOVEQ R4, #HEX_B
 404:	03a0407c 	moveq	r4, #124	; 0x7c
BEQ WRITE
 408:	0a00000b 	beq	43c <WRITE>
CMP R1,#67
 40c:	e3510043 	cmp	r1, #67	; 0x43
MOVEQ R4, #HEX_C
 410:	03a04039 	moveq	r4, #57	; 0x39
BEQ WRITE
 414:	0a000008 	beq	43c <WRITE>
CMP R1,#68
 418:	e3510044 	cmp	r1, #68	; 0x44
MOVEQ R4, #HEX_D
 41c:	03a0405e 	moveq	r4, #94	; 0x5e
BEQ WRITE
 420:	0a000005 	beq	43c <WRITE>
CMP R1,#69
 424:	e3510045 	cmp	r1, #69	; 0x45
MOVEQ R4, #HEX_E
 428:	03a04079 	moveq	r4, #121	; 0x79
BEQ WRITE
 42c:	0a000002 	beq	43c <WRITE>
CMP R1,#70
 430:	e3510046 	cmp	r1, #70	; 0x46
MOVEQ R4, #HEX_F
 434:	03a04071 	moveq	r4, #113	; 0x71
BEQ WRITE
 438:	0affffff 	beq	43c <WRITE>

0000043c <WRITE>:
WRITE:

LDR R2, =HEX_BASE1		//0-3 HEX DISPLAY
 43c:	e59f2094 	ldr	r2, [pc, #148]	; 4d8 <WRITE+0x9c>
LDR R3, =HEX_BASE2		//4-5 HEX DISPLAY
 440:	e59f3094 	ldr	r3, [pc, #148]	; 4dc <WRITE+0xa0>
LDR R5, [R2]			//LOAD STATE OF 0-3 HEX DISPLAY
 444:	e5925000 	ldr	r5, [r2]
LDR R6, [R3]			//LOAD STATE OF 4-5 HEX DISPLAY
 448:	e5936000 	ldr	r6, [r3]

CMP R0, #0x00000001
 44c:	e3500001 	cmp	r0, #1
MOVEQ R7, #0xFFFFFF00		//OFF
 450:	03e070ff 	mvneq	r7, #255	; 0xff
ANDEQ R7, R7, R5		//APPLY THE MASK
 454:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 458:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 45c:	05827000 	streq	r7, [r2]

CMP R0, #0x00000002
 460:	e3500002 	cmp	r0, #2
MOVEQ R7, #0xFFFF00FF		//OFF
 464:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
 468:	01a04404 	lsleq	r4, r4, #8
ANDEQ R7, R7, R5		//APPLY THE MASK
 46c:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 470:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 474:	05827000 	streq	r7, [r2]

CMP R0, #0x00000004
 478:	e3500004 	cmp	r0, #4
MOVEQ R7, #0xFF00FFFF		//OFF
 47c:	03e078ff 	mvneq	r7, #16711680	; 0xff0000
LSLEQ R4, #16
 480:	01a04804 	lsleq	r4, r4, #16
ANDEQ R7, R7, R5		//APPLY THE MASK
 484:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 488:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 48c:	05827000 	streq	r7, [r2]

CMP R0, #0x00000008
 490:	e3500008 	cmp	r0, #8
MOVEQ R7, #0x00FFFFFF		//OFF
 494:	03e074ff 	mvneq	r7, #-16777216	; 0xff000000
LSLEQ R4, #24
 498:	01a04c04 	lsleq	r4, r4, #24
ANDEQ R7, R7, R5		//APPLY THE MASK
 49c:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 4a0:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 4a4:	05827000 	streq	r7, [r2]

CMP R0, #0x00000010
 4a8:	e3500010 	cmp	r0, #16
MOVEQ R8, #0xFFFFFF00		//OFF
 4ac:	03e080ff 	mvneq	r8, #255	; 0xff
ANDEQ R8, R8, R6		//APPLY THE MASK
 4b0:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
 4b4:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
 4b8:	05838000 	streq	r8, [r3]

CMP R0, #0x00000020
 4bc:	e3500020 	cmp	r0, #32
MOVEQ R7, #0xFFFF00FF		//OFF
 4c0:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
 4c4:	01a04404 	lsleq	r4, r4, #8
ANDEQ R8, R8, R6		//APPLY THE MASK
 4c8:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
 4cc:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
 4d0:	05838000 	streq	r8, [r3]


BX LR
 4d4:	e12fff1e 	bx	lr
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
 4d8:	ff200020 	.word	0xff200020
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
 4dc:	ff200030 	.word	0xff200030

000004e0 <HPS_TIM_config_ASM>:
			.global HPS_TIM_config_ASM 		//make the subroutines available to the package
			.global HPS_TIM_read_INT_ASM
			.global HPS_TIM_clear_INT_ASM

HPS_TIM_config_ASM:
			PUSH {R1-R7}
 4e0:	e92d00fe 	push	{r1, r2, r3, r4, r5, r6, r7}
			LDR R3, [R0]				//Load TIM into R3
 4e4:	e5903000 	ldr	r3, [r0]
			AND R3, R3, #0xF			//Get rid of random numbers ahead of our one-hot string
 4e8:	e203300f 	and	r3, r3, #15
			MOV R1, #0					//Initialize counter
 4ec:	e3a01000 	mov	r1, #0

000004f0 <HPS_TIM_config_ASM_LOOP>:
			
HPS_TIM_config_ASM_LOOP:
			CMP R1, #4					//if counter is greater than or equal to 4
 4f0:	e3510004 	cmp	r1, #4
			BGE HPS_TIM_config_ASM_END	//done
 4f4:	aa00001b 	bge	568 <HPS_TIM_config_ASM_END>
			AND R5, R3, #1
 4f8:	e2035001 	and	r5, r3, #1
			CMP R5, #0
 4fc:	e3550000 	cmp	r5, #0
			ASR R3, R3, #1				//Shift input by 1
 500:	e1a030c3 	asr	r3, r3, #1
			ADDEQ R1, R1, #1			//Increment counter if 0
 504:	02811001 	addeq	r1, r1, #1
			BEQ HPS_TIM_config_ASM_LOOP	//Branch back to loop if 0
 508:	0afffff8 	beq	4f0 <HPS_TIM_config_ASM_LOOP>

			//Load timer into R2, depending on selection (R1)
			CMP R1, #0
 50c:	e3510000 	cmp	r1, #0
			LDREQ R2, =TIM_0
 510:	059f2110 	ldreq	r2, [pc, #272]	; 628 <HPS_TIM_clear_INT_ASM_END+0x8>
			CMP R1, #1
 514:	e3510001 	cmp	r1, #1
			LDREQ R2, =TIM_1
 518:	059f210c 	ldreq	r2, [pc, #268]	; 62c <HPS_TIM_clear_INT_ASM_END+0xc>
			CMP R1, #2
 51c:	e3510002 	cmp	r1, #2
			LDREQ R2, =TIM_2
 520:	059f2108 	ldreq	r2, [pc, #264]	; 630 <HPS_TIM_clear_INT_ASM_END+0x10>
			CMP R1, #3
 524:	e3510003 	cmp	r1, #3
			LDREQ R2, =TIM_3
 528:	059f2104 	ldreq	r2, [pc, #260]	; 634 <HPS_TIM_clear_INT_ASM_END+0x14>
		
			//configuration section
			LDR R4, [R0, #0x8]			//Disable timer before doing config
 52c:	e5904008 	ldr	r4, [r0, #8]
			AND R4, R4, #0x6			//Disable E bit, keep other the same
 530:	e2044006 	and	r4, r4, #6
			STR	R4, [R2, #0x8] 		
 534:	e5824008 	str	r4, [r2, #8]
	
			LDR R4, [R0, #0x4]			//Load timeout
 538:	e5904004 	ldr	r4, [r0, #4]
			STR R4, [R2] 				//Config Timeout
 53c:	e5824000 	str	r4, [r2]

			LDR R4, [R0, #0x8]			//Load "LD_en"
 540:	e5904008 	ldr	r4, [r0, #8]
			LSL R4, R4, #1				//Shift by one (M bit)
 544:	e1a04084 	lsl	r4, r4, #1

			LDR R5, [R0, #0xC]			//Load "INT_en"
 548:	e590500c 	ldr	r5, [r0, #12]
			LSL R5, R5, #2				//Shift twice (I bit)
 54c:	e1a05105 	lsl	r5, r5, #2

			LDR R6, [R0, #0x10]			//Load "enable"
 550:	e5906010 	ldr	r6, [r0, #16]

			ORR R7, R4, R5
 554:	e1847005 	orr	r7, r4, r5
			ORR R7, R7, R6				//Get string of M, I and E bits
 558:	e1877006 	orr	r7, r7, r6

			STR R7, [R2, #0x8]			//Store into control
 55c:	e5827008 	str	r7, [r2, #8]

			ADD R1, R1, #1				//Increment counter
 560:	e2811001 	add	r1, r1, #1
			B HPS_TIM_config_ASM_LOOP
 564:	eaffffe1 	b	4f0 <HPS_TIM_config_ASM_LOOP>

00000568 <HPS_TIM_config_ASM_END>:

HPS_TIM_config_ASM_END:				//finished
			POP {R1-R7}					//restore data
 568:	e8bd00fe 	pop	{r1, r2, r3, r4, r5, r6, r7}
			BX LR
 56c:	e12fff1e 	bx	lr

00000570 <HPS_TIM_read_INT_ASM>:
			
HPS_TIM_read_INT_ASM:
			PUSH {R1-R4}
 570:	e92d001e 	push	{r1, r2, r3, r4}
			AND R0, R0, #0xF			//Get rid of random numbers ahead of our one-hot string
 574:	e200000f 	and	r0, r0, #15
			MOV R1, #0					//Initialize counter
 578:	e3a01000 	mov	r1, #0

0000057c <HPS_TIM_read_ASM_LOOP>:
			
HPS_TIM_read_ASM_LOOP:
			CMP R1, #4					//if counter >= 4
 57c:	e3510004 	cmp	r1, #4
			BGE HPS_TIM_read_ASM_END	//done
 580:	aa00000f 	bge	5c4 <HPS_TIM_read_ASM_END>
			AND R4, R0, #1
 584:	e2004001 	and	r4, r0, #1
			CMP R4, #0
 588:	e3540000 	cmp	r4, #0
			ASR R0, R0, #1				//Shift input by 1
 58c:	e1a000c0 	asr	r0, r0, #1
			ADDEQ R1, R1, #1			//Increment counter if 0
 590:	02811001 	addeq	r1, r1, #1
			BEQ HPS_TIM_read_ASM_LOOP	//Branch back to loop if 0
 594:	0afffff8 	beq	57c <HPS_TIM_read_ASM_LOOP>

			//Load timer into R2 depending on which one it is
			CMP R1, #0
 598:	e3510000 	cmp	r1, #0
			LDREQ R2, =TIM_0
 59c:	059f2084 	ldreq	r2, [pc, #132]	; 628 <HPS_TIM_clear_INT_ASM_END+0x8>
			CMP R1, #1
 5a0:	e3510001 	cmp	r1, #1
			LDREQ R2, =TIM_1
 5a4:	059f2080 	ldreq	r2, [pc, #128]	; 62c <HPS_TIM_clear_INT_ASM_END+0xc>
			CMP R1, #2
 5a8:	e3510002 	cmp	r1, #2
			LDREQ R2, =TIM_2
 5ac:	059f207c 	ldreq	r2, [pc, #124]	; 630 <HPS_TIM_clear_INT_ASM_END+0x10>
			CMP R1, #3
 5b0:	e3510003 	cmp	r1, #3
			LDREQ R2, =TIM_3
 5b4:	059f2078 	ldreq	r2, [pc, #120]	; 634 <HPS_TIM_clear_INT_ASM_END+0x14>

			LDR R3, [R2, #0x10]			//Load S-bit
 5b8:	e5923010 	ldr	r3, [r2, #16]
			AND R0, R3, #1
 5bc:	e2030001 	and	r0, r3, #1
			B HPS_TIM_read_ASM_END 	//Only supports single timer, so done
 5c0:	eaffffff 	b	5c4 <HPS_TIM_read_ASM_END>

000005c4 <HPS_TIM_read_ASM_END>:

HPS_TIM_read_ASM_END:
			POP {R1-R4}
 5c4:	e8bd001e 	pop	{r1, r2, r3, r4}
			BX LR
 5c8:	e12fff1e 	bx	lr

000005cc <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
			PUSH {R1-R4}
 5cc:	e92d001e 	push	{r1, r2, r3, r4}
			AND R0, R0, #0xF			//Get rid of random numbers ahead of our one-hot string
 5d0:	e200000f 	and	r0, r0, #15
			MOV R1, #0					//Initialize counter
 5d4:	e3a01000 	mov	r1, #0

000005d8 <HPS_TIM_clear_INT_ASM_LOOP>:
			
HPS_TIM_clear_INT_ASM_LOOP:
			CMP R1, #4					//if counter >= 4
 5d8:	e3510004 	cmp	r1, #4
			BGE HPS_TIM_clear_INT_ASM_END	//goto done
 5dc:	aa00000f 	bge	620 <HPS_TIM_clear_INT_ASM_END>
			AND R4, R0, #1
 5e0:	e2004001 	and	r4, r0, #1
			CMP R4, #0
 5e4:	e3540000 	cmp	r4, #0
			ASR R0, R0, #1				//Shift input by 1
 5e8:	e1a000c0 	asr	r0, r0, #1
			ADDEQ R1, R1, #1			//Increment counter if 0
 5ec:	02811001 	addeq	r1, r1, #1
			BEQ HPS_TIM_clear_INT_ASM_LOOP	//Branch back to loop if 0
 5f0:	0afffff8 	beq	5d8 <HPS_TIM_clear_INT_ASM_LOOP>

			//Load timer into R2 depending on which timer was selected
			CMP R1, #0
 5f4:	e3510000 	cmp	r1, #0
			LDREQ R2, =TIM_0
 5f8:	059f2028 	ldreq	r2, [pc, #40]	; 628 <HPS_TIM_clear_INT_ASM_END+0x8>
			CMP R1, #1
 5fc:	e3510001 	cmp	r1, #1
			LDREQ R2, =TIM_1
 600:	059f2024 	ldreq	r2, [pc, #36]	; 62c <HPS_TIM_clear_INT_ASM_END+0xc>
			CMP R1, #2
 604:	e3510002 	cmp	r1, #2
			LDREQ R2, =TIM_2
 608:	059f2020 	ldreq	r2, [pc, #32]	; 630 <HPS_TIM_clear_INT_ASM_END+0x10>
			CMP R1, #3
 60c:	e3510003 	cmp	r1, #3
			LDREQ R2, =TIM_3
 610:	059f201c 	ldreq	r2, [pc, #28]	; 634 <HPS_TIM_clear_INT_ASM_END+0x14>

			LDR R4, [R2, #0xC]			//Reading F bit clears the entire timer 
 614:	e592400c 	ldr	r4, [r2, #12]

			ADD R1, R1, #1				//Increment counter
 618:	e2811001 	add	r1, r1, #1
			B HPS_TIM_clear_INT_ASM_LOOP
 61c:	eaffffed 	b	5d8 <HPS_TIM_clear_INT_ASM_LOOP>

00000620 <HPS_TIM_clear_INT_ASM_END>:

HPS_TIM_clear_INT_ASM_END:
			POP {R1-R4}
 620:	e8bd001e 	pop	{r1, r2, r3, r4}
			BX LR			
 624:	e12fff1e 	bx	lr
			ADDEQ R1, R1, #1			//Increment counter if 0
			BEQ HPS_TIM_config_ASM_LOOP	//Branch back to loop if 0

			//Load timer into R2, depending on selection (R1)
			CMP R1, #0
			LDREQ R2, =TIM_0
 628:	ffc08000 	.word	0xffc08000
			CMP R1, #1
			LDREQ R2, =TIM_1
 62c:	ffc09000 	.word	0xffc09000
			CMP R1, #2
			LDREQ R2, =TIM_2
 630:	ffd00000 	.word	0xffd00000
			CMP R1, #3
			LDREQ R2, =TIM_3
 634:	ffd01000 	.word	0xffd01000

00000638 <read_LEDs_ASM>:
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
 638:	e59f1010 	ldr	r1, [pc, #16]	; 650 <write_LEDs_ASM+0xc>
LDR R0, [R1]
 63c:	e5910000 	ldr	r0, [r1]
BX LR
 640:	e12fff1e 	bx	lr

00000644 <write_LEDs_ASM>:
write_LEDs_ASM:
LDR R1, =SW_BASE
 644:	e59f1004 	ldr	r1, [pc, #4]	; 650 <write_LEDs_ASM+0xc>
STR R0, [R1]
 648:	e5810000 	str	r0, [r1]
BX LR
 64c:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
 650:	ff200000 	.word	0xff200000

00000654 <read_PB_data_ASM>:
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecp_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
 654:	e59f11a4 	ldr	r1, [pc, #420]	; 800 <STORE_INTERRUPT_DISABLE+0x8>
LDR R0, [R1]
 658:	e5910000 	ldr	r0, [r1]
BX LR
 65c:	e12fff1e 	bx	lr

00000660 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
//R0 parameter from C
LDR R1, =PUSHBUTTON_BASE
 660:	e59f1198 	ldr	r1, [pc, #408]	; 800 <STORE_INTERRUPT_DISABLE+0x8>
LDR R2, [R1]			//value of the data register
 664:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
 668:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
 66c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
 670:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 674:	03a00001 	moveq	r0, #1
BXEQ LR
 678:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
 67c:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
 680:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 684:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
 688:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 68c:	03a00001 	moveq	r0, #1
BXEQ LR
 690:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
 694:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
 698:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
 69c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
 6a0:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 6a4:	03a00001 	moveq	r0, #1
BXEQ LR
 6a8:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
 6ac:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
 6b0:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 6b4:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
 6b8:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 6bc:	03a00001 	moveq	r0, #1
BXEQ LR
 6c0:	012fff1e 	bxeq	lr

MOV R0, #0
 6c4:	e3a00000 	mov	r0, #0
BX LR
 6c8:	e12fff1e 	bx	lr

000006cc <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
 6cc:	e59f1130 	ldr	r1, [pc, #304]	; 804 <STORE_INTERRUPT_DISABLE+0xc>
LDR R0, [R1]
 6d0:	e5910000 	ldr	r0, [r1]
BX LR
 6d4:	e12fff1e 	bx	lr

000006d8 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
 6d8:	e59f1124 	ldr	r1, [pc, #292]	; 804 <STORE_INTERRUPT_DISABLE+0xc>
LDR R2, [R1]			//value of edge register
 6dc:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
 6e0:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
 6e4:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
 6e8:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 6ec:	03a00001 	moveq	r0, #1
BXEQ LR
 6f0:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
 6f4:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
 6f8:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 6fc:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
 700:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 704:	03a00001 	moveq	r0, #1
BXEQ LR
 708:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
 70c:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
 710:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
 714:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
 718:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 71c:	03a00001 	moveq	r0, #1
BXEQ LR
 720:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
 724:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
 728:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 72c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
 730:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 734:	03a00001 	moveq	r0, #1
BXEQ LR
 738:	012fff1e 	bxeq	lr

MOV R0, #0
 73c:	e3a00000 	mov	r0, #0

BX LR
 740:	e12fff1e 	bx	lr

00000744 <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:
//R0 PARAMETER FROM C
LDR R1, =PUSHBUTTON_EDGECAPTURE
 744:	e59f10b8 	ldr	r1, [pc, #184]	; 804 <STORE_INTERRUPT_DISABLE+0xc>
LDR R2, [R1]			//value of the edgecapture register
 748:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
 74c:	e3a04003 	mov	r4, #3
MOV R5, #0xFFFFFFF0		//mask
 750:	e3e0500f 	mvn	r5, #15

00000754 <LOOP_CLEAR>:
LOOP_CLEAR:
SUBS R4, R4, #1			//update counter
 754:	e2544001 	subs	r4, r4, #1
BLT  STORE_VALUE
 758:	ba000007 	blt	77c <STORE_VALUE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
 75c:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
 760:	e3530001 	cmp	r3, #1
ANDEQ R2, R2, R5			//modify the value
 764:	00022005 	andeq	r2, r2, r5
MOV R6, #2
 768:	e3a06002 	mov	r6, #2
MOV R7, #15
 76c:	e3a0700f 	mov	r7, #15
MLA R5, R5, R6, R7		//update the mask for the next iteration
 770:	e0257695 	mla	r5, r5, r6, r7
LSR R0, #1
 774:	e1a000a0 	lsr	r0, r0, #1
B LOOP_CLEAR
 778:	eafffff5 	b	754 <LOOP_CLEAR>

0000077c <STORE_VALUE>:
//FINISH CONSTRUCTING THE NEW EDGECAPTURE VALUE
STORE_VALUE:
STR R2, [R1]
 77c:	e5812000 	str	r2, [r1]
BX LR
 780:	e12fff1e 	bx	lr

00000784 <enable_PB_INT_ASM>:


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
 784:	e59f107c 	ldr	r1, [pc, #124]	; 808 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
 788:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
 78c:	e3a04003 	mov	r4, #3
MOV R5, #0x0000000F		//mask
 790:	e3a0500f 	mov	r5, #15

00000794 <LOOP_ENABLE_INT>:
LOOP_ENABLE_INT:
SUBS R4, R4, #1			//update counter
 794:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_ENABLE
 798:	ba000006 	blt	7b8 <STORE_INTERRUPT_ENABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
 79c:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
 7a0:	e3530001 	cmp	r3, #1
ORREQ R2, R2, R5		//modify the value
 7a4:	01822005 	orreq	r2, r2, r5
MOV R6, #2
 7a8:	e3a06002 	mov	r6, #2
MUL R5, R5, R6			//update the mask for the next iteration
 7ac:	e0050695 	mul	r5, r5, r6
LSR R0, #1
 7b0:	e1a000a0 	lsr	r0, r0, #1
B LOOP_ENABLE_INT
 7b4:	eafffff6 	b	794 <LOOP_ENABLE_INT>

000007b8 <STORE_INTERRUPT_ENABLE>:
STORE_INTERRUPT_ENABLE:
STR R2, [R1]
 7b8:	e5812000 	str	r2, [r1]
BX LR
 7bc:	e12fff1e 	bx	lr

000007c0 <disable_PB_INT_ASM>:


disable_PB_INT_ASM:
LDR R1, =PUSHBUTTON_INTERRUPTION
 7c0:	e59f1040 	ldr	r1, [pc, #64]	; 808 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
 7c4:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
 7c8:	e3a04003 	mov	r4, #3
MOV R5, #0xFFFFFFF0		//mask
 7cc:	e3e0500f 	mvn	r5, #15

000007d0 <LOOP_DISABLE_INT>:
LOOP_DISABLE_INT:
SUBS R4, R4, #1			//update counter
 7d0:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_DISABLE
 7d4:	ba000007 	blt	7f8 <STORE_INTERRUPT_DISABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
 7d8:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
 7dc:	e3530001 	cmp	r3, #1
ANDEQ R2, R2, R5		//modify the value
 7e0:	00022005 	andeq	r2, r2, r5
MOV R6, #2
 7e4:	e3a06002 	mov	r6, #2
MOV R7, #15
 7e8:	e3a0700f 	mov	r7, #15
MLA R5, R5, R6, R7		//update the mask for the next iteration
 7ec:	e0257695 	mla	r5, r5, r6, r7
LSR R0, #1
 7f0:	e1a000a0 	lsr	r0, r0, #1
B LOOP_DISABLE_INT
 7f4:	eafffff5 	b	7d0 <LOOP_DISABLE_INT>

000007f8 <STORE_INTERRUPT_DISABLE>:
STORE_INTERRUPT_DISABLE:
STR R2, [R1]
 7f8:	e5812000 	str	r2, [r1]
BX LR
 7fc:	e12fff1e 	bx	lr
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecp_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
 800:	ff200050 	.word	0xff200050

MOV R0, #0
BX LR

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
 804:	ff20005c 	.word	0xff20005c
BX LR


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
 808:	ff200058 	.word	0xff200058

0000080c <read_slider_switches_ASM>:
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
 80c:	e59f1004 	ldr	r1, [pc, #4]	; 818 <read_slider_switches_ASM+0xc>
LDR R0, [R1]
 810:	e5910000 	ldr	r0, [r1]
BX LR
 814:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
 818:	ff200040 	.word	0xff200040

0000081c <main>:
#include "./drivers/inc/LEDs.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"

int main(){
 81c:	e92d4800 	push	{r11, lr}
 820:	e28db004 	add	r11, sp, #4
 824:	e24dd028 	sub	sp, sp, #40	; 0x28
	int count0 = 0, count1 = 0, count2 = 0, count3 = 0;
 828:	e3a03000 	mov	r3, #0
 82c:	e50b3008 	str	r3, [r11, #-8]
 830:	e3a03000 	mov	r3, #0
 834:	e50b300c 	str	r3, [r11, #-12]
 838:	e3a03000 	mov	r3, #0
 83c:	e50b3010 	str	r3, [r11, #-16]
 840:	e3a03000 	mov	r3, #0
 844:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

	HPS_TIM_config_t hps_tim;

	hps_tim.tim = TIM0|TIM1|TIM2|TIM3;
 848:	e3a0300f 	mov	r3, #15
 84c:	e54b3028 	strb	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.timeout = 1000000;
 850:	e3043240 	movw	r3, #16960	; 0x4240
 854:	e340300f 	movt	r3, #15
 858:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.LD_en = 1;
 85c:	e3a03001 	mov	r3, #1
 860:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	hps_tim.INT_en = 1;
 864:	e3a03001 	mov	r3, #1
 868:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	hps_tim.enable = 1;
 86c:	e3a03001 	mov	r3, #1
 870:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8

	HPS_TIM_config_ASM(&hps_tim);
 874:	e24b3028 	sub	r3, r11, #40	; 0x28
 878:	e1a00003 	mov	r0, r3
 87c:	ebffff17 	bl	4e0 <HPS_TIM_config_ASM>
 880:	ea000000 	b	888 <main+0x6c>
			if (++count3 == 16) 
				count0 = 0;
			HEX_write_ASM(HEX0, count3);
		}

	}
 884:	e1a00000 	nop			; (mov r0, r0)
	hps_tim.enable = 1;

	HPS_TIM_config_ASM(&hps_tim);

	while (1) {
		if (HPS_TIM_read_INT_ASM(TIM0)) {
 888:	e3a00001 	mov	r0, #1
 88c:	ebffff37 	bl	570 <HPS_TIM_read_INT_ASM>
 890:	e1a03000 	mov	r3, r0
 894:	e3530000 	cmp	r3, #0
 898:	0a00000e 	beq	8d8 <main+0xbc>
			HPS_TIM_clear_INT_ASM(TIM0);
 89c:	e3a00001 	mov	r0, #1
 8a0:	ebffff49 	bl	5cc <HPS_TIM_clear_INT_ASM>
			if (++count0 == 16) 
 8a4:	e51b3008 	ldr	r3, [r11, #-8]
 8a8:	e2833001 	add	r3, r3, #1
 8ac:	e50b3008 	str	r3, [r11, #-8]
 8b0:	e51b3008 	ldr	r3, [r11, #-8]
 8b4:	e3530010 	cmp	r3, #16
 8b8:	1a000001 	bne	8c4 <main+0xa8>
				count0 = 0;
 8bc:	e3a03000 	mov	r3, #0
 8c0:	e50b3008 	str	r3, [r11, #-8]
			HEX_write_ASM(HEX0, count0);
 8c4:	e51b3008 	ldr	r3, [r11, #-8]
 8c8:	e6ef3073 	uxtb	r3, r3
 8cc:	e3a00001 	mov	r0, #1
 8d0:	e1a01003 	mov	r1, r3
 8d4:	ebfffea8 	bl	37c <HEX_write_ASM>
		}

		if (HPS_TIM_read_INT_ASM(TIM1)) {
 8d8:	e3a00002 	mov	r0, #2
 8dc:	ebffff23 	bl	570 <HPS_TIM_read_INT_ASM>
 8e0:	e1a03000 	mov	r3, r0
 8e4:	e3530000 	cmp	r3, #0
 8e8:	0a00000e 	beq	928 <main+0x10c>
			HPS_TIM_clear_INT_ASM(TIM1);
 8ec:	e3a00002 	mov	r0, #2
 8f0:	ebffff35 	bl	5cc <HPS_TIM_clear_INT_ASM>
			if (++count1 == 16) 
 8f4:	e51b300c 	ldr	r3, [r11, #-12]
 8f8:	e2833001 	add	r3, r3, #1
 8fc:	e50b300c 	str	r3, [r11, #-12]
 900:	e51b300c 	ldr	r3, [r11, #-12]
 904:	e3530010 	cmp	r3, #16
 908:	1a000001 	bne	914 <main+0xf8>
				count0 = 0;
 90c:	e3a03000 	mov	r3, #0
 910:	e50b3008 	str	r3, [r11, #-8]
			HEX_write_ASM(HEX0, count1);
 914:	e51b300c 	ldr	r3, [r11, #-12]
 918:	e6ef3073 	uxtb	r3, r3
 91c:	e3a00001 	mov	r0, #1
 920:	e1a01003 	mov	r1, r3
 924:	ebfffe94 	bl	37c <HEX_write_ASM>
		}

		if (HPS_TIM_read_INT_ASM(TIM2)) {
 928:	e3a00004 	mov	r0, #4
 92c:	ebffff0f 	bl	570 <HPS_TIM_read_INT_ASM>
 930:	e1a03000 	mov	r3, r0
 934:	e3530000 	cmp	r3, #0
 938:	0a00000e 	beq	978 <main+0x15c>
			HPS_TIM_clear_INT_ASM(TIM2);
 93c:	e3a00004 	mov	r0, #4
 940:	ebffff21 	bl	5cc <HPS_TIM_clear_INT_ASM>
			if (++count2 == 16) 
 944:	e51b3010 	ldr	r3, [r11, #-16]
 948:	e2833001 	add	r3, r3, #1
 94c:	e50b3010 	str	r3, [r11, #-16]
 950:	e51b3010 	ldr	r3, [r11, #-16]
 954:	e3530010 	cmp	r3, #16
 958:	1a000001 	bne	964 <main+0x148>
				count0 = 0;
 95c:	e3a03000 	mov	r3, #0
 960:	e50b3008 	str	r3, [r11, #-8]
			HEX_write_ASM(HEX0, count2);
 964:	e51b3010 	ldr	r3, [r11, #-16]
 968:	e6ef3073 	uxtb	r3, r3
 96c:	e3a00001 	mov	r0, #1
 970:	e1a01003 	mov	r1, r3
 974:	ebfffe80 	bl	37c <HEX_write_ASM>
		}

		if (HPS_TIM_read_INT_ASM(TIM3)) {
 978:	e3a00008 	mov	r0, #8
 97c:	ebfffefb 	bl	570 <HPS_TIM_read_INT_ASM>
 980:	e1a03000 	mov	r3, r0
 984:	e3530000 	cmp	r3, #0
 988:	0affffbd 	beq	884 <main+0x68>
			HPS_TIM_clear_INT_ASM(TIM3);
 98c:	e3a00008 	mov	r0, #8
 990:	ebffff0d 	bl	5cc <HPS_TIM_clear_INT_ASM>
			if (++count3 == 16) 
 994:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 998:	e2833001 	add	r3, r3, #1
 99c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 9a0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 9a4:	e3530010 	cmp	r3, #16
 9a8:	1a000001 	bne	9b4 <main+0x198>
				count0 = 0;
 9ac:	e3a03000 	mov	r3, #0
 9b0:	e50b3008 	str	r3, [r11, #-8]
			HEX_write_ASM(HEX0, count3);
 9b4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 9b8:	e6ef3073 	uxtb	r3, r3
 9bc:	e3a00001 	mov	r0, #1
 9c0:	e1a01003 	mov	r1, r3
 9c4:	ebfffe6c 	bl	37c <HEX_write_ASM>
		}

	}
 9c8:	eaffffad 	b	884 <main+0x68>

000009cc <atexit>:
 9cc:	e1a01000 	mov	r1, r0
 9d0:	e3a00000 	mov	r0, #0
 9d4:	e92d4008 	push	{r3, lr}
 9d8:	e1a02000 	mov	r2, r0
 9dc:	e1a03000 	mov	r3, r0
 9e0:	eb00000e 	bl	a20 <__register_exitproc>
 9e4:	e8bd4008 	pop	{r3, lr}
 9e8:	e12fff1e 	bx	lr

000009ec <exit>:
 9ec:	e92d4008 	push	{r3, lr}
 9f0:	e3a01000 	mov	r1, #0
 9f4:	e1a04000 	mov	r4, r0
 9f8:	eb000045 	bl	b14 <__call_exitprocs>
 9fc:	e59f3018 	ldr	r3, [pc, #24]	; a1c <exit+0x30>
 a00:	e5930000 	ldr	r0, [r3]
 a04:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 a08:	e3530000 	cmp	r3, #0
 a0c:	11a0e00f 	movne	lr, pc
 a10:	112fff13 	bxne	r3
 a14:	e1a00004 	mov	r0, r4
 a18:	eb0000c9 	bl	d44 <_exit>
 a1c:	00000e04 	.word	0x00000e04

00000a20 <__register_exitproc>:
 a20:	e59fc0e4 	ldr	r12, [pc, #228]	; b0c <__register_exitproc+0xec>
 a24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 a28:	e59c4000 	ldr	r4, [r12]
 a2c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 a30:	e35c0000 	cmp	r12, #0
 a34:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 a38:	e59c5004 	ldr	r5, [r12, #4]
 a3c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 a40:	e355001f 	cmp	r5, #31
 a44:	e24dd010 	sub	sp, sp, #16
 a48:	e1a06000 	mov	r6, r0
 a4c:	da000015 	ble	aa8 <__register_exitproc+0x88>
 a50:	e59f00b8 	ldr	r0, [pc, #184]	; b10 <__register_exitproc+0xf0>
 a54:	e3500000 	cmp	r0, #0
 a58:	1a000001 	bne	a64 <__register_exitproc+0x44>
 a5c:	e3e00000 	mvn	r0, #0
 a60:	ea000018 	b	ac8 <__register_exitproc+0xa8>
 a64:	e3a00e19 	mov	r0, #400	; 0x190
 a68:	e58d100c 	str	r1, [sp, #12]
 a6c:	e58d2008 	str	r2, [sp, #8]
 a70:	e58d3004 	str	r3, [sp, #4]
 a74:	e320f000 	nop	{0}
 a78:	e250c000 	subs	r12, r0, #0
 a7c:	e59d100c 	ldr	r1, [sp, #12]
 a80:	e59d2008 	ldr	r2, [sp, #8]
 a84:	e59d3004 	ldr	r3, [sp, #4]
 a88:	0afffff3 	beq	a5c <__register_exitproc+0x3c>
 a8c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 a90:	e3a00000 	mov	r0, #0
 a94:	e58c0004 	str	r0, [r12, #4]
 a98:	e58c5000 	str	r5, [r12]
 a9c:	e584c148 	str	r12, [r4, #328]	; 0x148
 aa0:	e58c0188 	str	r0, [r12, #392]	; 0x188
 aa4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 aa8:	e3560000 	cmp	r6, #0
 aac:	e59c4004 	ldr	r4, [r12, #4]
 ab0:	1a000007 	bne	ad4 <__register_exitproc+0xb4>
 ab4:	e2843002 	add	r3, r4, #2
 ab8:	e2844001 	add	r4, r4, #1
 abc:	e78c1103 	str	r1, [r12, r3, lsl #2]
 ac0:	e58c4004 	str	r4, [r12, #4]
 ac4:	e3a00000 	mov	r0, #0
 ac8:	e28dd010 	add	sp, sp, #16
 acc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 ad0:	e12fff1e 	bx	lr
 ad4:	e3a00001 	mov	r0, #1
 ad8:	e1a00410 	lsl	r0, r0, r4
 adc:	e08c8104 	add	r8, r12, r4, lsl #2
 ae0:	e3560002 	cmp	r6, #2
 ae4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 ae8:	e5883108 	str	r3, [r8, #264]	; 0x108
 aec:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 af0:	e1877000 	orr	r7, r7, r0
 af4:	01830000 	orreq	r0, r3, r0
 af8:	e1a05008 	mov	r5, r8
 afc:	e5882088 	str	r2, [r8, #136]	; 0x88
 b00:	e58c7188 	str	r7, [r12, #392]	; 0x188
 b04:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 b08:	eaffffe9 	b	ab4 <__register_exitproc+0x94>
 b0c:	00000e04 	.word	0x00000e04
 b10:	00000000 	.word	0x00000000

00000b14 <__call_exitprocs>:
 b14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 b18:	e59f3168 	ldr	r3, [pc, #360]	; c88 <__call_exitprocs+0x174>
 b1c:	e5933000 	ldr	r3, [r3]
 b20:	e24dd014 	sub	sp, sp, #20
 b24:	e58d3004 	str	r3, [sp, #4]
 b28:	e2833f52 	add	r3, r3, #328	; 0x148
 b2c:	e58d0008 	str	r0, [sp, #8]
 b30:	e58d300c 	str	r3, [sp, #12]
 b34:	e1a07001 	mov	r7, r1
 b38:	e3a08001 	mov	r8, #1
 b3c:	e59d3004 	ldr	r3, [sp, #4]
 b40:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 b44:	e3560000 	cmp	r6, #0
 b48:	e59db00c 	ldr	r11, [sp, #12]
 b4c:	0a000033 	beq	c20 <__call_exitprocs+0x10c>
 b50:	e5965004 	ldr	r5, [r6, #4]
 b54:	e2554001 	subs	r4, r5, #1
 b58:	5286a088 	addpl	r10, r6, #136	; 0x88
 b5c:	5285501f 	addpl	r5, r5, #31
 b60:	508a5105 	addpl	r5, r10, r5, lsl #2
 b64:	5a000007 	bpl	b88 <__call_exitprocs+0x74>
 b68:	ea000029 	b	c14 <__call_exitprocs+0x100>
 b6c:	e5953000 	ldr	r3, [r5]
 b70:	e1530007 	cmp	r3, r7
 b74:	0a000005 	beq	b90 <__call_exitprocs+0x7c>
 b78:	e2444001 	sub	r4, r4, #1
 b7c:	e3740001 	cmn	r4, #1
 b80:	e2455004 	sub	r5, r5, #4
 b84:	0a000022 	beq	c14 <__call_exitprocs+0x100>
 b88:	e3570000 	cmp	r7, #0
 b8c:	1afffff6 	bne	b6c <__call_exitprocs+0x58>
 b90:	e5963004 	ldr	r3, [r6, #4]
 b94:	e06a2005 	rsb	r2, r10, r5
 b98:	e2433001 	sub	r3, r3, #1
 b9c:	e0862002 	add	r2, r6, r2
 ba0:	e1530004 	cmp	r3, r4
 ba4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 ba8:	13a01000 	movne	r1, #0
 bac:	05864004 	streq	r4, [r6, #4]
 bb0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 bb4:	e3530000 	cmp	r3, #0
 bb8:	0affffee 	beq	b78 <__call_exitprocs+0x64>
 bbc:	e1a02418 	lsl	r2, r8, r4
 bc0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 bc4:	e1120001 	tst	r2, r1
 bc8:	e5969004 	ldr	r9, [r6, #4]
 bcc:	0a000016 	beq	c2c <__call_exitprocs+0x118>
 bd0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 bd4:	e1120001 	tst	r2, r1
 bd8:	1a000016 	bne	c38 <__call_exitprocs+0x124>
 bdc:	e59d0008 	ldr	r0, [sp, #8]
 be0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 be4:	e1a0e00f 	mov	lr, pc
 be8:	e12fff13 	bx	r3
 bec:	e5963004 	ldr	r3, [r6, #4]
 bf0:	e1530009 	cmp	r3, r9
 bf4:	1affffd0 	bne	b3c <__call_exitprocs+0x28>
 bf8:	e59b3000 	ldr	r3, [r11]
 bfc:	e1530006 	cmp	r3, r6
 c00:	1affffcd 	bne	b3c <__call_exitprocs+0x28>
 c04:	e2444001 	sub	r4, r4, #1
 c08:	e3740001 	cmn	r4, #1
 c0c:	e2455004 	sub	r5, r5, #4
 c10:	1affffdc 	bne	b88 <__call_exitprocs+0x74>
 c14:	e59f1070 	ldr	r1, [pc, #112]	; c8c <__call_exitprocs+0x178>
 c18:	e3510000 	cmp	r1, #0
 c1c:	1a000009 	bne	c48 <__call_exitprocs+0x134>
 c20:	e28dd014 	add	sp, sp, #20
 c24:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 c28:	e12fff1e 	bx	lr
 c2c:	e1a0e00f 	mov	lr, pc
 c30:	e12fff13 	bx	r3
 c34:	eaffffec 	b	bec <__call_exitprocs+0xd8>
 c38:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 c3c:	e1a0e00f 	mov	lr, pc
 c40:	e12fff13 	bx	r3
 c44:	eaffffe8 	b	bec <__call_exitprocs+0xd8>
 c48:	e5963004 	ldr	r3, [r6, #4]
 c4c:	e3530000 	cmp	r3, #0
 c50:	e5963000 	ldr	r3, [r6]
 c54:	1a000008 	bne	c7c <__call_exitprocs+0x168>
 c58:	e3530000 	cmp	r3, #0
 c5c:	0a000006 	beq	c7c <__call_exitprocs+0x168>
 c60:	e1a00006 	mov	r0, r6
 c64:	e58b3000 	str	r3, [r11]
 c68:	e320f000 	nop	{0}
 c6c:	e59b6000 	ldr	r6, [r11]
 c70:	e3560000 	cmp	r6, #0
 c74:	1affffb5 	bne	b50 <__call_exitprocs+0x3c>
 c78:	eaffffe8 	b	c20 <__call_exitprocs+0x10c>
 c7c:	e1a0b006 	mov	r11, r6
 c80:	e1a06003 	mov	r6, r3
 c84:	eafffff9 	b	c70 <__call_exitprocs+0x15c>
 c88:	00000e04 	.word	0x00000e04
 c8c:	00000000 	.word	0x00000000

00000c90 <register_fini>:
 c90:	e92d4008 	push	{r3, lr}
 c94:	e59f3010 	ldr	r3, [pc, #16]	; cac <register_fini+0x1c>
 c98:	e3530000 	cmp	r3, #0
 c9c:	159f000c 	ldrne	r0, [pc, #12]	; cb0 <register_fini+0x20>
 ca0:	1bffff49 	blne	9cc <atexit>
 ca4:	e8bd4008 	pop	{r3, lr}
 ca8:	e12fff1e 	bx	lr
 cac:	00000e2c 	.word	0x00000e2c
 cb0:	00000cb4 	.word	0x00000cb4

00000cb4 <__libc_fini_array>:
 cb4:	e92d4038 	push	{r3, r4, r5, lr}
 cb8:	e59f5030 	ldr	r5, [pc, #48]	; cf0 <__libc_fini_array+0x3c>
 cbc:	e59f4030 	ldr	r4, [pc, #48]	; cf4 <__libc_fini_array+0x40>
 cc0:	e0654004 	rsb	r4, r5, r4
 cc4:	e1b04144 	asrs	r4, r4, #2
 cc8:	10855104 	addne	r5, r5, r4, lsl #2
 ccc:	0a000004 	beq	ce4 <__libc_fini_array+0x30>
 cd0:	e5353004 	ldr	r3, [r5, #-4]!
 cd4:	e1a0e00f 	mov	lr, pc
 cd8:	e12fff13 	bx	r3
 cdc:	e2544001 	subs	r4, r4, #1
 ce0:	1afffffa 	bne	cd0 <__libc_fini_array+0x1c>
 ce4:	eb000050 	bl	e2c <__libc_fini>
 ce8:	e8bd4038 	pop	{r3, r4, r5, lr}
 cec:	e12fff1e 	bx	lr
 cf0:	00000e44 	.word	0x00000e44
 cf4:	00000e48 	.word	0x00000e48

00000cf8 <__cs3_premain>:
 cf8:	e92d4008 	push	{r3, lr}
 cfc:	eb00001d 	bl	d78 <__libc_init_array>
 d00:	e59f3030 	ldr	r3, [pc, #48]	; d38 <__cs3_premain+0x40>
 d04:	e3530000 	cmp	r3, #0
 d08:	15930000 	ldrne	r0, [r3]
 d0c:	01a00003 	moveq	r0, r3
 d10:	e59f3024 	ldr	r3, [pc, #36]	; d3c <__cs3_premain+0x44>
 d14:	e3530000 	cmp	r3, #0
 d18:	15931000 	ldrne	r1, [r3]
 d1c:	01a01003 	moveq	r1, r3
 d20:	e3a02000 	mov	r2, #0
 d24:	ebfffebc 	bl	81c <main>
 d28:	e59f3010 	ldr	r3, [pc, #16]	; d40 <__cs3_premain+0x48>
 d2c:	e3530000 	cmp	r3, #0
 d30:	1bffff2d 	blne	9ec <exit>
 d34:	eafffffe 	b	d34 <__cs3_premain+0x3c>
	...
 d40:	000009ec 	.word	0x000009ec

00000d44 <_exit>:
 d44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 d48:	e3a00018 	mov	r0, #24
 d4c:	e59f1004 	ldr	r1, [pc, #4]	; d58 <_exit+0x14>
 d50:	ef123456 	svc	0x00123456
 d54:	eafffffe 	b	d54 <_exit+0x10>
 d58:	00020026 	.word	0x00020026

00000d5c <__cs3_isr_interrupt>:
 d5c:	eafffffe 	b	d5c <__cs3_isr_interrupt>

00000d60 <__cs3_isr_undef>:
 d60:	eafffffe 	b	d60 <__cs3_isr_undef>

00000d64 <__cs3_isr_swi>:
 d64:	eafffffe 	b	d64 <__cs3_isr_swi>

00000d68 <__cs3_isr_pabort>:
 d68:	eafffffe 	b	d68 <__cs3_isr_pabort>

00000d6c <__cs3_isr_dabort>:
 d6c:	eafffffe 	b	d6c <__cs3_isr_dabort>

00000d70 <__cs3_isr_irq>:
 d70:	eafffffe 	b	d70 <__cs3_isr_irq>

00000d74 <__cs3_isr_fiq>:
 d74:	eafffffe 	b	d74 <__cs3_isr_fiq>

00000d78 <__libc_init_array>:
 d78:	e92d4070 	push	{r4, r5, r6, lr}
 d7c:	e59f506c 	ldr	r5, [pc, #108]	; df0 <__libc_init_array+0x78>
 d80:	e59f606c 	ldr	r6, [pc, #108]	; df4 <__libc_init_array+0x7c>
 d84:	e0656006 	rsb	r6, r5, r6
 d88:	e1b06146 	asrs	r6, r6, #2
 d8c:	12455004 	subne	r5, r5, #4
 d90:	13a04000 	movne	r4, #0
 d94:	0a000005 	beq	db0 <__libc_init_array+0x38>
 d98:	e5b53004 	ldr	r3, [r5, #4]!
 d9c:	e2844001 	add	r4, r4, #1
 da0:	e1a0e00f 	mov	lr, pc
 da4:	e12fff13 	bx	r3
 da8:	e1560004 	cmp	r6, r4
 dac:	1afffff9 	bne	d98 <__libc_init_array+0x20>
 db0:	e59f5040 	ldr	r5, [pc, #64]	; df8 <__libc_init_array+0x80>
 db4:	e59f6040 	ldr	r6, [pc, #64]	; dfc <__libc_init_array+0x84>
 db8:	e0656006 	rsb	r6, r5, r6
 dbc:	eb000012 	bl	e0c <_init>
 dc0:	e1b06146 	asrs	r6, r6, #2
 dc4:	12455004 	subne	r5, r5, #4
 dc8:	13a04000 	movne	r4, #0
 dcc:	0a000005 	beq	de8 <__libc_init_array+0x70>
 dd0:	e5b53004 	ldr	r3, [r5, #4]!
 dd4:	e2844001 	add	r4, r4, #1
 dd8:	e1a0e00f 	mov	lr, pc
 ddc:	e12fff13 	bx	r3
 de0:	e1560004 	cmp	r6, r4
 de4:	1afffff9 	bne	dd0 <__libc_init_array+0x58>
 de8:	e8bd4070 	pop	{r4, r5, r6, lr}
 dec:	e12fff1e 	bx	lr
 df0:	00000e24 	.word	0x00000e24
 df4:	00000e24 	.word	0x00000e24
 df8:	00000e24 	.word	0x00000e24
 dfc:	00000e2c 	.word	0x00000e2c

Disassembly of section .rodata:

00000e04 <_global_impure_ptr>:
 e04:	00000e70 00000043                       p...C...

00000e0c <_init>:
 e0c:	e1a0c00d 	mov	r12, sp
 e10:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 e14:	e24cb004 	sub	r11, r12, #4
 e18:	e24bd028 	sub	sp, r11, #40	; 0x28
 e1c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 e20:	e12fff1e 	bx	lr

00000e24 <__init_array_start>:
 e24:	00000c90 	.word	0x00000c90

00000e28 <__frame_dummy_init_array_entry>:
 e28:	00000208                                ....

00000e2c <__libc_fini>:
 e2c:	e1a0c00d 	mov	r12, sp
 e30:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 e34:	e24cb004 	sub	r11, r12, #4
 e38:	e24bd028 	sub	sp, r11, #40	; 0x28
 e3c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 e40:	e12fff1e 	bx	lr

00000e44 <__fini_array_start>:
 e44:	000001c4 	.word	0x000001c4

00000e48 <__cs3_regions>:
 e48:	00000000 	.word	0x00000000
 e4c:	00000040 	.word	0x00000040
 e50:	00000040 	.word	0x00000040
 e54:	00001260 	.word	0x00001260
 e58:	00000020 	.word	0x00000020

00000e5c <__cs3_regions_end>:
 e5c:	00000000 	.word	0x00000000
