
P:/G91_Lab3/LEDs.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 94 0d 00 00 98 0d 00 00 9c 0d 00 00     @...............
  30:	a0 0d 00 00 90 0d 00 00 a4 0d 00 00 a8 0d 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <HEX_8+0x59>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <HEX_8+0x55>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <HEX_8+0x5d>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <HEX_8+0x25>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <HEX_8+0x25>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <HEX_8+0xd>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <HEX_8+0x45>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <HEX_8+0x35>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <HEX_D+0x6>
  d4:	eb000314 	bl	d2c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000e90 	.word	0x00000e90

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000012c8 	.word	0x000012c8

00000124 <__cs3_heap_start_ptr>:
 124:	000012f0 	.word	0x000012f0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000012d0 	.word	0x000012d0
 170:	000012d3 	.word	0x000012d3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000012d0 	.word	0x000012d0
 1bc:	000012d0 	.word	0x000012d0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000012d0 	.word	0x000012d0
 200:	00000000 	.word	0x00000000
 204:	00000e34 	.word	0x00000e34

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000e34 	.word	0x00000e34
 250:	000012d4 	.word	0x000012d4
 254:	00000e90 	.word	0x00000e90
 258:	00000000 	.word	0x00000000

0000025c <read_LEDs_ASM>:
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
 25c:	e59f1010 	ldr	r1, [pc, #16]	; 274 <write_LEDs_ASM+0xc>
LDR R0, [R1]
 260:	e5910000 	ldr	r0, [r1]
BX LR
 264:	e12fff1e 	bx	lr

00000268 <write_LEDs_ASM>:
write_LEDs_ASM:
LDR R1, =SW_BASE
 268:	e59f1004 	ldr	r1, [pc, #4]	; 274 <write_LEDs_ASM+0xc>
STR R0, [R1]
 26c:	e5810000 	str	r0, [r1]
BX LR
 270:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
 274:	ff200000 	.word	0xff200000

00000278 <read_slider_switches_ASM>:
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
 278:	e59f1004 	ldr	r1, [pc, #4]	; 284 <read_slider_switches_ASM+0xc>
LDR R0, [R1]
 27c:	e5910000 	ldr	r0, [r1]
BX LR
 280:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
 284:	ff200040 	.word	0xff200040

00000288 <HEX_clear_ASM>:
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
 288:	e59f1274 	ldr	r1, [pc, #628]	; 504 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
 28c:	e59f2274 	ldr	r2, [pc, #628]	; 508 <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
 290:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
 294:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
 298:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
 29c:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 2a0:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 2a4:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 2a8:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
 2ac:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
 2b0:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
 2b4:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 2b8:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
 2bc:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
 2c0:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF00FFFF
 2c4:	e3e038ff 	mvn	r3, #16711680	; 0xff0000
CMP R5, #1
 2c8:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 2cc:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
 2d0:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
 2d4:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FFFFFF
 2d8:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
CMP R5, #1
 2dc:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 2e0:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
 2e4:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
 2e8:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
 2ec:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 2f0:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
 2f4:	00077003 	andeq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 2f8:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
 2fc:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
 300:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
 304:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
 308:	00077003 	andeq	r7, r7, r3

STR R6, [R1]
 30c:	e5816000 	str	r6, [r1]
STR R7, [R2]
 310:	e5827000 	str	r7, [r2]

BX LR
 314:	e12fff1e 	bx	lr

00000318 <HEX_flood_ASM>:
HEX_flood_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
 318:	e59f11e4 	ldr	r1, [pc, #484]	; 504 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
 31c:	e59f21e4 	ldr	r2, [pc, #484]	; 508 <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
 320:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
 324:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
 328:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF		//OFF
 32c:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 330:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 334:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 338:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
 33c:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
 340:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
 344:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 348:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
 34c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
 350:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FF0000
 354:	e3a038ff 	mov	r3, #16711680	; 0xff0000
CMP R5, #1
 358:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 35c:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
 360:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
 364:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF000000
 368:	e3a034ff 	mov	r3, #-16777216	; 0xff000000
CMP R5, #1
 36c:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 370:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
 374:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
 378:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF	//OFF
 37c:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 380:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
 384:	01877003 	orreq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 388:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
 38c:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
 390:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
 394:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
 398:	01877003 	orreq	r7, r7, r3

STR R6, [R1]
 39c:	e5816000 	str	r6, [r1]
STR R7, [R2]
 3a0:	e5827000 	str	r7, [r2]

BX LR
 3a4:	e12fff1e 	bx	lr

000003a8 <HEX_write_ASM>:
HEX_write_ASM:
CMP R1,#48
 3a8:	e3510030 	cmp	r1, #48	; 0x30
MOVEQ R4, #HEX_0
 3ac:	03a0403f 	moveq	r4, #63	; 0x3f
BEQ WRITE
 3b0:	0a00002c 	beq	468 <WRITE>
CMP R1,#49
 3b4:	e3510031 	cmp	r1, #49	; 0x31
MOVEQ R4, #HEX_1
 3b8:	03a04006 	moveq	r4, #6
BEQ WRITE
 3bc:	0a000029 	beq	468 <WRITE>
CMP R1,#50
 3c0:	e3510032 	cmp	r1, #50	; 0x32
MOVEQ R4, #HEX_2
 3c4:	03a0405b 	moveq	r4, #91	; 0x5b
BEQ WRITE
 3c8:	0a000026 	beq	468 <WRITE>
CMP R1,#51
 3cc:	e3510033 	cmp	r1, #51	; 0x33
MOVEQ R4, #HEX_3
 3d0:	03a0404f 	moveq	r4, #79	; 0x4f
BEQ WRITE
 3d4:	0a000023 	beq	468 <WRITE>
CMP R1,#52
 3d8:	e3510034 	cmp	r1, #52	; 0x34
MOVEQ R4, #HEX_4
 3dc:	03a04066 	moveq	r4, #102	; 0x66
BEQ WRITE
 3e0:	0a000020 	beq	468 <WRITE>
CMP R1,#53
 3e4:	e3510035 	cmp	r1, #53	; 0x35
MOVEQ R4, #HEX_5
 3e8:	03a0406d 	moveq	r4, #109	; 0x6d
BEQ WRITE
 3ec:	0a00001d 	beq	468 <WRITE>
CMP R1,#54
 3f0:	e3510036 	cmp	r1, #54	; 0x36
MOVEQ R4, #HEX_6
 3f4:	03a0407d 	moveq	r4, #125	; 0x7d
BEQ WRITE
 3f8:	0a00001a 	beq	468 <WRITE>
CMP R1,#55
 3fc:	e3510037 	cmp	r1, #55	; 0x37
MOVEQ R4, #HEX_7
 400:	03a04007 	moveq	r4, #7
BEQ WRITE
 404:	0a000017 	beq	468 <WRITE>
CMP R1,#56
 408:	e3510038 	cmp	r1, #56	; 0x38
MOVEQ R4, #HEX_8
 40c:	03a0407f 	moveq	r4, #127	; 0x7f
BEQ WRITE
 410:	0a000014 	beq	468 <WRITE>
CMP R1,#57
 414:	e3510039 	cmp	r1, #57	; 0x39
MOVEQ R4, #HEX_9
 418:	03a0406f 	moveq	r4, #111	; 0x6f
BEQ WRITE
 41c:	0a000011 	beq	468 <WRITE>
CMP R1,#65
 420:	e3510041 	cmp	r1, #65	; 0x41
MOVEQ R4, #HEX_A
 424:	03a04077 	moveq	r4, #119	; 0x77
BEQ WRITE
 428:	0a00000e 	beq	468 <WRITE>
CMP R1,#66
 42c:	e3510042 	cmp	r1, #66	; 0x42
MOVEQ R4, #HEX_B
 430:	03a0407c 	moveq	r4, #124	; 0x7c
BEQ WRITE
 434:	0a00000b 	beq	468 <WRITE>
CMP R1,#67
 438:	e3510043 	cmp	r1, #67	; 0x43
MOVEQ R4, #HEX_C
 43c:	03a04039 	moveq	r4, #57	; 0x39
BEQ WRITE
 440:	0a000008 	beq	468 <WRITE>
CMP R1,#68
 444:	e3510044 	cmp	r1, #68	; 0x44
MOVEQ R4, #HEX_D
 448:	03a0405e 	moveq	r4, #94	; 0x5e
BEQ WRITE
 44c:	0a000005 	beq	468 <WRITE>
CMP R1,#69
 450:	e3510045 	cmp	r1, #69	; 0x45
MOVEQ R4, #HEX_E
 454:	03a04079 	moveq	r4, #121	; 0x79
BEQ WRITE
 458:	0a000002 	beq	468 <WRITE>
CMP R1,#70
 45c:	e3510046 	cmp	r1, #70	; 0x46
MOVEQ R4, #HEX_F
 460:	03a04071 	moveq	r4, #113	; 0x71
BEQ WRITE
 464:	0affffff 	beq	468 <WRITE>

00000468 <WRITE>:
WRITE:

LDR R2, =HEX_BASE1		//0-3 HEX DISPLAY
 468:	e59f2094 	ldr	r2, [pc, #148]	; 504 <WRITE+0x9c>
LDR R3, =HEX_BASE2		//4-5 HEX DISPLAY
 46c:	e59f3094 	ldr	r3, [pc, #148]	; 508 <WRITE+0xa0>
LDR R5, [R2]			//LOAD STATE OF 0-3 HEX DISPLAY
 470:	e5925000 	ldr	r5, [r2]
LDR R6, [R3]			//LOAD STATE OF 4-5 HEX DISPLAY
 474:	e5936000 	ldr	r6, [r3]

CMP R0, #0x00000001
 478:	e3500001 	cmp	r0, #1
MOVEQ R7, #0xFFFFFF00		//OFF
 47c:	03e070ff 	mvneq	r7, #255	; 0xff
ANDEQ R7, R7, R5		//APPLY THE MASK
 480:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 484:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 488:	05827000 	streq	r7, [r2]

CMP R0, #0x00000002
 48c:	e3500002 	cmp	r0, #2
MOVEQ R7, #0xFFFF00FF		//OFF
 490:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
 494:	01a04404 	lsleq	r4, r4, #8
ANDEQ R7, R7, R5		//APPLY THE MASK
 498:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 49c:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 4a0:	05827000 	streq	r7, [r2]

CMP R0, #0x00000004
 4a4:	e3500004 	cmp	r0, #4
MOVEQ R7, #0xFF00FFFF		//OFF
 4a8:	03e078ff 	mvneq	r7, #16711680	; 0xff0000
LSLEQ R4, #16
 4ac:	01a04804 	lsleq	r4, r4, #16
ANDEQ R7, R7, R5		//APPLY THE MASK
 4b0:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 4b4:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 4b8:	05827000 	streq	r7, [r2]

CMP R0, #0x00000008
 4bc:	e3500008 	cmp	r0, #8
MOVEQ R7, #0x00FFFFFF		//OFF
 4c0:	03e074ff 	mvneq	r7, #-16777216	; 0xff000000
LSLEQ R4, #24
 4c4:	01a04c04 	lsleq	r4, r4, #24
ANDEQ R7, R7, R5		//APPLY THE MASK
 4c8:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 4cc:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 4d0:	05827000 	streq	r7, [r2]

CMP R0, #0x00000010
 4d4:	e3500010 	cmp	r0, #16
MOVEQ R8, #0xFFFFFF00		//OFF
 4d8:	03e080ff 	mvneq	r8, #255	; 0xff
ANDEQ R8, R8, R6		//APPLY THE MASK
 4dc:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
 4e0:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
 4e4:	05838000 	streq	r8, [r3]

CMP R0, #0x00000020
 4e8:	e3500020 	cmp	r0, #32
MOVEQ R7, #0xFFFF00FF		//OFF
 4ec:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
 4f0:	01a04404 	lsleq	r4, r4, #8
ANDEQ R8, R8, R6		//APPLY THE MASK
 4f4:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
 4f8:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
 4fc:	05838000 	streq	r8, [r3]


BX LR
 500:	e12fff1e 	bx	lr
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
 504:	ff200020 	.word	0xff200020
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
 508:	ff200030 	.word	0xff200030

0000050c <read_PB_data_ASM>:
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecp_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
 50c:	e59f11a4 	ldr	r1, [pc, #420]	; 6b8 <STORE_INTERRUPT_DISABLE+0x8>
LDR R0, [R1]
 510:	e5910000 	ldr	r0, [r1]
BX LR
 514:	e12fff1e 	bx	lr

00000518 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
//R0 parameter from C
LDR R1, =PUSHBUTTON_BASE
 518:	e59f1198 	ldr	r1, [pc, #408]	; 6b8 <STORE_INTERRUPT_DISABLE+0x8>
LDR R2, [R1]			//value of the data register
 51c:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
 520:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
 524:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
 528:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 52c:	03a00001 	moveq	r0, #1
BXEQ LR
 530:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
 534:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
 538:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 53c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
 540:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 544:	03a00001 	moveq	r0, #1
BXEQ LR
 548:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
 54c:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
 550:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
 554:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
 558:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 55c:	03a00001 	moveq	r0, #1
BXEQ LR
 560:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
 564:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
 568:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 56c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
 570:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 574:	03a00001 	moveq	r0, #1
BXEQ LR
 578:	012fff1e 	bxeq	lr

MOV R0, #0
 57c:	e3a00000 	mov	r0, #0
BX LR
 580:	e12fff1e 	bx	lr

00000584 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
 584:	e59f1130 	ldr	r1, [pc, #304]	; 6bc <STORE_INTERRUPT_DISABLE+0xc>
LDR R0, [R1]
 588:	e5910000 	ldr	r0, [r1]
BX LR
 58c:	e12fff1e 	bx	lr

00000590 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
 590:	e59f1124 	ldr	r1, [pc, #292]	; 6bc <STORE_INTERRUPT_DISABLE+0xc>
LDR R2, [R1]			//value of edge register
 594:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
 598:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
 59c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
 5a0:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 5a4:	03a00001 	moveq	r0, #1
BXEQ LR
 5a8:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
 5ac:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
 5b0:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 5b4:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
 5b8:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 5bc:	03a00001 	moveq	r0, #1
BXEQ LR
 5c0:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
 5c4:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
 5c8:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
 5cc:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
 5d0:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 5d4:	03a00001 	moveq	r0, #1
BXEQ LR
 5d8:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
 5dc:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
 5e0:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 5e4:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
 5e8:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 5ec:	03a00001 	moveq	r0, #1
BXEQ LR
 5f0:	012fff1e 	bxeq	lr

MOV R0, #0
 5f4:	e3a00000 	mov	r0, #0

BX LR
 5f8:	e12fff1e 	bx	lr

000005fc <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:
//R0 PARAMETER FROM C
LDR R1, =PUSHBUTTON_EDGECAPTURE
 5fc:	e59f10b8 	ldr	r1, [pc, #184]	; 6bc <STORE_INTERRUPT_DISABLE+0xc>
LDR R2, [R1]			//value of the edgecapture register
 600:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
 604:	e3a04003 	mov	r4, #3
MOV R5, #0xFFFFFFF0		//mask
 608:	e3e0500f 	mvn	r5, #15

0000060c <LOOP_CLEAR>:
LOOP_CLEAR:
SUBS R4, R4, #1			//update counter
 60c:	e2544001 	subs	r4, r4, #1
BLT  STORE_VALUE
 610:	ba000007 	blt	634 <STORE_VALUE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
 614:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
 618:	e3530001 	cmp	r3, #1
ANDEQ R2, R2, R5			//modify the value
 61c:	00022005 	andeq	r2, r2, r5
MOV R6, #2
 620:	e3a06002 	mov	r6, #2
MOV R7, #15
 624:	e3a0700f 	mov	r7, #15
MLA R5, R5, R6, R7		//update the mask for the next iteration
 628:	e0257695 	mla	r5, r5, r6, r7
LSR R0, #1
 62c:	e1a000a0 	lsr	r0, r0, #1
B LOOP_CLEAR
 630:	eafffff5 	b	60c <LOOP_CLEAR>

00000634 <STORE_VALUE>:
//FINISH CONSTRUCTING THE NEW EDGECAPTURE VALUE
STORE_VALUE:
STR R2, [R1]
 634:	e5812000 	str	r2, [r1]
BX LR
 638:	e12fff1e 	bx	lr

0000063c <enable_PB_INT_ASM>:


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
 63c:	e59f107c 	ldr	r1, [pc, #124]	; 6c0 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
 640:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
 644:	e3a04003 	mov	r4, #3
MOV R5, #0x0000000F		//mask
 648:	e3a0500f 	mov	r5, #15

0000064c <LOOP_ENABLE_INT>:
LOOP_ENABLE_INT:
SUBS R4, R4, #1			//update counter
 64c:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_ENABLE
 650:	ba000006 	blt	670 <STORE_INTERRUPT_ENABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
 654:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
 658:	e3530001 	cmp	r3, #1
ORREQ R2, R2, R5		//modify the value
 65c:	01822005 	orreq	r2, r2, r5
MOV R6, #2
 660:	e3a06002 	mov	r6, #2
MUL R5, R5, R6			//update the mask for the next iteration
 664:	e0050695 	mul	r5, r5, r6
LSR R0, #1
 668:	e1a000a0 	lsr	r0, r0, #1
B LOOP_ENABLE_INT
 66c:	eafffff6 	b	64c <LOOP_ENABLE_INT>

00000670 <STORE_INTERRUPT_ENABLE>:
STORE_INTERRUPT_ENABLE:
STR R2, [R1]
 670:	e5812000 	str	r2, [r1]
BX LR
 674:	e12fff1e 	bx	lr

00000678 <disable_PB_INT_ASM>:


disable_PB_INT_ASM:
LDR R1, =PUSHBUTTON_INTERRUPTION
 678:	e59f1040 	ldr	r1, [pc, #64]	; 6c0 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
 67c:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
 680:	e3a04003 	mov	r4, #3
MOV R5, #0xFFFFFFF0		//mask
 684:	e3e0500f 	mvn	r5, #15

00000688 <LOOP_DISABLE_INT>:
LOOP_DISABLE_INT:
SUBS R4, R4, #1			//update counter
 688:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_DISABLE
 68c:	ba000007 	blt	6b0 <STORE_INTERRUPT_DISABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
 690:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
 694:	e3530001 	cmp	r3, #1
ANDEQ R2, R2, R5		//modify the value
 698:	00022005 	andeq	r2, r2, r5
MOV R6, #2
 69c:	e3a06002 	mov	r6, #2
MOV R7, #15
 6a0:	e3a0700f 	mov	r7, #15
MLA R5, R5, R6, R7		//update the mask for the next iteration
 6a4:	e0257695 	mla	r5, r5, r6, r7
LSR R0, #1
 6a8:	e1a000a0 	lsr	r0, r0, #1
B LOOP_DISABLE_INT
 6ac:	eafffff5 	b	688 <LOOP_DISABLE_INT>

000006b0 <STORE_INTERRUPT_DISABLE>:
STORE_INTERRUPT_DISABLE:
STR R2, [R1]
 6b0:	e5812000 	str	r2, [r1]
BX LR
 6b4:	e12fff1e 	bx	lr
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecp_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
 6b8:	ff200050 	.word	0xff200050

MOV R0, #0
BX LR

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
 6bc:	ff20005c 	.word	0xff20005c
BX LR


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
 6c0:	ff200058 	.word	0xff200058

000006c4 <HPS_TIM_config_ASM>:
.equ TIM3, 0xFFC01000

.global HPS_TIM_config_ASM, HPS_TIM_read_INT_ASM, HPS_TIM_clear_INT_ASM
HPS_TIM_config_ASM:
//R0: address of the first component(TIM) in the struct
LDR R1,[R0]
 6c4:	e5901000 	ldr	r1, [r0]
PUSH {LR}
 6c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
AND R2, R1, #0x00000001				//get the bit0
 6cc:	e2012001 	and	r2, r1, #1
CMP R2, #0x00000001					//check whether bit0 is
 6d0:	e3520001 	cmp	r2, #1
LDREQ R3, =TIM0
 6d4:	059f3164 	ldreq	r3, [pc, #356]	; 840 <SET_F_S+0x28>
MOVEQ R8, #100
 6d8:	03a08064 	moveq	r8, #100	; 0x64
BLEQ SET
 6dc:	0b000010 	bleq	724 <SET>
AND R2, R1, #0x00000002				//get the bit1
 6e0:	e2012002 	and	r2, r1, #2
CMP R2, #0x00000002					//check whether bit1 is 1
 6e4:	e3520002 	cmp	r2, #2
LDREQ R3, =TIM1
 6e8:	059f3154 	ldreq	r3, [pc, #340]	; 844 <SET_F_S+0x2c>
MOVEQ R8, #100
 6ec:	03a08064 	moveq	r8, #100	; 0x64
BLEQ SET
 6f0:	0b00000b 	bleq	724 <SET>
AND R2, R1, #0x00000004				//get the bit 2
 6f4:	e2012004 	and	r2, r1, #4
CMP R2, #0x00000004					//check whether bit2 is 1
 6f8:	e3520004 	cmp	r2, #4
LDREQ R3, =TIM2
 6fc:	059f3144 	ldreq	r3, [pc, #324]	; 848 <SET_F_S+0x30>
MOVEQ R8, #25
 700:	03a08019 	moveq	r8, #25
BLEQ SET
 704:	0b000006 	bleq	724 <SET>
AND R2, R1, #0x00000008				//get the bit 3
 708:	e2012008 	and	r2, r1, #8
CMP R2, #0x00000008					//check whether bit3 is 1
 70c:	e3520008 	cmp	r2, #8
LDREQ R3, =TIM3
 710:	059f3134 	ldreq	r3, [pc, #308]	; 84c <SET_F_S+0x34>
MOVEQ R8, #25
 714:	03a08019 	moveq	r8, #25
BLEQ SET
 718:	0b000001 	bleq	724 <SET>
POP {LR}
 71c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
BX LR
 720:	e12fff1e 	bx	lr

00000724 <SET>:

SET:
ADD R4, R3, #8						//R4 IS THE ADDRESS OF THE CONTROL REGISTER
 724:	e2834008 	add	r4, r3, #8
LDR R5, [R4]						//R5 STORES THE CONTROL PART OF THE TIMER
 728:	e5945000 	ldr	r5, [r4]

LDR R7, [R0, #8]					//READ THE ENABLE PARAMETER
 72c:	e5907008 	ldr	r7, [r0, #8]
CMP R7, #1							//CHECK WHETHER ENABLE IS 1
 730:	e3570001 	cmp	r7, #1
ORREQ R5, R5, #0x00000002			//UPDATE THE bitM WITH 1
 734:	03855002 	orreq	r5, r5, #2
ANDEQ R5, R5, #0xFFFFFFFE			//SET THE E TO 0, SO THE LOAD VALUE CAN BE WRITE TO THE LOAD REGISTER
 738:	03c55001 	biceq	r5, r5, #1
STREQ R5, [R0, #8] 
 73c:	05805008 	streq	r5, [r0, #8]
LDREQ R6, [R0, #4] 					//R6 STORES THE TIME OUT PARAMETER
 740:	05906004 	ldreq	r6, [r0, #4]
MULEQ R6, R6, R8					//CALCUALTE THE LOAD VALUE CONSIDERING THE CLOCK FREQUENCY
 744:	00060896 	muleq	r6, r6, r8
STREQ R6, [R3] 						//UPDATE THE LOAD REGISTER
 748:	05836000 	streq	r6, [r3]
ANDNE R5, R5, #0xFFFFFFFD			//UPDATE THE bitM WITH 0
 74c:	13c55002 	bicne	r5, r5, #2

LDR R7, [R0, #16]					//READ THE ENABLE PARAMETER
 750:	e5907010 	ldr	r7, [r0, #16]
CMP R7, #0x00000001							
 754:	e3570001 	cmp	r7, #1
ORREQ R5, R5, #0x00000001			//UPDATE THE bitE BASED ON THE PARAMETER
 758:	03855001 	orreq	r5, r5, #1
ANDNE R5, R5, #0xFFFFFFFE
 75c:	13c55001 	bicne	r5, r5, #1

//SET THE I
LDR R7, [R0, #12]					//READ THE INT_ENABLE PARAMETER
 760:	e590700c 	ldr	r7, [r0, #12]
CMP R7, #1
 764:	e3570001 	cmp	r7, #1
ORREQ R5, R5, #0x00000004			//UPDATE THE bitI based on the parameter
 768:	03855004 	orreq	r5, r5, #4
ANDNE R5, R5, #0xFFFFFFFB
 76c:	13c55004 	bicne	r5, r5, #4

STR R5, [R3, #8]
 770:	e5835008 	str	r5, [r3, #8]
BX LR
 774:	e12fff1e 	bx	lr

00000778 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
LDR R1,[R0]							//LOAD THE PARAMETER VALUE (first component: TIM)
 778:	e5901000 	ldr	r1, [r0]
AND R2, R1, #0x00000001				//get the bit0
 77c:	e2012001 	and	r2, r1, #1
CMP R2, #0x00000001
 780:	e3520001 	cmp	r2, #1
LDREQ R3,=TIM0
 784:	059f30b4 	ldreq	r3, [pc, #180]	; 840 <SET_F_S+0x28>
BEQ READS
 788:	0a00000b 	beq	7bc <READS>
AND R2, R1, #0x00000002				//get the bit1
 78c:	e2012002 	and	r2, r1, #2
CMP R2, #0x00000002	
 790:	e3520002 	cmp	r2, #2
LDREQ R3,=TIM1
 794:	059f30a8 	ldreq	r3, [pc, #168]	; 844 <SET_F_S+0x2c>
BEQ READS
 798:	0a000007 	beq	7bc <READS>
AND R2, R1, #0x00000004				//get the bit2
 79c:	e2012004 	and	r2, r1, #4
CMP R2, #0x00000004
 7a0:	e3520004 	cmp	r2, #4
LDREQ R3,=TIM2
 7a4:	059f309c 	ldreq	r3, [pc, #156]	; 848 <SET_F_S+0x30>
BEQ READS
 7a8:	0a000003 	beq	7bc <READS>
AND R2, R1, #0x00000008				//get the bit3
 7ac:	e2012008 	and	r2, r1, #8
CMP R2, #0x00000008
 7b0:	e3520008 	cmp	r2, #8
LDREQ R3,=TIM3
 7b4:	059f3090 	ldreq	r3, [pc, #144]	; 84c <SET_F_S+0x34>
BEQ READS
 7b8:	0affffff 	beq	7bc <READS>

000007bc <READS>:
READS:
LDR R4, [R3, #16]
 7bc:	e5934010 	ldr	r4, [r3, #16]
AND R0, R3, #1
 7c0:	e2030001 	and	r0, r3, #1
BX LR
 7c4:	e12fff1e 	bx	lr

000007c8 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
//R0: address of the first component(TIM) in the struct
LDR R1,[R0]
 7c8:	e5901000 	ldr	r1, [r0]
PUSH {LR}
 7cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
AND R2, R1, #0x00000001				//get the bit0
 7d0:	e2012001 	and	r2, r1, #1
CMP R2, #0x00000001					//check whether bit0 is
 7d4:	e3520001 	cmp	r2, #1
LDREQ R3, =TIM0
 7d8:	059f3060 	ldreq	r3, [pc, #96]	; 840 <SET_F_S+0x28>
BLEQ SET_F_S
 7dc:	0b00000d 	bleq	818 <SET_F_S>
AND R2, R1, #0x00000002				//get the bit1
 7e0:	e2012002 	and	r2, r1, #2
CMP R2, #0x00000002					//check whether bit1 is 1
 7e4:	e3520002 	cmp	r2, #2
LDREQ R3, =TIM1
 7e8:	059f3054 	ldreq	r3, [pc, #84]	; 844 <SET_F_S+0x2c>
BLEQ SET_F_S
 7ec:	0b000009 	bleq	818 <SET_F_S>
AND R2, R1, #0x00000004				//get the bit 2
 7f0:	e2012004 	and	r2, r1, #4
CMP R2, #0x00000004					//check whether bit2 is 1
 7f4:	e3520004 	cmp	r2, #4
LDREQ R3, =TIM2
 7f8:	059f3048 	ldreq	r3, [pc, #72]	; 848 <SET_F_S+0x30>
BLEQ SET_F_S
 7fc:	0b000005 	bleq	818 <SET_F_S>
AND R2, R1, #0x00000008				//get the bit 3
 800:	e2012008 	and	r2, r1, #8
CMP R2, #0x00000008					//check whether bit3 is 1
 804:	e3520008 	cmp	r2, #8
LDREQ R3, =TIM3
 808:	059f303c 	ldreq	r3, [pc, #60]	; 84c <SET_F_S+0x34>
BLEQ SET_F_S
 80c:	0b000001 	bleq	818 <SET_F_S>
POP {LR}
 810:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
BX LR
 814:	e12fff1e 	bx	lr

00000818 <SET_F_S>:
SET_F_S:
LDR R4, [R3, #8]
 818:	e5934008 	ldr	r4, [r3, #8]
LDR R5, [R3, #8]
 81c:	e5935008 	ldr	r5, [r3, #8]
MOV R10, #0xFFFFFFFB
 820:	e3e0a004 	mvn	r10, #4
ORR R5, R5, R10
 824:	e185500a 	orr	r5, r5, r10
STR R5, [R3, #8]
 828:	e5835008 	str	r5, [r3, #8]
MOV R6, #0
 82c:	e3a06000 	mov	r6, #0
STR R6, [R3, #12]
 830:	e583600c 	str	r6, [r3, #12]
STR R6, [R3, #16]
 834:	e5836010 	str	r6, [r3, #16]
STR R4, [R3, #8]
 838:	e5834008 	str	r4, [r3, #8]
BX LR
 83c:	e12fff1e 	bx	lr
//R0: address of the first component(TIM) in the struct
LDR R1,[R0]
PUSH {LR}
AND R2, R1, #0x00000001				//get the bit0
CMP R2, #0x00000001					//check whether bit0 is
LDREQ R3, =TIM0
 840:	ffc08000 	.word	0xffc08000
MOVEQ R8, #100
BLEQ SET
AND R2, R1, #0x00000002				//get the bit1
CMP R2, #0x00000002					//check whether bit1 is 1
LDREQ R3, =TIM1
 844:	ffc09000 	.word	0xffc09000
MOVEQ R8, #100
BLEQ SET
AND R2, R1, #0x00000004				//get the bit 2
CMP R2, #0x00000004					//check whether bit2 is 1
LDREQ R3, =TIM2
 848:	ffd00000 	.word	0xffd00000
MOVEQ R8, #25
BLEQ SET
AND R2, R1, #0x00000008				//get the bit 3
CMP R2, #0x00000008					//check whether bit3 is 1
LDREQ R3, =TIM3
 84c:	ffc01000 	.word	0xffc01000

00000850 <main>:
#include "./drivers/inc/LEDs.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"

int main(){
 850:	e92d4800 	push	{r11, lr}
 854:	e28db004 	add	r11, sp, #4
 858:	e24dd028 	sub	sp, sp, #40	; 0x28
	int count0 = 0, count1 = 0, count2 = 0, count3 = 0;
 85c:	e3a03000 	mov	r3, #0
 860:	e50b3008 	str	r3, [r11, #-8]
 864:	e3a03000 	mov	r3, #0
 868:	e50b300c 	str	r3, [r11, #-12]
 86c:	e3a03000 	mov	r3, #0
 870:	e50b3010 	str	r3, [r11, #-16]
 874:	e3a03000 	mov	r3, #0
 878:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

	HPS_TIM_config_t hps_tim;

	hps_tim.tim = TIM0|TIM1|TIM2|TIM3;
 87c:	e3a0300f 	mov	r3, #15
 880:	e54b3028 	strb	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.timeout = 1000000;
 884:	e3043240 	movw	r3, #16960	; 0x4240
 888:	e340300f 	movt	r3, #15
 88c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.LD_en = 1;
 890:	e3a03001 	mov	r3, #1
 894:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	hps_tim.INT_en = 1;
 898:	e3a03001 	mov	r3, #1
 89c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	hps_tim.enable = 1;
 8a0:	e3a03001 	mov	r3, #1
 8a4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8

	HPS_TIM_config_ASM(&hps_tim);
 8a8:	e24b3028 	sub	r3, r11, #40	; 0x28
 8ac:	e1a00003 	mov	r0, r3
 8b0:	ebffff83 	bl	6c4 <HPS_TIM_config_ASM>
 8b4:	ea000000 	b	8bc <main+0x6c>
			HPS_TIM_clear_INT_ASM(TIM3);
			if (++count3 == 16) 
				count3 = 0;
			HEX_write_ASM(HEX3, count3);
		}
	}
 8b8:	e1a00000 	nop			; (mov r0, r0)
	hps_tim.enable = 1;

	HPS_TIM_config_ASM(&hps_tim);

	while (1) {
		if (HPS_TIM_read_INT_ASM(TIM0)) {
 8bc:	e3a00001 	mov	r0, #1
 8c0:	ebffffac 	bl	778 <HPS_TIM_read_INT_ASM>
 8c4:	e1a03000 	mov	r3, r0
 8c8:	e3530000 	cmp	r3, #0
 8cc:	0a00000e 	beq	90c <main+0xbc>
			HPS_TIM_clear_INT_ASM(TIM0);
 8d0:	e3a00001 	mov	r0, #1
 8d4:	ebffffbb 	bl	7c8 <HPS_TIM_clear_INT_ASM>
			if (++count0 == 16) 
 8d8:	e51b3008 	ldr	r3, [r11, #-8]
 8dc:	e2833001 	add	r3, r3, #1
 8e0:	e50b3008 	str	r3, [r11, #-8]
 8e4:	e51b3008 	ldr	r3, [r11, #-8]
 8e8:	e3530010 	cmp	r3, #16
 8ec:	1a000001 	bne	8f8 <main+0xa8>
				count0 = 0;
 8f0:	e3a03000 	mov	r3, #0
 8f4:	e50b3008 	str	r3, [r11, #-8]
			HEX_write_ASM(HEX0, count0);
 8f8:	e51b3008 	ldr	r3, [r11, #-8]
 8fc:	e6ef3073 	uxtb	r3, r3
 900:	e3a00001 	mov	r0, #1
 904:	e1a01003 	mov	r1, r3
 908:	ebfffea6 	bl	3a8 <HEX_write_ASM>
		}

		if (HPS_TIM_read_INT_ASM(TIM1)) {
 90c:	e3a00002 	mov	r0, #2
 910:	ebffff98 	bl	778 <HPS_TIM_read_INT_ASM>
 914:	e1a03000 	mov	r3, r0
 918:	e3530000 	cmp	r3, #0
 91c:	0a00000e 	beq	95c <main+0x10c>
			HPS_TIM_clear_INT_ASM(TIM1);
 920:	e3a00002 	mov	r0, #2
 924:	ebffffa7 	bl	7c8 <HPS_TIM_clear_INT_ASM>
			if (++count1 == 16) 
 928:	e51b300c 	ldr	r3, [r11, #-12]
 92c:	e2833001 	add	r3, r3, #1
 930:	e50b300c 	str	r3, [r11, #-12]
 934:	e51b300c 	ldr	r3, [r11, #-12]
 938:	e3530010 	cmp	r3, #16
 93c:	1a000001 	bne	948 <main+0xf8>
				count1 = 0;
 940:	e3a03000 	mov	r3, #0
 944:	e50b300c 	str	r3, [r11, #-12]
			HEX_write_ASM(HEX1, count1);
 948:	e51b300c 	ldr	r3, [r11, #-12]
 94c:	e6ef3073 	uxtb	r3, r3
 950:	e3a00002 	mov	r0, #2
 954:	e1a01003 	mov	r1, r3
 958:	ebfffe92 	bl	3a8 <HEX_write_ASM>
		}

		if (HPS_TIM_read_INT_ASM(TIM2)) {
 95c:	e3a00004 	mov	r0, #4
 960:	ebffff84 	bl	778 <HPS_TIM_read_INT_ASM>
 964:	e1a03000 	mov	r3, r0
 968:	e3530000 	cmp	r3, #0
 96c:	0a00000e 	beq	9ac <main+0x15c>
			HPS_TIM_clear_INT_ASM(TIM2);
 970:	e3a00004 	mov	r0, #4
 974:	ebffff93 	bl	7c8 <HPS_TIM_clear_INT_ASM>
			if (++count2 == 16) 
 978:	e51b3010 	ldr	r3, [r11, #-16]
 97c:	e2833001 	add	r3, r3, #1
 980:	e50b3010 	str	r3, [r11, #-16]
 984:	e51b3010 	ldr	r3, [r11, #-16]
 988:	e3530010 	cmp	r3, #16
 98c:	1a000001 	bne	998 <main+0x148>
				count2 = 0;
 990:	e3a03000 	mov	r3, #0
 994:	e50b3010 	str	r3, [r11, #-16]
			HEX_write_ASM(HEX2, count2);
 998:	e51b3010 	ldr	r3, [r11, #-16]
 99c:	e6ef3073 	uxtb	r3, r3
 9a0:	e3a00004 	mov	r0, #4
 9a4:	e1a01003 	mov	r1, r3
 9a8:	ebfffe7e 	bl	3a8 <HEX_write_ASM>
		}

		if (HPS_TIM_read_INT_ASM(TIM3)) {
 9ac:	e3a00008 	mov	r0, #8
 9b0:	ebffff70 	bl	778 <HPS_TIM_read_INT_ASM>
 9b4:	e1a03000 	mov	r3, r0
 9b8:	e3530000 	cmp	r3, #0
 9bc:	0affffbd 	beq	8b8 <main+0x68>
			HPS_TIM_clear_INT_ASM(TIM3);
 9c0:	e3a00008 	mov	r0, #8
 9c4:	ebffff7f 	bl	7c8 <HPS_TIM_clear_INT_ASM>
			if (++count3 == 16) 
 9c8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 9cc:	e2833001 	add	r3, r3, #1
 9d0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 9d4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 9d8:	e3530010 	cmp	r3, #16
 9dc:	1a000001 	bne	9e8 <main+0x198>
				count3 = 0;
 9e0:	e3a03000 	mov	r3, #0
 9e4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			HEX_write_ASM(HEX3, count3);
 9e8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 9ec:	e6ef3073 	uxtb	r3, r3
 9f0:	e3a00008 	mov	r0, #8
 9f4:	e1a01003 	mov	r1, r3
 9f8:	ebfffe6a 	bl	3a8 <HEX_write_ASM>
		}
	}
 9fc:	eaffffad 	b	8b8 <main+0x68>

00000a00 <atexit>:
 a00:	e1a01000 	mov	r1, r0
 a04:	e3a00000 	mov	r0, #0
 a08:	e92d4008 	push	{r3, lr}
 a0c:	e1a02000 	mov	r2, r0
 a10:	e1a03000 	mov	r3, r0
 a14:	eb00000e 	bl	a54 <__register_exitproc>
 a18:	e8bd4008 	pop	{r3, lr}
 a1c:	e12fff1e 	bx	lr

00000a20 <exit>:
 a20:	e92d4008 	push	{r3, lr}
 a24:	e3a01000 	mov	r1, #0
 a28:	e1a04000 	mov	r4, r0
 a2c:	eb000045 	bl	b48 <__call_exitprocs>
 a30:	e59f3018 	ldr	r3, [pc, #24]	; a50 <exit+0x30>
 a34:	e5930000 	ldr	r0, [r3]
 a38:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 a3c:	e3530000 	cmp	r3, #0
 a40:	11a0e00f 	movne	lr, pc
 a44:	112fff13 	bxne	r3
 a48:	e1a00004 	mov	r0, r4
 a4c:	eb0000c9 	bl	d78 <_exit>
 a50:	00000e38 	.word	0x00000e38

00000a54 <__register_exitproc>:
 a54:	e59fc0e4 	ldr	r12, [pc, #228]	; b40 <__register_exitproc+0xec>
 a58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 a5c:	e59c4000 	ldr	r4, [r12]
 a60:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 a64:	e35c0000 	cmp	r12, #0
 a68:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 a6c:	e59c5004 	ldr	r5, [r12, #4]
 a70:	0584c148 	streq	r12, [r4, #328]	; 0x148
 a74:	e355001f 	cmp	r5, #31
 a78:	e24dd010 	sub	sp, sp, #16
 a7c:	e1a06000 	mov	r6, r0
 a80:	da000015 	ble	adc <__register_exitproc+0x88>
 a84:	e59f00b8 	ldr	r0, [pc, #184]	; b44 <__register_exitproc+0xf0>
 a88:	e3500000 	cmp	r0, #0
 a8c:	1a000001 	bne	a98 <__register_exitproc+0x44>
 a90:	e3e00000 	mvn	r0, #0
 a94:	ea000018 	b	afc <__register_exitproc+0xa8>
 a98:	e3a00e19 	mov	r0, #400	; 0x190
 a9c:	e58d100c 	str	r1, [sp, #12]
 aa0:	e58d2008 	str	r2, [sp, #8]
 aa4:	e58d3004 	str	r3, [sp, #4]
 aa8:	e320f000 	nop	{0}
 aac:	e250c000 	subs	r12, r0, #0
 ab0:	e59d100c 	ldr	r1, [sp, #12]
 ab4:	e59d2008 	ldr	r2, [sp, #8]
 ab8:	e59d3004 	ldr	r3, [sp, #4]
 abc:	0afffff3 	beq	a90 <__register_exitproc+0x3c>
 ac0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 ac4:	e3a00000 	mov	r0, #0
 ac8:	e58c0004 	str	r0, [r12, #4]
 acc:	e58c5000 	str	r5, [r12]
 ad0:	e584c148 	str	r12, [r4, #328]	; 0x148
 ad4:	e58c0188 	str	r0, [r12, #392]	; 0x188
 ad8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 adc:	e3560000 	cmp	r6, #0
 ae0:	e59c4004 	ldr	r4, [r12, #4]
 ae4:	1a000007 	bne	b08 <__register_exitproc+0xb4>
 ae8:	e2843002 	add	r3, r4, #2
 aec:	e2844001 	add	r4, r4, #1
 af0:	e78c1103 	str	r1, [r12, r3, lsl #2]
 af4:	e58c4004 	str	r4, [r12, #4]
 af8:	e3a00000 	mov	r0, #0
 afc:	e28dd010 	add	sp, sp, #16
 b00:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 b04:	e12fff1e 	bx	lr
 b08:	e3a00001 	mov	r0, #1
 b0c:	e1a00410 	lsl	r0, r0, r4
 b10:	e08c8104 	add	r8, r12, r4, lsl #2
 b14:	e3560002 	cmp	r6, #2
 b18:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 b1c:	e5883108 	str	r3, [r8, #264]	; 0x108
 b20:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 b24:	e1877000 	orr	r7, r7, r0
 b28:	01830000 	orreq	r0, r3, r0
 b2c:	e1a05008 	mov	r5, r8
 b30:	e5882088 	str	r2, [r8, #136]	; 0x88
 b34:	e58c7188 	str	r7, [r12, #392]	; 0x188
 b38:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 b3c:	eaffffe9 	b	ae8 <__register_exitproc+0x94>
 b40:	00000e38 	.word	0x00000e38
 b44:	00000000 	.word	0x00000000

00000b48 <__call_exitprocs>:
 b48:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 b4c:	e59f3168 	ldr	r3, [pc, #360]	; cbc <__call_exitprocs+0x174>
 b50:	e5933000 	ldr	r3, [r3]
 b54:	e24dd014 	sub	sp, sp, #20
 b58:	e58d3004 	str	r3, [sp, #4]
 b5c:	e2833f52 	add	r3, r3, #328	; 0x148
 b60:	e58d0008 	str	r0, [sp, #8]
 b64:	e58d300c 	str	r3, [sp, #12]
 b68:	e1a07001 	mov	r7, r1
 b6c:	e3a08001 	mov	r8, #1
 b70:	e59d3004 	ldr	r3, [sp, #4]
 b74:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 b78:	e3560000 	cmp	r6, #0
 b7c:	e59db00c 	ldr	r11, [sp, #12]
 b80:	0a000033 	beq	c54 <__call_exitprocs+0x10c>
 b84:	e5965004 	ldr	r5, [r6, #4]
 b88:	e2554001 	subs	r4, r5, #1
 b8c:	5286a088 	addpl	r10, r6, #136	; 0x88
 b90:	5285501f 	addpl	r5, r5, #31
 b94:	508a5105 	addpl	r5, r10, r5, lsl #2
 b98:	5a000007 	bpl	bbc <__call_exitprocs+0x74>
 b9c:	ea000029 	b	c48 <__call_exitprocs+0x100>
 ba0:	e5953000 	ldr	r3, [r5]
 ba4:	e1530007 	cmp	r3, r7
 ba8:	0a000005 	beq	bc4 <__call_exitprocs+0x7c>
 bac:	e2444001 	sub	r4, r4, #1
 bb0:	e3740001 	cmn	r4, #1
 bb4:	e2455004 	sub	r5, r5, #4
 bb8:	0a000022 	beq	c48 <__call_exitprocs+0x100>
 bbc:	e3570000 	cmp	r7, #0
 bc0:	1afffff6 	bne	ba0 <__call_exitprocs+0x58>
 bc4:	e5963004 	ldr	r3, [r6, #4]
 bc8:	e06a2005 	rsb	r2, r10, r5
 bcc:	e2433001 	sub	r3, r3, #1
 bd0:	e0862002 	add	r2, r6, r2
 bd4:	e1530004 	cmp	r3, r4
 bd8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 bdc:	13a01000 	movne	r1, #0
 be0:	05864004 	streq	r4, [r6, #4]
 be4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 be8:	e3530000 	cmp	r3, #0
 bec:	0affffee 	beq	bac <__call_exitprocs+0x64>
 bf0:	e1a02418 	lsl	r2, r8, r4
 bf4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 bf8:	e1120001 	tst	r2, r1
 bfc:	e5969004 	ldr	r9, [r6, #4]
 c00:	0a000016 	beq	c60 <__call_exitprocs+0x118>
 c04:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 c08:	e1120001 	tst	r2, r1
 c0c:	1a000016 	bne	c6c <__call_exitprocs+0x124>
 c10:	e59d0008 	ldr	r0, [sp, #8]
 c14:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 c18:	e1a0e00f 	mov	lr, pc
 c1c:	e12fff13 	bx	r3
 c20:	e5963004 	ldr	r3, [r6, #4]
 c24:	e1530009 	cmp	r3, r9
 c28:	1affffd0 	bne	b70 <__call_exitprocs+0x28>
 c2c:	e59b3000 	ldr	r3, [r11]
 c30:	e1530006 	cmp	r3, r6
 c34:	1affffcd 	bne	b70 <__call_exitprocs+0x28>
 c38:	e2444001 	sub	r4, r4, #1
 c3c:	e3740001 	cmn	r4, #1
 c40:	e2455004 	sub	r5, r5, #4
 c44:	1affffdc 	bne	bbc <__call_exitprocs+0x74>
 c48:	e59f1070 	ldr	r1, [pc, #112]	; cc0 <__call_exitprocs+0x178>
 c4c:	e3510000 	cmp	r1, #0
 c50:	1a000009 	bne	c7c <__call_exitprocs+0x134>
 c54:	e28dd014 	add	sp, sp, #20
 c58:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 c5c:	e12fff1e 	bx	lr
 c60:	e1a0e00f 	mov	lr, pc
 c64:	e12fff13 	bx	r3
 c68:	eaffffec 	b	c20 <__call_exitprocs+0xd8>
 c6c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 c70:	e1a0e00f 	mov	lr, pc
 c74:	e12fff13 	bx	r3
 c78:	eaffffe8 	b	c20 <__call_exitprocs+0xd8>
 c7c:	e5963004 	ldr	r3, [r6, #4]
 c80:	e3530000 	cmp	r3, #0
 c84:	e5963000 	ldr	r3, [r6]
 c88:	1a000008 	bne	cb0 <__call_exitprocs+0x168>
 c8c:	e3530000 	cmp	r3, #0
 c90:	0a000006 	beq	cb0 <__call_exitprocs+0x168>
 c94:	e1a00006 	mov	r0, r6
 c98:	e58b3000 	str	r3, [r11]
 c9c:	e320f000 	nop	{0}
 ca0:	e59b6000 	ldr	r6, [r11]
 ca4:	e3560000 	cmp	r6, #0
 ca8:	1affffb5 	bne	b84 <__call_exitprocs+0x3c>
 cac:	eaffffe8 	b	c54 <__call_exitprocs+0x10c>
 cb0:	e1a0b006 	mov	r11, r6
 cb4:	e1a06003 	mov	r6, r3
 cb8:	eafffff9 	b	ca4 <__call_exitprocs+0x15c>
 cbc:	00000e38 	.word	0x00000e38
 cc0:	00000000 	.word	0x00000000

00000cc4 <register_fini>:
 cc4:	e92d4008 	push	{r3, lr}
 cc8:	e59f3010 	ldr	r3, [pc, #16]	; ce0 <register_fini+0x1c>
 ccc:	e3530000 	cmp	r3, #0
 cd0:	159f000c 	ldrne	r0, [pc, #12]	; ce4 <register_fini+0x20>
 cd4:	1bffff49 	blne	a00 <atexit>
 cd8:	e8bd4008 	pop	{r3, lr}
 cdc:	e12fff1e 	bx	lr
 ce0:	00000e60 	.word	0x00000e60
 ce4:	00000ce8 	.word	0x00000ce8

00000ce8 <__libc_fini_array>:
 ce8:	e92d4038 	push	{r3, r4, r5, lr}
 cec:	e59f5030 	ldr	r5, [pc, #48]	; d24 <__libc_fini_array+0x3c>
 cf0:	e59f4030 	ldr	r4, [pc, #48]	; d28 <__libc_fini_array+0x40>
 cf4:	e0654004 	rsb	r4, r5, r4
 cf8:	e1b04144 	asrs	r4, r4, #2
 cfc:	10855104 	addne	r5, r5, r4, lsl #2
 d00:	0a000004 	beq	d18 <__libc_fini_array+0x30>
 d04:	e5353004 	ldr	r3, [r5, #-4]!
 d08:	e1a0e00f 	mov	lr, pc
 d0c:	e12fff13 	bx	r3
 d10:	e2544001 	subs	r4, r4, #1
 d14:	1afffffa 	bne	d04 <__libc_fini_array+0x1c>
 d18:	eb000050 	bl	e60 <__libc_fini>
 d1c:	e8bd4038 	pop	{r3, r4, r5, lr}
 d20:	e12fff1e 	bx	lr
 d24:	00000e78 	.word	0x00000e78
 d28:	00000e7c 	.word	0x00000e7c

00000d2c <__cs3_premain>:
 d2c:	e92d4008 	push	{r3, lr}
 d30:	eb00001d 	bl	dac <__libc_init_array>
 d34:	e59f3030 	ldr	r3, [pc, #48]	; d6c <__cs3_premain+0x40>
 d38:	e3530000 	cmp	r3, #0
 d3c:	15930000 	ldrne	r0, [r3]
 d40:	01a00003 	moveq	r0, r3
 d44:	e59f3024 	ldr	r3, [pc, #36]	; d70 <__cs3_premain+0x44>
 d48:	e3530000 	cmp	r3, #0
 d4c:	15931000 	ldrne	r1, [r3]
 d50:	01a01003 	moveq	r1, r3
 d54:	e3a02000 	mov	r2, #0
 d58:	ebfffebc 	bl	850 <main>
 d5c:	e59f3010 	ldr	r3, [pc, #16]	; d74 <__cs3_premain+0x48>
 d60:	e3530000 	cmp	r3, #0
 d64:	1bffff2d 	blne	a20 <exit>
 d68:	eafffffe 	b	d68 <__cs3_premain+0x3c>
	...
 d74:	00000a20 	.word	0x00000a20

00000d78 <_exit>:
 d78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 d7c:	e3a00018 	mov	r0, #24
 d80:	e59f1004 	ldr	r1, [pc, #4]	; d8c <_exit+0x14>
 d84:	ef123456 	svc	0x00123456
 d88:	eafffffe 	b	d88 <_exit+0x10>
 d8c:	00020026 	.word	0x00020026

00000d90 <__cs3_isr_interrupt>:
 d90:	eafffffe 	b	d90 <__cs3_isr_interrupt>

00000d94 <__cs3_isr_undef>:
 d94:	eafffffe 	b	d94 <__cs3_isr_undef>

00000d98 <__cs3_isr_swi>:
 d98:	eafffffe 	b	d98 <__cs3_isr_swi>

00000d9c <__cs3_isr_pabort>:
 d9c:	eafffffe 	b	d9c <__cs3_isr_pabort>

00000da0 <__cs3_isr_dabort>:
 da0:	eafffffe 	b	da0 <__cs3_isr_dabort>

00000da4 <__cs3_isr_irq>:
 da4:	eafffffe 	b	da4 <__cs3_isr_irq>

00000da8 <__cs3_isr_fiq>:
 da8:	eafffffe 	b	da8 <__cs3_isr_fiq>

00000dac <__libc_init_array>:
 dac:	e92d4070 	push	{r4, r5, r6, lr}
 db0:	e59f506c 	ldr	r5, [pc, #108]	; e24 <__libc_init_array+0x78>
 db4:	e59f606c 	ldr	r6, [pc, #108]	; e28 <__libc_init_array+0x7c>
 db8:	e0656006 	rsb	r6, r5, r6
 dbc:	e1b06146 	asrs	r6, r6, #2
 dc0:	12455004 	subne	r5, r5, #4
 dc4:	13a04000 	movne	r4, #0
 dc8:	0a000005 	beq	de4 <__libc_init_array+0x38>
 dcc:	e5b53004 	ldr	r3, [r5, #4]!
 dd0:	e2844001 	add	r4, r4, #1
 dd4:	e1a0e00f 	mov	lr, pc
 dd8:	e12fff13 	bx	r3
 ddc:	e1560004 	cmp	r6, r4
 de0:	1afffff9 	bne	dcc <__libc_init_array+0x20>
 de4:	e59f5040 	ldr	r5, [pc, #64]	; e2c <__libc_init_array+0x80>
 de8:	e59f6040 	ldr	r6, [pc, #64]	; e30 <__libc_init_array+0x84>
 dec:	e0656006 	rsb	r6, r5, r6
 df0:	eb000012 	bl	e40 <_init>
 df4:	e1b06146 	asrs	r6, r6, #2
 df8:	12455004 	subne	r5, r5, #4
 dfc:	13a04000 	movne	r4, #0
 e00:	0a000005 	beq	e1c <__libc_init_array+0x70>
 e04:	e5b53004 	ldr	r3, [r5, #4]!
 e08:	e2844001 	add	r4, r4, #1
 e0c:	e1a0e00f 	mov	lr, pc
 e10:	e12fff13 	bx	r3
 e14:	e1560004 	cmp	r6, r4
 e18:	1afffff9 	bne	e04 <__libc_init_array+0x58>
 e1c:	e8bd4070 	pop	{r4, r5, r6, lr}
 e20:	e12fff1e 	bx	lr
 e24:	00000e58 	.word	0x00000e58
 e28:	00000e58 	.word	0x00000e58
 e2c:	00000e58 	.word	0x00000e58
 e30:	00000e60 	.word	0x00000e60

Disassembly of section .rodata:

00000e38 <_global_impure_ptr>:
 e38:	00000ea0 00000043                       ....C...

00000e40 <_init>:
 e40:	e1a0c00d 	mov	r12, sp
 e44:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 e48:	e24cb004 	sub	r11, r12, #4
 e4c:	e24bd028 	sub	sp, r11, #40	; 0x28
 e50:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 e54:	e12fff1e 	bx	lr

00000e58 <__init_array_start>:
 e58:	00000cc4 	.word	0x00000cc4

00000e5c <__frame_dummy_init_array_entry>:
 e5c:	00000208                                ....

00000e60 <__libc_fini>:
 e60:	e1a0c00d 	mov	r12, sp
 e64:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 e68:	e24cb004 	sub	r11, r12, #4
 e6c:	e24bd028 	sub	sp, r11, #40	; 0x28
 e70:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 e74:	e12fff1e 	bx	lr

00000e78 <__fini_array_start>:
 e78:	000001c4 	.word	0x000001c4

00000e7c <__cs3_regions>:
 e7c:	00000000 	.word	0x00000000
 e80:	00000040 	.word	0x00000040
 e84:	00000040 	.word	0x00000040
 e88:	00001290 	.word	0x00001290
 e8c:	00000020 	.word	0x00000020
