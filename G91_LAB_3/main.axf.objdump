
P:/G91_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 c8 0b 00 00 cc 0b 00 00 d0 0b 00 00     @...............
  30:	d4 0b 00 00 c4 0b 00 00 d8 0b 00 00 dc 0b 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <HEX_8+0x59>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <HEX_8+0x55>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <HEX_8+0x5d>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <HEX_8+0x25>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <HEX_8+0x25>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <HEX_8+0xd>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <HEX_8+0x45>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <HEX_8+0x35>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <HEX_D+0x6>
  d4:	eb0002a1 	bl	b60 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000cc4 	.word	0x00000cc4

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001100 	.word	0x00001100

00000124 <__cs3_heap_start_ptr>:
 124:	00001128 	.word	0x00001128

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001108 	.word	0x00001108
 170:	0000110b 	.word	0x0000110b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001108 	.word	0x00001108
 1bc:	00001108 	.word	0x00001108
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001108 	.word	0x00001108
 200:	00000000 	.word	0x00000000
 204:	00000c68 	.word	0x00000c68

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000c68 	.word	0x00000c68
 250:	0000110c 	.word	0x0000110c
 254:	00000cc8 	.word	0x00000cc8
 258:	00000000 	.word	0x00000000

0000025c <main>:
#include <stdio.h>
#include "./drivers/inc/LEDs.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"

int main(){
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	while(1){
		int switchStatus = read_slider_switches_ASM();
 268:	eb00005e 	bl	3e8 <read_slider_switches_ASM>
 26c:	e50b000c 	str	r0, [r11, #-12]
		write_LEDs_ASM(switchStatus);		//MAP THE SWITCH TO THE LED
 270:	e51b000c 	ldr	r0, [r11, #-12]
 274:	eb000057 	bl	3d8 <write_LEDs_ASM>
		
		if (switchStatus == 0x200)
 278:	e51b300c 	ldr	r3, [r11, #-12]
 27c:	e3530c02 	cmp	r3, #512	; 0x200
 280:	1a000002 	bne	290 <main+0x34>
		{
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
 284:	e3a0003f 	mov	r0, #63	; 0x3f
 288:	eb00005a 	bl	3f8 <HEX_clear_ASM>

			HEX_flood_ASM(HEX4 | HEX5);
			int pushButtonStatus = read_PB_data_ASM();
			HEX_write_ASM(pushButtonStatus, hexValue);
		}
	}
 28c:	eafffff5 	b	268 <main+0xc>
		}
		else 
		{
			//HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3);
			char hexValue;
			switch (switchStatus) 
 290:	e51b300c 	ldr	r3, [r11, #-12]
 294:	e353000f 	cmp	r3, #15
 298:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 29c:	ea00003f 	b	3a0 <main+0x144>
 2a0:	000002e0 	.word	0x000002e0
 2a4:	000002ec 	.word	0x000002ec
 2a8:	000002f8 	.word	0x000002f8
 2ac:	00000304 	.word	0x00000304
 2b0:	00000310 	.word	0x00000310
 2b4:	0000031c 	.word	0x0000031c
 2b8:	00000328 	.word	0x00000328
 2bc:	00000334 	.word	0x00000334
 2c0:	00000340 	.word	0x00000340
 2c4:	0000034c 	.word	0x0000034c
 2c8:	00000358 	.word	0x00000358
 2cc:	00000364 	.word	0x00000364
 2d0:	00000370 	.word	0x00000370
 2d4:	0000037c 	.word	0x0000037c
 2d8:	00000388 	.word	0x00000388
 2dc:	00000394 	.word	0x00000394
			{
				case 0:
					hexValue = '0';
 2e0:	e3a03030 	mov	r3, #48	; 0x30
 2e4:	e54b3005 	strb	r3, [r11, #-5]
					break;
 2e8:	ea00002c 	b	3a0 <main+0x144>
				case 1:
					hexValue = '1';
 2ec:	e3a03031 	mov	r3, #49	; 0x31
 2f0:	e54b3005 	strb	r3, [r11, #-5]
					break;
 2f4:	ea000029 	b	3a0 <main+0x144>
				case 2:
					hexValue = '2';
 2f8:	e3a03032 	mov	r3, #50	; 0x32
 2fc:	e54b3005 	strb	r3, [r11, #-5]
					break;
 300:	ea000026 	b	3a0 <main+0x144>
				case 3:
					hexValue = '3';
 304:	e3a03033 	mov	r3, #51	; 0x33
 308:	e54b3005 	strb	r3, [r11, #-5]
					break;
 30c:	ea000023 	b	3a0 <main+0x144>
				case 4:
					hexValue = '4';
 310:	e3a03034 	mov	r3, #52	; 0x34
 314:	e54b3005 	strb	r3, [r11, #-5]
					break;
 318:	ea000020 	b	3a0 <main+0x144>
				case 5:
					hexValue = '5';
 31c:	e3a03035 	mov	r3, #53	; 0x35
 320:	e54b3005 	strb	r3, [r11, #-5]
					break;
 324:	ea00001d 	b	3a0 <main+0x144>
				case 6:
					hexValue = '6';
 328:	e3a03036 	mov	r3, #54	; 0x36
 32c:	e54b3005 	strb	r3, [r11, #-5]
					break;
 330:	ea00001a 	b	3a0 <main+0x144>
				case 7:
					hexValue = '7';
 334:	e3a03037 	mov	r3, #55	; 0x37
 338:	e54b3005 	strb	r3, [r11, #-5]
					break;
 33c:	ea000017 	b	3a0 <main+0x144>
				case 8:
					hexValue = '8';
 340:	e3a03038 	mov	r3, #56	; 0x38
 344:	e54b3005 	strb	r3, [r11, #-5]
					break;
 348:	ea000014 	b	3a0 <main+0x144>
				case 9:
					hexValue = '9';
 34c:	e3a03039 	mov	r3, #57	; 0x39
 350:	e54b3005 	strb	r3, [r11, #-5]
					break;
 354:	ea000011 	b	3a0 <main+0x144>
				case 10:
					hexValue = 'A';
 358:	e3a03041 	mov	r3, #65	; 0x41
 35c:	e54b3005 	strb	r3, [r11, #-5]
					break;
 360:	ea00000e 	b	3a0 <main+0x144>
				case 11:
					hexValue = 'B';
 364:	e3a03042 	mov	r3, #66	; 0x42
 368:	e54b3005 	strb	r3, [r11, #-5]
					break;
 36c:	ea00000b 	b	3a0 <main+0x144>
				case 12:
					hexValue = 'C';
 370:	e3a03043 	mov	r3, #67	; 0x43
 374:	e54b3005 	strb	r3, [r11, #-5]
					break;
 378:	ea000008 	b	3a0 <main+0x144>
				case 13:
					hexValue = 'D';
 37c:	e3a03044 	mov	r3, #68	; 0x44
 380:	e54b3005 	strb	r3, [r11, #-5]
					break;
 384:	ea000005 	b	3a0 <main+0x144>
				case 14:
					hexValue = 'E';
 388:	e3a03045 	mov	r3, #69	; 0x45
 38c:	e54b3005 	strb	r3, [r11, #-5]
					break;
 390:	ea000002 	b	3a0 <main+0x144>
				case 15:
					hexValue = 'F';
 394:	e3a03046 	mov	r3, #70	; 0x46
 398:	e54b3005 	strb	r3, [r11, #-5]
					break;
 39c:	e1a00000 	nop			; (mov r0, r0)
				//default:
				//	hexValue = '';
			}

			HEX_flood_ASM(HEX4 | HEX5);
 3a0:	e3a00030 	mov	r0, #48	; 0x30
 3a4:	eb000037 	bl	488 <HEX_flood_ASM>
			int pushButtonStatus = read_PB_data_ASM();
 3a8:	eb0000b3 	bl	67c <read_PB_data_ASM>
 3ac:	e50b0010 	str	r0, [r11, #-16]
			HEX_write_ASM(pushButtonStatus, hexValue);
 3b0:	e51b3010 	ldr	r3, [r11, #-16]
 3b4:	e6ef2073 	uxtb	r2, r3
 3b8:	e55b3005 	ldrb	r3, [r11, #-5]
 3bc:	e1a00002 	mov	r0, r2
 3c0:	e1a01003 	mov	r1, r3
 3c4:	eb000053 	bl	518 <HEX_write_ASM>
		}
	}
 3c8:	eaffffa6 	b	268 <main+0xc>

000003cc <read_LEDs_ASM>:
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
 3cc:	e59f1010 	ldr	r1, [pc, #16]	; 3e4 <write_LEDs_ASM+0xc>
LDR R0, [R1]
 3d0:	e5910000 	ldr	r0, [r1]
BX LR
 3d4:	e12fff1e 	bx	lr

000003d8 <write_LEDs_ASM>:
write_LEDs_ASM:
LDR R1, =SW_BASE
 3d8:	e59f1004 	ldr	r1, [pc, #4]	; 3e4 <write_LEDs_ASM+0xc>
STR R0, [R1]
 3dc:	e5810000 	str	r0, [r1]
BX LR
 3e0:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200000
.global read_LEDs_ASM, write_LEDs_ASM

read_LEDs_ASM:
LDR R1, =SW_BASE
 3e4:	ff200000 	.word	0xff200000

000003e8 <read_slider_switches_ASM>:
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
 3e8:	e59f1004 	ldr	r1, [pc, #4]	; 3f4 <read_slider_switches_ASM+0xc>
LDR R0, [R1]
 3ec:	e5910000 	ldr	r0, [r1]
BX LR
 3f0:	e12fff1e 	bx	lr
.text
.equ SW_BASE, 0xFF200040
.global read_slider_switches_ASM
read_slider_switches_ASM:
LDR R1, =SW_BASE
 3f4:	ff200040 	.word	0xff200040

000003f8 <HEX_clear_ASM>:
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
 3f8:	e59f1274 	ldr	r1, [pc, #628]	; 674 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
 3fc:	e59f2274 	ldr	r2, [pc, #628]	; 678 <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
 400:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
 404:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
 408:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
 40c:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 410:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 414:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 418:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
 41c:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
 420:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
 424:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 428:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
 42c:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
 430:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF00FFFF
 434:	e3e038ff 	mvn	r3, #16711680	; 0xff0000
CMP R5, #1
 438:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 43c:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
 440:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
 444:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FFFFFF
 448:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
CMP R5, #1
 44c:	e3550001 	cmp	r5, #1
ANDEQ R6, R6, R3		//APPLY THE MASK
 450:	00066003 	andeq	r6, r6, r3
LSR R0, R0, #1
 454:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
 458:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFFFF00		//OFF
 45c:	e3e030ff 	mvn	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 460:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
 464:	00077003 	andeq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 468:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
 46c:	e2005001 	and	r5, r0, #1
MOV R3, #0xFFFF00FF
 470:	e3e03cff 	mvn	r3, #65280	; 0xff00
CMP R5, #1
 474:	e3550001 	cmp	r5, #1
ANDEQ R7, R7, R3		//APPLY THE MASK
 478:	00077003 	andeq	r7, r7, r3

STR R6, [R1]
 47c:	e5816000 	str	r6, [r1]
STR R7, [R2]
 480:	e5827000 	str	r7, [r2]

BX LR
 484:	e12fff1e 	bx	lr

00000488 <HEX_flood_ASM>:
HEX_flood_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
 488:	e59f11e4 	ldr	r1, [pc, #484]	; 674 <WRITE+0x9c>
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
 48c:	e59f21e4 	ldr	r2, [pc, #484]	; 678 <WRITE+0xa0>
LDR R6, [R1]			//LOAD STATE OF 0-3 HEX DISPLAY
 490:	e5916000 	ldr	r6, [r1]
LDR R7, [R2]			//LOAD STATE OF 4-5 HEX DISPLAY
 494:	e5927000 	ldr	r7, [r2]

AND R5, R0, #1			//CHECK THE Bit0
 498:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF		//OFF
 49c:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 4a0:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 4a4:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 4a8:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT1
 4ac:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
 4b0:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
 4b4:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 4b8:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
 4bc:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT2
 4c0:	e2005001 	and	r5, r0, #1
MOV R3, #0x00FF0000
 4c4:	e3a038ff 	mov	r3, #16711680	; 0xff0000
CMP R5, #1
 4c8:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 4cc:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
 4d0:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT3
 4d4:	e2005001 	and	r5, r0, #1
MOV R3, #0xFF000000
 4d8:	e3a034ff 	mov	r3, #-16777216	; 0xff000000
CMP R5, #1
 4dc:	e3550001 	cmp	r5, #1
ORREQ R6, R6, R3		//APPLY THE MASK
 4e0:	01866003 	orreq	r6, r6, r3
LSR R0, R0, #1
 4e4:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE Bit4
 4e8:	e2005001 	and	r5, r0, #1
MOV R3, #0x000000FF	//OFF
 4ec:	e3a030ff 	mov	r3, #255	; 0xff
CMP R5, #1				//CHECK WHETHER THE BIT NEEDS TO BE OPERATED
 4f0:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
 4f4:	01877003 	orreq	r7, r7, r3
LSR R0, R0, #1			//FINISH MODIFICATION OF ONE DISPLAY
 4f8:	e1a000a0 	lsr	r0, r0, #1

AND R5, R0, #1			//CHECK THE BIT5
 4fc:	e2005001 	and	r5, r0, #1
MOV R3, #0x0000FF00
 500:	e3a03cff 	mov	r3, #65280	; 0xff00
CMP R5, #1
 504:	e3550001 	cmp	r5, #1
ORREQ R7, R7, R3		//APPLY THE MASK
 508:	01877003 	orreq	r7, r7, r3

STR R6, [R1]
 50c:	e5816000 	str	r6, [r1]
STR R7, [R2]
 510:	e5827000 	str	r7, [r2]

BX LR
 514:	e12fff1e 	bx	lr

00000518 <HEX_write_ASM>:
HEX_write_ASM:
CMP R1,#48
 518:	e3510030 	cmp	r1, #48	; 0x30
MOVEQ R4, #HEX_0
 51c:	03a0403f 	moveq	r4, #63	; 0x3f
BEQ WRITE
 520:	0a00002c 	beq	5d8 <WRITE>
CMP R1,#49
 524:	e3510031 	cmp	r1, #49	; 0x31
MOVEQ R4, #HEX_1
 528:	03a04006 	moveq	r4, #6
BEQ WRITE
 52c:	0a000029 	beq	5d8 <WRITE>
CMP R1,#50
 530:	e3510032 	cmp	r1, #50	; 0x32
MOVEQ R4, #HEX_2
 534:	03a0405b 	moveq	r4, #91	; 0x5b
BEQ WRITE
 538:	0a000026 	beq	5d8 <WRITE>
CMP R1,#51
 53c:	e3510033 	cmp	r1, #51	; 0x33
MOVEQ R4, #HEX_3
 540:	03a0404f 	moveq	r4, #79	; 0x4f
BEQ WRITE
 544:	0a000023 	beq	5d8 <WRITE>
CMP R1,#52
 548:	e3510034 	cmp	r1, #52	; 0x34
MOVEQ R4, #HEX_4
 54c:	03a04066 	moveq	r4, #102	; 0x66
BEQ WRITE
 550:	0a000020 	beq	5d8 <WRITE>
CMP R1,#53
 554:	e3510035 	cmp	r1, #53	; 0x35
MOVEQ R4, #HEX_5
 558:	03a0406d 	moveq	r4, #109	; 0x6d
BEQ WRITE
 55c:	0a00001d 	beq	5d8 <WRITE>
CMP R1,#54
 560:	e3510036 	cmp	r1, #54	; 0x36
MOVEQ R4, #HEX_6
 564:	03a0407d 	moveq	r4, #125	; 0x7d
BEQ WRITE
 568:	0a00001a 	beq	5d8 <WRITE>
CMP R1,#55
 56c:	e3510037 	cmp	r1, #55	; 0x37
MOVEQ R4, #HEX_7
 570:	03a04007 	moveq	r4, #7
BEQ WRITE
 574:	0a000017 	beq	5d8 <WRITE>
CMP R1,#56
 578:	e3510038 	cmp	r1, #56	; 0x38
MOVEQ R4, #HEX_8
 57c:	03a0407f 	moveq	r4, #127	; 0x7f
BEQ WRITE
 580:	0a000014 	beq	5d8 <WRITE>
CMP R1,#57
 584:	e3510039 	cmp	r1, #57	; 0x39
MOVEQ R4, #HEX_9
 588:	03a0406f 	moveq	r4, #111	; 0x6f
BEQ WRITE
 58c:	0a000011 	beq	5d8 <WRITE>
CMP R1,#65
 590:	e3510041 	cmp	r1, #65	; 0x41
MOVEQ R4, #HEX_A
 594:	03a04077 	moveq	r4, #119	; 0x77
BEQ WRITE
 598:	0a00000e 	beq	5d8 <WRITE>
CMP R1,#66
 59c:	e3510042 	cmp	r1, #66	; 0x42
MOVEQ R4, #HEX_B
 5a0:	03a0407c 	moveq	r4, #124	; 0x7c
BEQ WRITE
 5a4:	0a00000b 	beq	5d8 <WRITE>
CMP R1,#67
 5a8:	e3510043 	cmp	r1, #67	; 0x43
MOVEQ R4, #HEX_C
 5ac:	03a04039 	moveq	r4, #57	; 0x39
BEQ WRITE
 5b0:	0a000008 	beq	5d8 <WRITE>
CMP R1,#68
 5b4:	e3510044 	cmp	r1, #68	; 0x44
MOVEQ R4, #HEX_D
 5b8:	03a0405e 	moveq	r4, #94	; 0x5e
BEQ WRITE
 5bc:	0a000005 	beq	5d8 <WRITE>
CMP R1,#69
 5c0:	e3510045 	cmp	r1, #69	; 0x45
MOVEQ R4, #HEX_E
 5c4:	03a04079 	moveq	r4, #121	; 0x79
BEQ WRITE
 5c8:	0a000002 	beq	5d8 <WRITE>
CMP R1,#70
 5cc:	e3510046 	cmp	r1, #70	; 0x46
MOVEQ R4, #HEX_F
 5d0:	03a04071 	moveq	r4, #113	; 0x71
BEQ WRITE
 5d4:	0affffff 	beq	5d8 <WRITE>

000005d8 <WRITE>:
WRITE:

LDR R2, =HEX_BASE1		//0-3 HEX DISPLAY
 5d8:	e59f2094 	ldr	r2, [pc, #148]	; 674 <WRITE+0x9c>
LDR R3, =HEX_BASE2		//4-5 HEX DISPLAY
 5dc:	e59f3094 	ldr	r3, [pc, #148]	; 678 <WRITE+0xa0>
LDR R5, [R2]			//LOAD STATE OF 0-3 HEX DISPLAY
 5e0:	e5925000 	ldr	r5, [r2]
LDR R6, [R3]			//LOAD STATE OF 4-5 HEX DISPLAY
 5e4:	e5936000 	ldr	r6, [r3]

CMP R0, #0x00000001
 5e8:	e3500001 	cmp	r0, #1
MOVEQ R7, #0xFFFFFF00		//OFF
 5ec:	03e070ff 	mvneq	r7, #255	; 0xff
ANDEQ R7, R7, R5		//APPLY THE MASK
 5f0:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 5f4:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 5f8:	05827000 	streq	r7, [r2]

CMP R0, #0x00000002
 5fc:	e3500002 	cmp	r0, #2
MOVEQ R7, #0xFFFF00FF		//OFF
 600:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
 604:	01a04404 	lsleq	r4, r4, #8
ANDEQ R7, R7, R5		//APPLY THE MASK
 608:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 60c:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 610:	05827000 	streq	r7, [r2]

CMP R0, #0x00000004
 614:	e3500004 	cmp	r0, #4
MOVEQ R7, #0xFF00FFFF		//OFF
 618:	03e078ff 	mvneq	r7, #16711680	; 0xff0000
LSLEQ R4, #16
 61c:	01a04804 	lsleq	r4, r4, #16
ANDEQ R7, R7, R5		//APPLY THE MASK
 620:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 624:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 628:	05827000 	streq	r7, [r2]

CMP R0, #0x00000008
 62c:	e3500008 	cmp	r0, #8
MOVEQ R7, #0x00FFFFFF		//OFF
 630:	03e074ff 	mvneq	r7, #-16777216	; 0xff000000
LSLEQ R4, #24
 634:	01a04c04 	lsleq	r4, r4, #24
ANDEQ R7, R7, R5		//APPLY THE MASK
 638:	00077005 	andeq	r7, r7, r5
ORREQ R7, R7, R4
 63c:	01877004 	orreq	r7, r7, r4
STREQ R7, [R2]
 640:	05827000 	streq	r7, [r2]

CMP R0, #0x00000010
 644:	e3500010 	cmp	r0, #16
MOVEQ R8, #0xFFFFFF00		//OFF
 648:	03e080ff 	mvneq	r8, #255	; 0xff
ANDEQ R8, R8, R6		//APPLY THE MASK
 64c:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
 650:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
 654:	05838000 	streq	r8, [r3]

CMP R0, #0x00000020
 658:	e3500020 	cmp	r0, #32
MOVEQ R7, #0xFFFF00FF		//OFF
 65c:	03e07cff 	mvneq	r7, #65280	; 0xff00
LSLEQ R4, #8
 660:	01a04404 	lsleq	r4, r4, #8
ANDEQ R8, R8, R6		//APPLY THE MASK
 664:	00088006 	andeq	r8, r8, r6
ORREQ R8, R8, R4
 668:	01888004 	orreq	r8, r8, r4
STREQ R8, [R3]
 66c:	05838000 	streq	r8, [r3]


BX LR
 670:	e12fff1e 	bx	lr
.equ HEX_E, 0x00000079
.equ HEX_F, 0x00000071

.global HEX_clear_ASM, HEX_flood_ASM, HEX_write_ASM
HEX_clear_ASM:
LDR R1, =HEX_BASE1		//0-3 HEX DISPLAY
 674:	ff200020 	.word	0xff200020
LDR R2, =HEX_BASE2		//4-5 HEX DISPLAY
 678:	ff200030 	.word	0xff200030

0000067c <read_PB_data_ASM>:
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecp_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
 67c:	e59f11a4 	ldr	r1, [pc, #420]	; 828 <STORE_INTERRUPT_DISABLE+0x8>
LDR R0, [R1]
 680:	e5910000 	ldr	r0, [r1]
BX LR
 684:	e12fff1e 	bx	lr

00000688 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
//R0 parameter from C
LDR R1, =PUSHBUTTON_BASE
 688:	e59f1198 	ldr	r1, [pc, #408]	; 828 <STORE_INTERRUPT_DISABLE+0x8>
LDR R2, [R1]			//value of the data register
 68c:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
 690:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
 694:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
 698:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 69c:	03a00001 	moveq	r0, #1
BXEQ LR
 6a0:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
 6a4:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
 6a8:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 6ac:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
 6b0:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 6b4:	03a00001 	moveq	r0, #1
BXEQ LR
 6b8:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
 6bc:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
 6c0:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
 6c4:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
 6c8:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 6cc:	03a00001 	moveq	r0, #1
BXEQ LR
 6d0:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
 6d4:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
 6d8:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 6dc:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
 6e0:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 6e4:	03a00001 	moveq	r0, #1
BXEQ LR
 6e8:	012fff1e 	bxeq	lr

MOV R0, #0
 6ec:	e3a00000 	mov	r0, #0
BX LR
 6f0:	e12fff1e 	bx	lr

000006f4 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
 6f4:	e59f1130 	ldr	r1, [pc, #304]	; 82c <STORE_INTERRUPT_DISABLE+0xc>
LDR R0, [R1]
 6f8:	e5910000 	ldr	r0, [r1]
BX LR
 6fc:	e12fff1e 	bx	lr

00000700 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
 700:	e59f1124 	ldr	r1, [pc, #292]	; 82c <STORE_INTERRUPT_DISABLE+0xc>
LDR R2, [R1]			//value of edge register
 704:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
 708:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
 70c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
 710:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 714:	03a00001 	moveq	r0, #1
BXEQ LR
 718:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
 71c:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
 720:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 724:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
 728:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 72c:	03a00001 	moveq	r0, #1
BXEQ LR
 730:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
 734:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
 738:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
 73c:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
 740:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 744:	03a00001 	moveq	r0, #1
BXEQ LR
 748:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
 74c:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
 750:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
 754:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
 758:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
 75c:	03a00001 	moveq	r0, #1
BXEQ LR
 760:	012fff1e 	bxeq	lr

MOV R0, #0
 764:	e3a00000 	mov	r0, #0

BX LR
 768:	e12fff1e 	bx	lr

0000076c <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:
//R0 PARAMETER FROM C
LDR R1, =PUSHBUTTON_EDGECAPTURE
 76c:	e59f10b8 	ldr	r1, [pc, #184]	; 82c <STORE_INTERRUPT_DISABLE+0xc>
LDR R2, [R1]			//value of the edgecapture register
 770:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
 774:	e3a04003 	mov	r4, #3
MOV R5, #0xFFFFFFF0		//mask
 778:	e3e0500f 	mvn	r5, #15

0000077c <LOOP_CLEAR>:
LOOP_CLEAR:
SUBS R4, R4, #1			//update counter
 77c:	e2544001 	subs	r4, r4, #1
BLT  STORE_VALUE
 780:	ba000007 	blt	7a4 <STORE_VALUE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
 784:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
 788:	e3530001 	cmp	r3, #1
ANDEQ R2, R2, R5			//modify the value
 78c:	00022005 	andeq	r2, r2, r5
MOV R6, #2
 790:	e3a06002 	mov	r6, #2
MOV R7, #15
 794:	e3a0700f 	mov	r7, #15
MLA R5, R5, R6, R7		//update the mask for the next iteration
 798:	e0257695 	mla	r5, r5, r6, r7
LSR R0, #1
 79c:	e1a000a0 	lsr	r0, r0, #1
B LOOP_CLEAR
 7a0:	eafffff5 	b	77c <LOOP_CLEAR>

000007a4 <STORE_VALUE>:
//FINISH CONSTRUCTING THE NEW EDGECAPTURE VALUE
STORE_VALUE:
STR R2, [R1]
 7a4:	e5812000 	str	r2, [r1]
BX LR
 7a8:	e12fff1e 	bx	lr

000007ac <enable_PB_INT_ASM>:


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
 7ac:	e59f107c 	ldr	r1, [pc, #124]	; 830 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
 7b0:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
 7b4:	e3a04003 	mov	r4, #3
MOV R5, #0x0000000F		//mask
 7b8:	e3a0500f 	mov	r5, #15

000007bc <LOOP_ENABLE_INT>:
LOOP_ENABLE_INT:
SUBS R4, R4, #1			//update counter
 7bc:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_ENABLE
 7c0:	ba000006 	blt	7e0 <STORE_INTERRUPT_ENABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
 7c4:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
 7c8:	e3530001 	cmp	r3, #1
ORREQ R2, R2, R5		//modify the value
 7cc:	01822005 	orreq	r2, r2, r5
MOV R6, #2
 7d0:	e3a06002 	mov	r6, #2
MUL R5, R5, R6			//update the mask for the next iteration
 7d4:	e0050695 	mul	r5, r5, r6
LSR R0, #1
 7d8:	e1a000a0 	lsr	r0, r0, #1
B LOOP_ENABLE_INT
 7dc:	eafffff6 	b	7bc <LOOP_ENABLE_INT>

000007e0 <STORE_INTERRUPT_ENABLE>:
STORE_INTERRUPT_ENABLE:
STR R2, [R1]
 7e0:	e5812000 	str	r2, [r1]
BX LR
 7e4:	e12fff1e 	bx	lr

000007e8 <disable_PB_INT_ASM>:


disable_PB_INT_ASM:
LDR R1, =PUSHBUTTON_INTERRUPTION
 7e8:	e59f1040 	ldr	r1, [pc, #64]	; 830 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
 7ec:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
 7f0:	e3a04003 	mov	r4, #3
MOV R5, #0xFFFFFFF0		//mask
 7f4:	e3e0500f 	mvn	r5, #15

000007f8 <LOOP_DISABLE_INT>:
LOOP_DISABLE_INT:
SUBS R4, R4, #1			//update counter
 7f8:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_DISABLE
 7fc:	ba000007 	blt	820 <STORE_INTERRUPT_DISABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
 800:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
 804:	e3530001 	cmp	r3, #1
ANDEQ R2, R2, R5		//modify the value
 808:	00022005 	andeq	r2, r2, r5
MOV R6, #2
 80c:	e3a06002 	mov	r6, #2
MOV R7, #15
 810:	e3a0700f 	mov	r7, #15
MLA R5, R5, R6, R7		//update the mask for the next iteration
 814:	e0257695 	mla	r5, r5, r6, r7
LSR R0, #1
 818:	e1a000a0 	lsr	r0, r0, #1
B LOOP_DISABLE_INT
 81c:	eafffff5 	b	7f8 <LOOP_DISABLE_INT>

00000820 <STORE_INTERRUPT_DISABLE>:
STORE_INTERRUPT_DISABLE:
STR R2, [R1]
 820:	e5812000 	str	r2, [r1]
BX LR
 824:	e12fff1e 	bx	lr
.equ PUSHBUTTON_INTERRUPTION, 0xFF200058
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecp_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM

read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
 828:	ff200050 	.word	0xff200050

MOV R0, #0
BX LR

read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
 82c:	ff20005c 	.word	0xff20005c
BX LR


enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
 830:	ff200058 	.word	0xff200058

00000834 <atexit>:
 834:	e1a01000 	mov	r1, r0
 838:	e3a00000 	mov	r0, #0
 83c:	e92d4008 	push	{r3, lr}
 840:	e1a02000 	mov	r2, r0
 844:	e1a03000 	mov	r3, r0
 848:	eb00000e 	bl	888 <__register_exitproc>
 84c:	e8bd4008 	pop	{r3, lr}
 850:	e12fff1e 	bx	lr

00000854 <exit>:
 854:	e92d4008 	push	{r3, lr}
 858:	e3a01000 	mov	r1, #0
 85c:	e1a04000 	mov	r4, r0
 860:	eb000045 	bl	97c <__call_exitprocs>
 864:	e59f3018 	ldr	r3, [pc, #24]	; 884 <exit+0x30>
 868:	e5930000 	ldr	r0, [r3]
 86c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 870:	e3530000 	cmp	r3, #0
 874:	11a0e00f 	movne	lr, pc
 878:	112fff13 	bxne	r3
 87c:	e1a00004 	mov	r0, r4
 880:	eb0000c9 	bl	bac <_exit>
 884:	00000c6c 	.word	0x00000c6c

00000888 <__register_exitproc>:
 888:	e59fc0e4 	ldr	r12, [pc, #228]	; 974 <__register_exitproc+0xec>
 88c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 890:	e59c4000 	ldr	r4, [r12]
 894:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 898:	e35c0000 	cmp	r12, #0
 89c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 8a0:	e59c5004 	ldr	r5, [r12, #4]
 8a4:	0584c148 	streq	r12, [r4, #328]	; 0x148
 8a8:	e355001f 	cmp	r5, #31
 8ac:	e24dd010 	sub	sp, sp, #16
 8b0:	e1a06000 	mov	r6, r0
 8b4:	da000015 	ble	910 <__register_exitproc+0x88>
 8b8:	e59f00b8 	ldr	r0, [pc, #184]	; 978 <__register_exitproc+0xf0>
 8bc:	e3500000 	cmp	r0, #0
 8c0:	1a000001 	bne	8cc <__register_exitproc+0x44>
 8c4:	e3e00000 	mvn	r0, #0
 8c8:	ea000018 	b	930 <__register_exitproc+0xa8>
 8cc:	e3a00e19 	mov	r0, #400	; 0x190
 8d0:	e58d100c 	str	r1, [sp, #12]
 8d4:	e58d2008 	str	r2, [sp, #8]
 8d8:	e58d3004 	str	r3, [sp, #4]
 8dc:	e320f000 	nop	{0}
 8e0:	e250c000 	subs	r12, r0, #0
 8e4:	e59d100c 	ldr	r1, [sp, #12]
 8e8:	e59d2008 	ldr	r2, [sp, #8]
 8ec:	e59d3004 	ldr	r3, [sp, #4]
 8f0:	0afffff3 	beq	8c4 <__register_exitproc+0x3c>
 8f4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 8f8:	e3a00000 	mov	r0, #0
 8fc:	e58c0004 	str	r0, [r12, #4]
 900:	e58c5000 	str	r5, [r12]
 904:	e584c148 	str	r12, [r4, #328]	; 0x148
 908:	e58c0188 	str	r0, [r12, #392]	; 0x188
 90c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 910:	e3560000 	cmp	r6, #0
 914:	e59c4004 	ldr	r4, [r12, #4]
 918:	1a000007 	bne	93c <__register_exitproc+0xb4>
 91c:	e2843002 	add	r3, r4, #2
 920:	e2844001 	add	r4, r4, #1
 924:	e78c1103 	str	r1, [r12, r3, lsl #2]
 928:	e58c4004 	str	r4, [r12, #4]
 92c:	e3a00000 	mov	r0, #0
 930:	e28dd010 	add	sp, sp, #16
 934:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 938:	e12fff1e 	bx	lr
 93c:	e3a00001 	mov	r0, #1
 940:	e1a00410 	lsl	r0, r0, r4
 944:	e08c8104 	add	r8, r12, r4, lsl #2
 948:	e3560002 	cmp	r6, #2
 94c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 950:	e5883108 	str	r3, [r8, #264]	; 0x108
 954:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 958:	e1877000 	orr	r7, r7, r0
 95c:	01830000 	orreq	r0, r3, r0
 960:	e1a05008 	mov	r5, r8
 964:	e5882088 	str	r2, [r8, #136]	; 0x88
 968:	e58c7188 	str	r7, [r12, #392]	; 0x188
 96c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 970:	eaffffe9 	b	91c <__register_exitproc+0x94>
 974:	00000c6c 	.word	0x00000c6c
 978:	00000000 	.word	0x00000000

0000097c <__call_exitprocs>:
 97c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 980:	e59f3168 	ldr	r3, [pc, #360]	; af0 <__call_exitprocs+0x174>
 984:	e5933000 	ldr	r3, [r3]
 988:	e24dd014 	sub	sp, sp, #20
 98c:	e58d3004 	str	r3, [sp, #4]
 990:	e2833f52 	add	r3, r3, #328	; 0x148
 994:	e58d0008 	str	r0, [sp, #8]
 998:	e58d300c 	str	r3, [sp, #12]
 99c:	e1a07001 	mov	r7, r1
 9a0:	e3a08001 	mov	r8, #1
 9a4:	e59d3004 	ldr	r3, [sp, #4]
 9a8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 9ac:	e3560000 	cmp	r6, #0
 9b0:	e59db00c 	ldr	r11, [sp, #12]
 9b4:	0a000033 	beq	a88 <__call_exitprocs+0x10c>
 9b8:	e5965004 	ldr	r5, [r6, #4]
 9bc:	e2554001 	subs	r4, r5, #1
 9c0:	5286a088 	addpl	r10, r6, #136	; 0x88
 9c4:	5285501f 	addpl	r5, r5, #31
 9c8:	508a5105 	addpl	r5, r10, r5, lsl #2
 9cc:	5a000007 	bpl	9f0 <__call_exitprocs+0x74>
 9d0:	ea000029 	b	a7c <__call_exitprocs+0x100>
 9d4:	e5953000 	ldr	r3, [r5]
 9d8:	e1530007 	cmp	r3, r7
 9dc:	0a000005 	beq	9f8 <__call_exitprocs+0x7c>
 9e0:	e2444001 	sub	r4, r4, #1
 9e4:	e3740001 	cmn	r4, #1
 9e8:	e2455004 	sub	r5, r5, #4
 9ec:	0a000022 	beq	a7c <__call_exitprocs+0x100>
 9f0:	e3570000 	cmp	r7, #0
 9f4:	1afffff6 	bne	9d4 <__call_exitprocs+0x58>
 9f8:	e5963004 	ldr	r3, [r6, #4]
 9fc:	e06a2005 	rsb	r2, r10, r5
 a00:	e2433001 	sub	r3, r3, #1
 a04:	e0862002 	add	r2, r6, r2
 a08:	e1530004 	cmp	r3, r4
 a0c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 a10:	13a01000 	movne	r1, #0
 a14:	05864004 	streq	r4, [r6, #4]
 a18:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 a1c:	e3530000 	cmp	r3, #0
 a20:	0affffee 	beq	9e0 <__call_exitprocs+0x64>
 a24:	e1a02418 	lsl	r2, r8, r4
 a28:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 a2c:	e1120001 	tst	r2, r1
 a30:	e5969004 	ldr	r9, [r6, #4]
 a34:	0a000016 	beq	a94 <__call_exitprocs+0x118>
 a38:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 a3c:	e1120001 	tst	r2, r1
 a40:	1a000016 	bne	aa0 <__call_exitprocs+0x124>
 a44:	e59d0008 	ldr	r0, [sp, #8]
 a48:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 a4c:	e1a0e00f 	mov	lr, pc
 a50:	e12fff13 	bx	r3
 a54:	e5963004 	ldr	r3, [r6, #4]
 a58:	e1530009 	cmp	r3, r9
 a5c:	1affffd0 	bne	9a4 <__call_exitprocs+0x28>
 a60:	e59b3000 	ldr	r3, [r11]
 a64:	e1530006 	cmp	r3, r6
 a68:	1affffcd 	bne	9a4 <__call_exitprocs+0x28>
 a6c:	e2444001 	sub	r4, r4, #1
 a70:	e3740001 	cmn	r4, #1
 a74:	e2455004 	sub	r5, r5, #4
 a78:	1affffdc 	bne	9f0 <__call_exitprocs+0x74>
 a7c:	e59f1070 	ldr	r1, [pc, #112]	; af4 <__call_exitprocs+0x178>
 a80:	e3510000 	cmp	r1, #0
 a84:	1a000009 	bne	ab0 <__call_exitprocs+0x134>
 a88:	e28dd014 	add	sp, sp, #20
 a8c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a90:	e12fff1e 	bx	lr
 a94:	e1a0e00f 	mov	lr, pc
 a98:	e12fff13 	bx	r3
 a9c:	eaffffec 	b	a54 <__call_exitprocs+0xd8>
 aa0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 aa4:	e1a0e00f 	mov	lr, pc
 aa8:	e12fff13 	bx	r3
 aac:	eaffffe8 	b	a54 <__call_exitprocs+0xd8>
 ab0:	e5963004 	ldr	r3, [r6, #4]
 ab4:	e3530000 	cmp	r3, #0
 ab8:	e5963000 	ldr	r3, [r6]
 abc:	1a000008 	bne	ae4 <__call_exitprocs+0x168>
 ac0:	e3530000 	cmp	r3, #0
 ac4:	0a000006 	beq	ae4 <__call_exitprocs+0x168>
 ac8:	e1a00006 	mov	r0, r6
 acc:	e58b3000 	str	r3, [r11]
 ad0:	e320f000 	nop	{0}
 ad4:	e59b6000 	ldr	r6, [r11]
 ad8:	e3560000 	cmp	r6, #0
 adc:	1affffb5 	bne	9b8 <__call_exitprocs+0x3c>
 ae0:	eaffffe8 	b	a88 <__call_exitprocs+0x10c>
 ae4:	e1a0b006 	mov	r11, r6
 ae8:	e1a06003 	mov	r6, r3
 aec:	eafffff9 	b	ad8 <__call_exitprocs+0x15c>
 af0:	00000c6c 	.word	0x00000c6c
 af4:	00000000 	.word	0x00000000

00000af8 <register_fini>:
 af8:	e92d4008 	push	{r3, lr}
 afc:	e59f3010 	ldr	r3, [pc, #16]	; b14 <register_fini+0x1c>
 b00:	e3530000 	cmp	r3, #0
 b04:	159f000c 	ldrne	r0, [pc, #12]	; b18 <register_fini+0x20>
 b08:	1bffff49 	blne	834 <atexit>
 b0c:	e8bd4008 	pop	{r3, lr}
 b10:	e12fff1e 	bx	lr
 b14:	00000c94 	.word	0x00000c94
 b18:	00000b1c 	.word	0x00000b1c

00000b1c <__libc_fini_array>:
 b1c:	e92d4038 	push	{r3, r4, r5, lr}
 b20:	e59f5030 	ldr	r5, [pc, #48]	; b58 <__libc_fini_array+0x3c>
 b24:	e59f4030 	ldr	r4, [pc, #48]	; b5c <__libc_fini_array+0x40>
 b28:	e0654004 	rsb	r4, r5, r4
 b2c:	e1b04144 	asrs	r4, r4, #2
 b30:	10855104 	addne	r5, r5, r4, lsl #2
 b34:	0a000004 	beq	b4c <__libc_fini_array+0x30>
 b38:	e5353004 	ldr	r3, [r5, #-4]!
 b3c:	e1a0e00f 	mov	lr, pc
 b40:	e12fff13 	bx	r3
 b44:	e2544001 	subs	r4, r4, #1
 b48:	1afffffa 	bne	b38 <__libc_fini_array+0x1c>
 b4c:	eb000050 	bl	c94 <__libc_fini>
 b50:	e8bd4038 	pop	{r3, r4, r5, lr}
 b54:	e12fff1e 	bx	lr
 b58:	00000cac 	.word	0x00000cac
 b5c:	00000cb0 	.word	0x00000cb0

00000b60 <__cs3_premain>:
 b60:	e92d4008 	push	{r3, lr}
 b64:	eb00001d 	bl	be0 <__libc_init_array>
 b68:	e59f3030 	ldr	r3, [pc, #48]	; ba0 <__cs3_premain+0x40>
 b6c:	e3530000 	cmp	r3, #0
 b70:	15930000 	ldrne	r0, [r3]
 b74:	01a00003 	moveq	r0, r3
 b78:	e59f3024 	ldr	r3, [pc, #36]	; ba4 <__cs3_premain+0x44>
 b7c:	e3530000 	cmp	r3, #0
 b80:	15931000 	ldrne	r1, [r3]
 b84:	01a01003 	moveq	r1, r3
 b88:	e3a02000 	mov	r2, #0
 b8c:	ebfffdb2 	bl	25c <main>
 b90:	e59f3010 	ldr	r3, [pc, #16]	; ba8 <__cs3_premain+0x48>
 b94:	e3530000 	cmp	r3, #0
 b98:	1bffff2d 	blne	854 <exit>
 b9c:	eafffffe 	b	b9c <__cs3_premain+0x3c>
	...
 ba8:	00000854 	.word	0x00000854

00000bac <_exit>:
 bac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 bb0:	e3a00018 	mov	r0, #24
 bb4:	e59f1004 	ldr	r1, [pc, #4]	; bc0 <_exit+0x14>
 bb8:	ef123456 	svc	0x00123456
 bbc:	eafffffe 	b	bbc <_exit+0x10>
 bc0:	00020026 	.word	0x00020026

00000bc4 <__cs3_isr_interrupt>:
 bc4:	eafffffe 	b	bc4 <__cs3_isr_interrupt>

00000bc8 <__cs3_isr_undef>:
 bc8:	eafffffe 	b	bc8 <__cs3_isr_undef>

00000bcc <__cs3_isr_swi>:
 bcc:	eafffffe 	b	bcc <__cs3_isr_swi>

00000bd0 <__cs3_isr_pabort>:
 bd0:	eafffffe 	b	bd0 <__cs3_isr_pabort>

00000bd4 <__cs3_isr_dabort>:
 bd4:	eafffffe 	b	bd4 <__cs3_isr_dabort>

00000bd8 <__cs3_isr_irq>:
 bd8:	eafffffe 	b	bd8 <__cs3_isr_irq>

00000bdc <__cs3_isr_fiq>:
 bdc:	eafffffe 	b	bdc <__cs3_isr_fiq>

00000be0 <__libc_init_array>:
 be0:	e92d4070 	push	{r4, r5, r6, lr}
 be4:	e59f506c 	ldr	r5, [pc, #108]	; c58 <__libc_init_array+0x78>
 be8:	e59f606c 	ldr	r6, [pc, #108]	; c5c <__libc_init_array+0x7c>
 bec:	e0656006 	rsb	r6, r5, r6
 bf0:	e1b06146 	asrs	r6, r6, #2
 bf4:	12455004 	subne	r5, r5, #4
 bf8:	13a04000 	movne	r4, #0
 bfc:	0a000005 	beq	c18 <__libc_init_array+0x38>
 c00:	e5b53004 	ldr	r3, [r5, #4]!
 c04:	e2844001 	add	r4, r4, #1
 c08:	e1a0e00f 	mov	lr, pc
 c0c:	e12fff13 	bx	r3
 c10:	e1560004 	cmp	r6, r4
 c14:	1afffff9 	bne	c00 <__libc_init_array+0x20>
 c18:	e59f5040 	ldr	r5, [pc, #64]	; c60 <__libc_init_array+0x80>
 c1c:	e59f6040 	ldr	r6, [pc, #64]	; c64 <__libc_init_array+0x84>
 c20:	e0656006 	rsb	r6, r5, r6
 c24:	eb000012 	bl	c74 <_init>
 c28:	e1b06146 	asrs	r6, r6, #2
 c2c:	12455004 	subne	r5, r5, #4
 c30:	13a04000 	movne	r4, #0
 c34:	0a000005 	beq	c50 <__libc_init_array+0x70>
 c38:	e5b53004 	ldr	r3, [r5, #4]!
 c3c:	e2844001 	add	r4, r4, #1
 c40:	e1a0e00f 	mov	lr, pc
 c44:	e12fff13 	bx	r3
 c48:	e1560004 	cmp	r6, r4
 c4c:	1afffff9 	bne	c38 <__libc_init_array+0x58>
 c50:	e8bd4070 	pop	{r4, r5, r6, lr}
 c54:	e12fff1e 	bx	lr
 c58:	00000c8c 	.word	0x00000c8c
 c5c:	00000c8c 	.word	0x00000c8c
 c60:	00000c8c 	.word	0x00000c8c
 c64:	00000c94 	.word	0x00000c94

Disassembly of section .rodata:

00000c6c <_global_impure_ptr>:
 c6c:	00000cd8 00000043                       ....C...

00000c74 <_init>:
 c74:	e1a0c00d 	mov	r12, sp
 c78:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c7c:	e24cb004 	sub	r11, r12, #4
 c80:	e24bd028 	sub	sp, r11, #40	; 0x28
 c84:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c88:	e12fff1e 	bx	lr

00000c8c <__init_array_start>:
 c8c:	00000af8 	.word	0x00000af8

00000c90 <__frame_dummy_init_array_entry>:
 c90:	00000208                                ....

00000c94 <__libc_fini>:
 c94:	e1a0c00d 	mov	r12, sp
 c98:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c9c:	e24cb004 	sub	r11, r12, #4
 ca0:	e24bd028 	sub	sp, r11, #40	; 0x28
 ca4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 ca8:	e12fff1e 	bx	lr

00000cac <__fini_array_start>:
 cac:	000001c4 	.word	0x000001c4

00000cb0 <__cs3_regions>:
 cb0:	00000000 	.word	0x00000000
 cb4:	00000040 	.word	0x00000040
 cb8:	00000040 	.word	0x00000040
 cbc:	000010c8 	.word	0x000010c8
 cc0:	00000020 	.word	0x00000020

00000cc4 <__cs3_regions_end>:
 cc4:	00000000 	.word	0x00000000
