
P:/G91_Lab3/stopwatch.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	b8 0e 00 00 c4 0e 00 00 d0 0e 00 00 dc 0e 00 00     ................
      30:	e8 0e 00 00 78 14 00 00 60 0d 00 00 f4 0e 00 00     ....x...`.......

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0004ce 	bl	1414 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001568 	.word	0x00001568

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000019a0 	.word	0x000019a0

00000124 <__cs3_heap_start_ptr>:
     124:	000019c8 	.word	0x000019c8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000019a8 	.word	0x000019a8
     170:	000019ab 	.word	0x000019ab
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000019a8 	.word	0x000019a8
     1bc:	000019a8 	.word	0x000019a8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000019a8 	.word	0x000019a8
     200:	00000000 	.word	0x00000000
     204:	00001504 	.word	0x00001504

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001504 	.word	0x00001504
     250:	000019ac 	.word	0x000019ac
     254:	00001568 	.word	0x00001568
     258:	00000000 	.word	0x00000000

0000025c <main>:
		
	return 0;
}
**/

int main() {
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd038 	sub	sp, sp, #56	; 0x38
	int_setup(2, (int[]) {73, 199 });
     268:	e3013508 	movw	r3, #5384	; 0x1508
     26c:	e3403000 	movt	r3, #0
     270:	e24b2024 	sub	r2, r11, #36	; 0x24
     274:	e8930003 	ldm	r3, {r0, r1}
     278:	e8820003 	stm	r2, {r0, r1}
     27c:	e24b3024 	sub	r3, r11, #36	; 0x24
     280:	e3a00002 	mov	r0, #2
     284:	e1a01003 	mov	r1, r3
     288:	eb000328 	bl	f30 <int_setup>
	enable_PB_INT_ASM(PB0 | PB1 | PB2);
     28c:	e3a00007 	mov	r0, #7
     290:	eb000372 	bl	1060 <enable_PB_INT_ASM>
	
	int timer_start=0;
     294:	e3a03000 	mov	r3, #0
     298:	e50b3008 	str	r3, [r11, #-8]
	int ms=0;
     29c:	e3a03000 	mov	r3, #0
     2a0:	e50b300c 	str	r3, [r11, #-12]
	int second=0;
     2a4:	e3a03000 	mov	r3, #0
     2a8:	e50b3010 	str	r3, [r11, #-16]
	int minute = 0;
     2ac:	e3a03000 	mov	r3, #0
     2b0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	char mmsDis = '0';
     2b4:	e3a03030 	mov	r3, #48	; 0x30
     2b8:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
	char msDis = '0';
     2bc:	e3a03030 	mov	r3, #48	; 0x30
     2c0:	e54b3016 	strb	r3, [r11, #-22]	; 0xffffffea
	char secondDis = '0';
     2c4:	e3a03030 	mov	r3, #48	; 0x30
     2c8:	e54b3017 	strb	r3, [r11, #-23]	; 0xffffffe9
	char tensDis = '0';
     2cc:	e3a03030 	mov	r3, #48	; 0x30
     2d0:	e54b3018 	strb	r3, [r11, #-24]	; 0xffffffe8
	char minuteDis = '0';
     2d4:	e3a03030 	mov	r3, #48	; 0x30
     2d8:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
	char tenmDis = '0';
     2dc:	e3a03030 	mov	r3, #48	; 0x30
     2e0:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6

	HPS_TIM_config_t hpstim;
	hpstim.tim = TIM0;
     2e4:	e3a03001 	mov	r3, #1
     2e8:	e54b3038 	strb	r3, [r11, #-56]	; 0xffffffc8
	hpstim.timeout = 10000; 
     2ec:	e3023710 	movw	r3, #10000	; 0x2710
     2f0:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
	hpstim.LD_en = 1;
     2f4:	e3a03001 	mov	r3, #1
     2f8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
	hpstim.INT_en = 1;
     2fc:	e3a03001 	mov	r3, #1
     300:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	hpstim.enable = 1;
     304:	e3a03001 	mov	r3, #1
     308:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	HPS_TIM_config_ASM(&hpstim);
     30c:	e24b3038 	sub	r3, r11, #56	; 0x38
     310:	e1a00003 	mov	r0, r3
     314:	eb00018c 	bl	94c <HPS_TIM_config_ASM>
	
	
	while (1) {
		if ( hps_tim0_int_flag && timer_start) {
     318:	e3003b04 	movw	r3, #2820	; 0xb04
     31c:	e3403000 	movt	r3, #0
     320:	e5933000 	ldr	r3, [r3]
     324:	e3530000 	cmp	r3, #0
     328:	0a000086 	beq	548 <main+0x2ec>
     32c:	e51b3008 	ldr	r3, [r11, #-8]
     330:	e3530000 	cmp	r3, #0
     334:	0a000083 	beq	548 <main+0x2ec>
		hps_tim0_int_flag=0;
     338:	e3003b04 	movw	r3, #2820	; 0xb04
     33c:	e3403000 	movt	r3, #0
     340:	e3a02000 	mov	r2, #0
     344:	e5832000 	str	r2, [r3]
    	ms=ms+10;
     348:	e51b300c 	ldr	r3, [r11, #-12]
     34c:	e283300a 	add	r3, r3, #10
     350:	e50b300c 	str	r3, [r11, #-12]
     	if(ms>=1000){
     354:	e51b200c 	ldr	r2, [r11, #-12]
     358:	e30033e7 	movw	r3, #999	; 0x3e7
     35c:	e1520003 	cmp	r2, r3
     360:	da000011 	ble	3ac <main+0x150>
      		ms=0;
     364:	e3a03000 	mov	r3, #0
     368:	e50b300c 	str	r3, [r11, #-12]
      		second++;
     36c:	e51b3010 	ldr	r3, [r11, #-16]
     370:	e2833001 	add	r3, r3, #1
     374:	e50b3010 	str	r3, [r11, #-16]
      		if(second>=60){
     378:	e51b3010 	ldr	r3, [r11, #-16]
     37c:	e353003b 	cmp	r3, #59	; 0x3b
     380:	da000009 	ble	3ac <main+0x150>
        		second=0;
     384:	e3a03000 	mov	r3, #0
     388:	e50b3010 	str	r3, [r11, #-16]
        		minute++;
     38c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     390:	e2833001 	add	r3, r3, #1
     394:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        		if(minute>=60){
     398:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     39c:	e353003b 	cmp	r3, #59	; 0x3b
     3a0:	da000001 	ble	3ac <main+0x150>
       				minute=0;
     3a4:	e3a03000 	mov	r3, #0
     3a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        		}
      		}
     	}
     	mmsDis=ms%100/10+48;
     3ac:	e51b200c 	ldr	r2, [r11, #-12]
     3b0:	e308351f 	movw	r3, #34079	; 0x851f
     3b4:	e34531eb 	movt	r3, #20971	; 0x51eb
     3b8:	e0c31293 	smull	r1, r3, r3, r2
     3bc:	e1a012c3 	asr	r1, r3, #5
     3c0:	e1a03fc2 	asr	r3, r2, #31
     3c4:	e0633001 	rsb	r3, r3, r1
     3c8:	e3a01064 	mov	r1, #100	; 0x64
     3cc:	e0030391 	mul	r3, r1, r3
     3d0:	e0633002 	rsb	r3, r3, r2
     3d4:	e3062667 	movw	r2, #26215	; 0x6667
     3d8:	e3462666 	movt	r2, #26214	; 0x6666
     3dc:	e0c21392 	smull	r1, r2, r2, r3
     3e0:	e1a02142 	asr	r2, r2, #2
     3e4:	e1a03fc3 	asr	r3, r3, #31
     3e8:	e0633002 	rsb	r3, r3, r2
     3ec:	e6ef3073 	uxtb	r3, r3
     3f0:	e2833030 	add	r3, r3, #48	; 0x30
     3f4:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
     	msDis=ms/100+48;
     3f8:	e51b200c 	ldr	r2, [r11, #-12]
     3fc:	e308351f 	movw	r3, #34079	; 0x851f
     400:	e34531eb 	movt	r3, #20971	; 0x51eb
     404:	e0c31293 	smull	r1, r3, r3, r2
     408:	e1a012c3 	asr	r1, r3, #5
     40c:	e1a03fc2 	asr	r3, r2, #31
     410:	e0633001 	rsb	r3, r3, r1
     414:	e6ef3073 	uxtb	r3, r3
     418:	e2833030 	add	r3, r3, #48	; 0x30
     41c:	e54b3016 	strb	r3, [r11, #-22]	; 0xffffffea
     	secondDis=second%10+48;
     420:	e51b1010 	ldr	r1, [r11, #-16]
     424:	e3063667 	movw	r3, #26215	; 0x6667
     428:	e3463666 	movt	r3, #26214	; 0x6666
     42c:	e0c32193 	smull	r2, r3, r3, r1
     430:	e1a02143 	asr	r2, r3, #2
     434:	e1a03fc1 	asr	r3, r1, #31
     438:	e0632002 	rsb	r2, r3, r2
     43c:	e1a03002 	mov	r3, r2
     440:	e1a03103 	lsl	r3, r3, #2
     444:	e0833002 	add	r3, r3, r2
     448:	e1a03083 	lsl	r3, r3, #1
     44c:	e0632001 	rsb	r2, r3, r1
     450:	e6ef3072 	uxtb	r3, r2
     454:	e2833030 	add	r3, r3, #48	; 0x30
     458:	e54b3017 	strb	r3, [r11, #-23]	; 0xffffffe9
     	tensDis=second/10 +48;
     45c:	e51b2010 	ldr	r2, [r11, #-16]
     460:	e3063667 	movw	r3, #26215	; 0x6667
     464:	e3463666 	movt	r3, #26214	; 0x6666
     468:	e0c31293 	smull	r1, r3, r3, r2
     46c:	e1a01143 	asr	r1, r3, #2
     470:	e1a03fc2 	asr	r3, r2, #31
     474:	e0633001 	rsb	r3, r3, r1
     478:	e6ef3073 	uxtb	r3, r3
     47c:	e2833030 	add	r3, r3, #48	; 0x30
     480:	e54b3018 	strb	r3, [r11, #-24]	; 0xffffffe8
     	minuteDis=minute%10+48;
     484:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     488:	e3063667 	movw	r3, #26215	; 0x6667
     48c:	e3463666 	movt	r3, #26214	; 0x6666
     490:	e0c32193 	smull	r2, r3, r3, r1
     494:	e1a02143 	asr	r2, r3, #2
     498:	e1a03fc1 	asr	r3, r1, #31
     49c:	e0632002 	rsb	r2, r3, r2
     4a0:	e1a03002 	mov	r3, r2
     4a4:	e1a03103 	lsl	r3, r3, #2
     4a8:	e0833002 	add	r3, r3, r2
     4ac:	e1a03083 	lsl	r3, r3, #1
     4b0:	e0632001 	rsb	r2, r3, r1
     4b4:	e6ef3072 	uxtb	r3, r2
     4b8:	e2833030 	add	r3, r3, #48	; 0x30
     4bc:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
     	tenmDis=minute/10+48;
     4c0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     4c4:	e3063667 	movw	r3, #26215	; 0x6667
     4c8:	e3463666 	movt	r3, #26214	; 0x6666
     4cc:	e0c31293 	smull	r1, r3, r3, r2
     4d0:	e1a01143 	asr	r1, r3, #2
     4d4:	e1a03fc2 	asr	r3, r2, #31
     4d8:	e0633001 	rsb	r3, r3, r1
     4dc:	e6ef3073 	uxtb	r3, r3
     4e0:	e2833030 	add	r3, r3, #48	; 0x30
     4e4:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6
     
      	HEX_write_ASM(HEX0, mmsDis);
     4e8:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     4ec:	e3a00001 	mov	r0, #1
     4f0:	e1a01003 	mov	r1, r3
     4f4:	eb00009e 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX1, msDis);
     4f8:	e55b3016 	ldrb	r3, [r11, #-22]	; 0xffffffea
     4fc:	e3a00002 	mov	r0, #2
     500:	e1a01003 	mov	r1, r3
     504:	eb00009a 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX2, secondDis);
     508:	e55b3017 	ldrb	r3, [r11, #-23]	; 0xffffffe9
     50c:	e3a00004 	mov	r0, #4
     510:	e1a01003 	mov	r1, r3
     514:	eb000096 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX3, tensDis);
     518:	e55b3018 	ldrb	r3, [r11, #-24]	; 0xffffffe8
     51c:	e3a00008 	mov	r0, #8
     520:	e1a01003 	mov	r1, r3
     524:	eb000092 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX4, minuteDis);
     528:	e55b3019 	ldrb	r3, [r11, #-25]	; 0xffffffe7
     52c:	e3a00010 	mov	r0, #16
     530:	e1a01003 	mov	r1, r3
     534:	eb00008e 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX5, tenmDis);
     538:	e55b301a 	ldrb	r3, [r11, #-26]	; 0xffffffe6
     53c:	e3a00020 	mov	r0, #32
     540:	e1a01003 	mov	r1, r3
     544:	eb00008a 	bl	774 <HEX_write_ASM>
	}
		
		if (pb_int_flag != 0){
     548:	e3003b08 	movw	r3, #2824	; 0xb08
     54c:	e3403000 	movt	r3, #0
     550:	e5933000 	ldr	r3, [r3]
     554:	e3530000 	cmp	r3, #0
     558:	0a000037 	beq	63c <main+0x3e0>
			if(pb_int_flag == 1)
     55c:	e3003b08 	movw	r3, #2824	; 0xb08
     560:	e3403000 	movt	r3, #0
     564:	e5933000 	ldr	r3, [r3]
     568:	e3530001 	cmp	r3, #1
     56c:	1a000002 	bne	57c <main+0x320>
				timer_start=1;
     570:	e3a03001 	mov	r3, #1
     574:	e50b3008 	str	r3, [r11, #-8]
     578:	ea00002b 	b	62c <main+0x3d0>
			else if(pb_int_flag == 2)
     57c:	e3003b08 	movw	r3, #2824	; 0xb08
     580:	e3403000 	movt	r3, #0
     584:	e5933000 	ldr	r3, [r3]
     588:	e3530002 	cmp	r3, #2
     58c:	1a000002 	bne	59c <main+0x340>
				timer_start = 0;
     590:	e3a03000 	mov	r3, #0
     594:	e50b3008 	str	r3, [r11, #-8]
     598:	ea000023 	b	62c <main+0x3d0>
			else if(pb_int_flag == 4 & timer_start==0){
     59c:	e3003b08 	movw	r3, #2824	; 0xb08
     5a0:	e3403000 	movt	r3, #0
     5a4:	e5933000 	ldr	r3, [r3]
     5a8:	e3530004 	cmp	r3, #4
     5ac:	13a03000 	movne	r3, #0
     5b0:	03a03001 	moveq	r3, #1
     5b4:	e6ef2073 	uxtb	r2, r3
     5b8:	e51b3008 	ldr	r3, [r11, #-8]
     5bc:	e3530000 	cmp	r3, #0
     5c0:	13a03000 	movne	r3, #0
     5c4:	03a03001 	moveq	r3, #1
     5c8:	e6ef3073 	uxtb	r3, r3
     5cc:	e0023003 	and	r3, r2, r3
     5d0:	e6ef3073 	uxtb	r3, r3
     5d4:	e3530000 	cmp	r3, #0
     5d8:	0a000013 	beq	62c <main+0x3d0>
				ms = 0;
     5dc:	e3a03000 	mov	r3, #0
     5e0:	e50b300c 	str	r3, [r11, #-12]
		second = 0;
     5e4:	e3a03000 	mov	r3, #0
     5e8:	e50b3010 	str	r3, [r11, #-16]
		minute = 0;
     5ec:	e3a03000 	mov	r3, #0
     5f0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		timer_start = 0; 
     5f4:	e3a03000 	mov	r3, #0
     5f8:	e50b3008 	str	r3, [r11, #-8]
		mmsDis = '0';
     5fc:	e3a03030 	mov	r3, #48	; 0x30
     600:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
		msDis = '0';
     604:	e3a03030 	mov	r3, #48	; 0x30
     608:	e54b3016 	strb	r3, [r11, #-22]	; 0xffffffea
		secondDis = '0';
     60c:	e3a03030 	mov	r3, #48	; 0x30
     610:	e54b3017 	strb	r3, [r11, #-23]	; 0xffffffe9
		tensDis = '0';
     614:	e3a03030 	mov	r3, #48	; 0x30
     618:	e54b3018 	strb	r3, [r11, #-24]	; 0xffffffe8
		minuteDis = '0';
     61c:	e3a03030 	mov	r3, #48	; 0x30
     620:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
		tenmDis = '0';
     624:	e3a03030 	mov	r3, #48	; 0x30
     628:	e54b301a 	strb	r3, [r11, #-26]	; 0xffffffe6
			}
			pb_int_flag = 0;
     62c:	e3003b08 	movw	r3, #2824	; 0xb08
     630:	e3403000 	movt	r3, #0
     634:	e3a02000 	mov	r2, #0
     638:	e5832000 	str	r2, [r3]
		}
		HEX_write_ASM(HEX0, mmsDis);
     63c:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     640:	e3a00001 	mov	r0, #1
     644:	e1a01003 	mov	r1, r3
     648:	eb000049 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX1, msDis);
     64c:	e55b3016 	ldrb	r3, [r11, #-22]	; 0xffffffea
     650:	e3a00002 	mov	r0, #2
     654:	e1a01003 	mov	r1, r3
     658:	eb000045 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX2, secondDis);
     65c:	e55b3017 	ldrb	r3, [r11, #-23]	; 0xffffffe9
     660:	e3a00004 	mov	r0, #4
     664:	e1a01003 	mov	r1, r3
     668:	eb000041 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX3, tensDis);
     66c:	e55b3018 	ldrb	r3, [r11, #-24]	; 0xffffffe8
     670:	e3a00008 	mov	r0, #8
     674:	e1a01003 	mov	r1, r3
     678:	eb00003d 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX4, minuteDis);
     67c:	e55b3019 	ldrb	r3, [r11, #-25]	; 0xffffffe7
     680:	e3a00010 	mov	r0, #16
     684:	e1a01003 	mov	r1, r3
     688:	eb000039 	bl	774 <HEX_write_ASM>
		HEX_write_ASM(HEX5, tenmDis);
     68c:	e55b301a 	ldrb	r3, [r11, #-26]	; 0xffffffe6
     690:	e3a00020 	mov	r0, #32
     694:	e1a01003 	mov	r1, r3
     698:	eb000035 	bl	774 <HEX_write_ASM>
	}
     69c:	eaffff1d 	b	318 <main+0xbc>

000006a0 <HEX_clear_ASM>:
		.global HEX_clear_ASM
		.global HEX_flood_ASM
		.global HEX_write_ASM

HEX_clear_ASM:					//we know that R0 holds a hot-one encoding of which HEX display
		PUSH {R1-R8,LR}
     6a0:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
		LDR R1, =HEX_DISP_1		//put location of the HEX3-0 register into R0
     6a4:	e59f1298 	ldr	r1, [pc, #664]	; 944 <HEX_write_DONE+0x10>
		MOV R3, #0				//this is our counter for which hex counts
     6a8:	e3a03000 	mov	r3, #0

000006ac <HEX_clear_LOOP>:
		
HEX_clear_LOOP:
		CMP R3, #6				//if we looped all of them
     6ac:	e3530006 	cmp	r3, #6
		BEQ HEX_clear_CORRECT	//branch to done if error
     6b0:	0a000005 	beq	6cc <HEX_clear_CORRECT>

		AND R4, R0, #1			//AND 0x0000 0000 is equal to 0x0000 00001, shift if not equal
     6b4:	e2004001 	and	r4, r0, #1
		CMP R4, #1				//if equal, this is the desired HEX
     6b8:	e3540001 	cmp	r4, #1
		BEQ HEX_clear_CORRECT	//branch to the part that does something
     6bc:	0a000002 	beq	6cc <HEX_clear_CORRECT>
							
		ASR R0, R0, #1			//if not equal, then shift by 1 bit
     6c0:	e1a000c0 	asr	r0, r0, #1
		ADD R3, R3, #1			//also increment our counter which will tell us which one is our HEX
     6c4:	e2833001 	add	r3, r3, #1
		B HEX_clear_LOOP		//loop again if not correct
     6c8:	eafffff7 	b	6ac <HEX_clear_LOOP>

000006cc <HEX_clear_CORRECT>:
		
HEX_clear_CORRECT:
		CMP R3, #3				//if counter is bigger than 3, we are at HEX 4 or 5
     6cc:	e3530003 	cmp	r3, #3
		SUBGT R3, R3, #4		//we set our counter back to either 0 or 1 since we are updating the bits
     6d0:	c2433004 	subgt	r3, r3, #4
		LDRGT R1, =HEX_DISP_2	//we set it to the the other disp HEX
     6d4:	c59f126c 	ldrgt	r1, [pc, #620]	; 948 <HEX_write_DONE+0x14>
		LDR R2, [R1]
     6d8:	e5912000 	ldr	r2, [r1]
		MOV R5, #0xFFFFFF00		//give it an initial value
     6dc:	e3e050ff 	mvn	r5, #255	; 0xff
		B HEX_clear_LOOP2		//to push stuff back
     6e0:	eaffffff 	b	6e4 <HEX_clear_LOOP2>

000006e4 <HEX_clear_LOOP2>:

HEX_clear_LOOP2:
		CMP R3, #0				//if not equal to 0, we update it
     6e4:	e3530000 	cmp	r3, #0
		BEQ HEX_clear_DONE		//branch to done		
     6e8:	0a000003 	beq	6fc <HEX_clear_DONE>
		LSL R5, R5, #8			//shift left by 8 bits
     6ec:	e1a05405 	lsl	r5, r5, #8
		ADD R5, R5, #0xFF		//keep our empty space constant
     6f0:	e28550ff 	add	r5, r5, #255	; 0xff
		SUB R3, R3, #1			//decrement our counter
     6f4:	e2433001 	sub	r3, r3, #1
		B HEX_clear_LOOP2
     6f8:	eafffff9 	b	6e4 <HEX_clear_LOOP2>

000006fc <HEX_clear_DONE>:

HEX_clear_DONE:
		AND R2, R2, R5			//we and the two values
     6fc:	e0022005 	and	r2, r2, r5
		STR R2, [R1]			//we store back on the display
     700:	e5812000 	str	r2, [r1]
		POP {R1-R8, R14}
     704:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
		BX LR
     708:	e12fff1e 	bx	lr

0000070c <HEX_flood_ASM>:

HEX_flood_ASM:					//we know that R0 holds a hot-one encoding of which HEX display
		PUSH {R1-R8,R14}
     70c:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
		LDR R1, =HEX_DISP_1		//put location of the HEX3-0 register into R0
     710:	e59f122c 	ldr	r1, [pc, #556]	; 944 <HEX_write_DONE+0x10>
		MOV R3, #0				//this is our counter for which hex counts
     714:	e3a03000 	mov	r3, #0

00000718 <HEX_flood_LOOP>:
		
HEX_flood_LOOP:
		CMP R3, #6				//if we looped all of them
     718:	e3530006 	cmp	r3, #6
		BEQ HEX_flood_CORRECT	//branch to done if error
     71c:	0a000005 	beq	738 <HEX_flood_CORRECT>

		AND R4, R0, #1			//AND 0x0000 0000 is equal to 0x0000 00001, shift if not equal
     720:	e2004001 	and	r4, r0, #1
		CMP R4, #1				//if equal, this is the desired HEX
     724:	e3540001 	cmp	r4, #1
		BEQ HEX_flood_CORRECT	//branch to the part that does something
     728:	0a000002 	beq	738 <HEX_flood_CORRECT>
							
		ASR R0, R0, #1			//if not equal, then shift by 1 bit
     72c:	e1a000c0 	asr	r0, r0, #1
		ADD R3, R3, #1			//also increment our counter which will tell us which one is our HEX
     730:	e2833001 	add	r3, r3, #1
		B HEX_flood_LOOP		//loop again if not correct
     734:	eafffff7 	b	718 <HEX_flood_LOOP>

00000738 <HEX_flood_CORRECT>:
		
HEX_flood_CORRECT:
		CMP R3, #3				//if counter is bigger than 3, we are at HEX 4 or 5
     738:	e3530003 	cmp	r3, #3
		SUBGT R3, R3, #4		//we set our counter back to either 0 or 1 since we are updating the bits
     73c:	c2433004 	subgt	r3, r3, #4
		LDRGT R1, =HEX_DISP_2	//we set it to the the other disp HEX
     740:	c59f1200 	ldrgt	r1, [pc, #512]	; 948 <HEX_write_DONE+0x14>
		LDR R2, [R1]
     744:	e5912000 	ldr	r2, [r1]
		MOV R5, #0x000000FF		//give it an initial value
     748:	e3a050ff 	mov	r5, #255	; 0xff
		B HEX_flood_LOOP2		//to push stuff back
     74c:	eaffffff 	b	750 <HEX_flood_LOOP2>

00000750 <HEX_flood_LOOP2>:

HEX_flood_LOOP2:
		CMP R3, #0				//if not equal to 0, we update it
     750:	e3530000 	cmp	r3, #0
		BEQ HEX_flood_DONE		//branch to done		
     754:	0a000002 	beq	764 <HEX_flood_DONE>
		LSL R5, R5, #8			//shift left by 8 bits
     758:	e1a05405 	lsl	r5, r5, #8
		SUB R3, R3, #1			//decrement our counter
     75c:	e2433001 	sub	r3, r3, #1
		B HEX_flood_LOOP2
     760:	eafffffa 	b	750 <HEX_flood_LOOP2>

00000764 <HEX_flood_DONE>:

HEX_flood_DONE:
		ORR R2, R2, R5			//we and the two values
     764:	e1822005 	orr	r2, r2, r5
		STR R2, [R1]			//we store back on the display
     768:	e5812000 	str	r2, [r1]
		POP {R1-R8,LR}
     76c:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
		BX LR
     770:	e12fff1e 	bx	lr

00000774 <HEX_write_ASM>:
//		LDR R1, =HEX_DISP_2
//		STR R2, [R1]
//		BX LR

HEX_write_ASM:					//we know that R0 holds a hot-one encoding of which HEX display, R1 holds the character value
		MOV R10, R0
     774:	e1a0a000 	mov	r10, r0
		MOV R9, R1
     778:	e1a09001 	mov	r9, r1
		PUSH {R1-R8,LR}
     77c:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
		BL HEX_clear_ASM		//we have to clear the display we have before doing anything on it
     780:	ebffffc6 	bl	6a0 <HEX_clear_ASM>
		POP {R1-R8,R14}
     784:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
		MOV R0, R10
     788:	e1a0000a 	mov	r0, r10
		
		PUSH {R1-R8,LR}
     78c:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
		LDR R1, =HEX_DISP_1		//put location of the HEX3-0 register into R0
     790:	e59f11ac 	ldr	r1, [pc, #428]	; 944 <HEX_write_DONE+0x10>
		MOV R3, #0				//this is our counter for which hex counts
     794:	e3a03000 	mov	r3, #0
		B HEX_write_0
     798:	eaffffff 	b	79c <HEX_write_0>

0000079c <HEX_write_0>:

HEX_write_0:
		CMP R9, #48
     79c:	e3590030 	cmp	r9, #48	; 0x30
		BNE HEX_write_1
     7a0:	1a000002 	bne	7b0 <HEX_write_1>
		MOV R5, #0x3F
     7a4:	e3a0503f 	mov	r5, #63	; 0x3f
		MOV R8, R5
     7a8:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     7ac:	ea00004d 	b	8e8 <HEX_write_LOOP>

000007b0 <HEX_write_1>:

HEX_write_1:	
		CMP R9, #49
     7b0:	e3590031 	cmp	r9, #49	; 0x31
		BNE HEX_write_2
     7b4:	1a000002 	bne	7c4 <HEX_write_2>
		MOV R5, #0x06
     7b8:	e3a05006 	mov	r5, #6
		MOV R8, R5
     7bc:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     7c0:	ea000048 	b	8e8 <HEX_write_LOOP>

000007c4 <HEX_write_2>:

HEX_write_2:	
		CMP R9, #50
     7c4:	e3590032 	cmp	r9, #50	; 0x32
		BNE HEX_write_3
     7c8:	1a000002 	bne	7d8 <HEX_write_3>
		MOV R5, #0x5B
     7cc:	e3a0505b 	mov	r5, #91	; 0x5b
		MOV R8, R5
     7d0:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     7d4:	ea000043 	b	8e8 <HEX_write_LOOP>

000007d8 <HEX_write_3>:

HEX_write_3:	
		CMP R9, #51
     7d8:	e3590033 	cmp	r9, #51	; 0x33
		BNE HEX_write_4
     7dc:	1a000002 	bne	7ec <HEX_write_4>
		MOV R5, #0x4F
     7e0:	e3a0504f 	mov	r5, #79	; 0x4f
		MOV R8, R5
     7e4:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     7e8:	ea00003e 	b	8e8 <HEX_write_LOOP>

000007ec <HEX_write_4>:

HEX_write_4:	
		CMP R9, #52
     7ec:	e3590034 	cmp	r9, #52	; 0x34
		BNE HEX_write_5
     7f0:	1a000002 	bne	800 <HEX_write_5>
		MOV R5, #0x66
     7f4:	e3a05066 	mov	r5, #102	; 0x66
		MOV R8, R5
     7f8:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     7fc:	ea000039 	b	8e8 <HEX_write_LOOP>

00000800 <HEX_write_5>:

HEX_write_5:	
		CMP R9, #53
     800:	e3590035 	cmp	r9, #53	; 0x35
		BNE HEX_write_6
     804:	1a000002 	bne	814 <HEX_write_6>
		MOV R5, #0x6D
     808:	e3a0506d 	mov	r5, #109	; 0x6d
		MOV R8, R5
     80c:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     810:	ea000034 	b	8e8 <HEX_write_LOOP>

00000814 <HEX_write_6>:

HEX_write_6:	
		CMP R9, #54
     814:	e3590036 	cmp	r9, #54	; 0x36
		BNE HEX_write_7
     818:	1a000002 	bne	828 <HEX_write_7>
		MOV R5, #0x7D
     81c:	e3a0507d 	mov	r5, #125	; 0x7d
		MOV R8, R5
     820:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     824:	ea00002f 	b	8e8 <HEX_write_LOOP>

00000828 <HEX_write_7>:

HEX_write_7:	
		CMP R9, #55
     828:	e3590037 	cmp	r9, #55	; 0x37
		BNE HEX_write_8
     82c:	1a000002 	bne	83c <HEX_write_8>
		MOV R5, #0x07
     830:	e3a05007 	mov	r5, #7
		MOV R8, R5
     834:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     838:	ea00002a 	b	8e8 <HEX_write_LOOP>

0000083c <HEX_write_8>:

HEX_write_8:	
		CMP R9, #56
     83c:	e3590038 	cmp	r9, #56	; 0x38
		BNE HEX_write_9
     840:	1a000002 	bne	850 <HEX_write_9>
		MOV R5, #0x7F
     844:	e3a0507f 	mov	r5, #127	; 0x7f
		MOV R8, R5
     848:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     84c:	ea000025 	b	8e8 <HEX_write_LOOP>

00000850 <HEX_write_9>:

HEX_write_9:	
		CMP R9, #57
     850:	e3590039 	cmp	r9, #57	; 0x39
		BNE HEX_write_A
     854:	1a000002 	bne	864 <HEX_write_A>
		MOV R5, #0x6F
     858:	e3a0506f 	mov	r5, #111	; 0x6f
		MOV R8, R5
     85c:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     860:	ea000020 	b	8e8 <HEX_write_LOOP>

00000864 <HEX_write_A>:

HEX_write_A:	
		CMP R9, #58
     864:	e359003a 	cmp	r9, #58	; 0x3a
		BNE HEX_write_B
     868:	1a000002 	bne	878 <HEX_write_B>
		MOV R5, #0x77
     86c:	e3a05077 	mov	r5, #119	; 0x77
		MOV R8, R5
     870:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     874:	ea00001b 	b	8e8 <HEX_write_LOOP>

00000878 <HEX_write_B>:

HEX_write_B:	
		CMP R9, #59
     878:	e359003b 	cmp	r9, #59	; 0x3b
		BNE HEX_write_C
     87c:	1a000002 	bne	88c <HEX_write_C>
		MOV R5, #0x7C
     880:	e3a0507c 	mov	r5, #124	; 0x7c
		MOV R8, R5
     884:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     888:	ea000016 	b	8e8 <HEX_write_LOOP>

0000088c <HEX_write_C>:

HEX_write_C:	
		CMP R9, #60
     88c:	e359003c 	cmp	r9, #60	; 0x3c
		BNE HEX_write_D
     890:	1a000002 	bne	8a0 <HEX_write_D>
		MOV R5, #0x39
     894:	e3a05039 	mov	r5, #57	; 0x39
		MOV R8, R5
     898:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     89c:	ea000011 	b	8e8 <HEX_write_LOOP>

000008a0 <HEX_write_D>:

HEX_write_D:	
		CMP R9, #61
     8a0:	e359003d 	cmp	r9, #61	; 0x3d
		BNE HEX_write_E
     8a4:	1a000002 	bne	8b4 <HEX_write_E>
		MOV R5, #0x5E
     8a8:	e3a0505e 	mov	r5, #94	; 0x5e
		MOV R8, R5
     8ac:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     8b0:	ea00000c 	b	8e8 <HEX_write_LOOP>

000008b4 <HEX_write_E>:

HEX_write_E:	
		CMP R9, #62
     8b4:	e359003e 	cmp	r9, #62	; 0x3e
		BNE HEX_write_F
     8b8:	1a000002 	bne	8c8 <HEX_write_F>
		MOV R5, #0x79
     8bc:	e3a05079 	mov	r5, #121	; 0x79
		MOV R8, R5
     8c0:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     8c4:	ea000007 	b	8e8 <HEX_write_LOOP>

000008c8 <HEX_write_F>:

HEX_write_F:	
		CMP R9, #63
     8c8:	e359003f 	cmp	r9, #63	; 0x3f
		BNE HEX_write_OFF
     8cc:	1a000002 	bne	8dc <HEX_write_OFF>
		MOV R5, #0x71
     8d0:	e3a05071 	mov	r5, #113	; 0x71
		MOV R8, R5
     8d4:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     8d8:	ea000002 	b	8e8 <HEX_write_LOOP>

000008dc <HEX_write_OFF>:

HEX_write_OFF:
		MOV R5, #0
     8dc:	e3a05000 	mov	r5, #0
		MOV R8, R5
     8e0:	e1a08005 	mov	r8, r5
		B HEX_write_LOOP
     8e4:	eaffffff 	b	8e8 <HEX_write_LOOP>

000008e8 <HEX_write_LOOP>:
		
HEX_write_LOOP:
		CMP R3, #6				//if we looped all of them
     8e8:	e3530006 	cmp	r3, #6
		BEQ HEX_write_CORRECT	//branch to done if error
     8ec:	0a000005 	beq	908 <HEX_write_CORRECT>

		AND R4, R0, #1			//AND 0x0000 0000 is equal to 0x0000 00001, shift if not equal
     8f0:	e2004001 	and	r4, r0, #1
		CMP R4, #1				//if equal, this is the desired HEX
     8f4:	e3540001 	cmp	r4, #1
		BEQ HEX_write_CORRECT	//branch to the part that does something
     8f8:	0a000002 	beq	908 <HEX_write_CORRECT>
							
		ASR R0, R0, #1			//if not equal, then shift by 1 bit
     8fc:	e1a000c0 	asr	r0, r0, #1
		ADD R3, R3, #1			//also increment our counter which will tell us which one is our HEX
     900:	e2833001 	add	r3, r3, #1
		B HEX_write_LOOP		//loop again if not correct
     904:	eafffff7 	b	8e8 <HEX_write_LOOP>

00000908 <HEX_write_CORRECT>:
		
HEX_write_CORRECT:
		CMP R3, #3				//if counter is bigger than 3, we are at HEX 4 or 5
     908:	e3530003 	cmp	r3, #3
		SUBGT R3, R3, #4		//we set our counter back to either 0 or 1 since we are updating the bits
     90c:	c2433004 	subgt	r3, r3, #4
		LDRGT R1, =HEX_DISP_2	//we set it to the the other disp HEX
     910:	c59f1030 	ldrgt	r1, [pc, #48]	; 948 <HEX_write_DONE+0x14>
		LDR R2, [R1]
     914:	e5912000 	ldr	r2, [r1]
		MOV R5, R8				//give R8 an initial value, which is from our switch case
     918:	e1a05008 	mov	r5, r8
		B HEX_write_LOOP2		//to push stuff back
     91c:	eaffffff 	b	920 <HEX_write_LOOP2>

00000920 <HEX_write_LOOP2>:

HEX_write_LOOP2:
		CMP R3, #0				//if not equal to 0, we update it
     920:	e3530000 	cmp	r3, #0
		BEQ HEX_write_DONE		//branch to done		
     924:	0a000002 	beq	934 <HEX_write_DONE>
		LSL R5, R5, #8			//shift left by 8 bits, 
     928:	e1a05405 	lsl	r5, r5, #8
		SUB R3, R3, #1			//decrement our counter
     92c:	e2433001 	sub	r3, r3, #1
		B HEX_write_LOOP2
     930:	eafffffa 	b	920 <HEX_write_LOOP2>

00000934 <HEX_write_DONE>:

HEX_write_DONE:
		ORR R2, R2, R5			//we and the two values
     934:	e1822005 	orr	r2, r2, r5
		STR R2, [R1]			//we store back on the display
     938:	e5812000 	str	r2, [r1]
		POP {R1-R8,LR}
     93c:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
		BX LR
     940:	e12fff1e 	bx	lr
		.global HEX_flood_ASM
		.global HEX_write_ASM

HEX_clear_ASM:					//we know that R0 holds a hot-one encoding of which HEX display
		PUSH {R1-R8,LR}
		LDR R1, =HEX_DISP_1		//put location of the HEX3-0 register into R0
     944:	ff200020 	.word	0xff200020
		B HEX_clear_LOOP		//loop again if not correct
		
HEX_clear_CORRECT:
		CMP R3, #3				//if counter is bigger than 3, we are at HEX 4 or 5
		SUBGT R3, R3, #4		//we set our counter back to either 0 or 1 since we are updating the bits
		LDRGT R1, =HEX_DISP_2	//we set it to the the other disp HEX
     948:	ff200030 	.word	0xff200030

0000094c <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     94c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     950:	e3a01000 	mov	r1, #0
	MOV R2, #1
     954:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     958:	e5907000 	ldr	r7, [r0]
	B LOOP
     95c:	eaffffff 	b	960 <LOOP>

00000960 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     960:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     964:	0a000000 	beq	96c <CONTINUE>
	BL CONFIG
     968:	eb000004 	bl	980 <CONFIG>

0000096c <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     96c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     970:	e3510004 	cmp	r1, #4
	BLT LOOP
     974:	bafffff9 	blt	960 <LOOP>

00000978 <DONE>:

DONE:
	POP {R4-R7, LR}
     978:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     97c:	e12fff1e 	bx	lr

00000980 <CONFIG>:


CONFIG:
	PUSH {LR}
     980:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     984:	e59f3148 	ldr	r3, [pc, #328]	; ad4 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     988:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     98c:	eb000005 	bl	9a8 <DISABLE>
	BL SET_LOAD_VAL
     990:	eb000008 	bl	9b8 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     994:	eb00000e 	bl	9d4 <SET_LOAD_BIT>
	BL SET_INT_BIT
     998:	eb000013 	bl	9ec <SET_INT_BIT>
	BL SET_EN_BIT
     99c:	eb000019 	bl	a08 <SET_EN_BIT>
	
	POP {LR}
     9a0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     9a4:	e12fff1e 	bx	lr

000009a8 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     9a8:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     9ac:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     9b0:	e5845008 	str	r5, [r4, #8]
	BX LR
     9b4:	e12fff1e 	bx	lr

000009b8 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     9b8:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     9bc:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     9c0:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     9c4:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     9c8:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     9cc:	e5845000 	str	r5, [r4]
	BX LR
     9d0:	e12fff1e 	bx	lr

000009d4 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     9d4:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     9d8:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     9dc:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     9e0:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     9e4:	e5845008 	str	r5, [r4, #8]
	BX LR
     9e8:	e12fff1e 	bx	lr

000009ec <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     9ec:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     9f0:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     9f4:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     9f8:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     9fc:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     a00:	e5845008 	str	r5, [r4, #8]
	BX LR
     a04:	e12fff1e 	bx	lr

00000a08 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     a08:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     a0c:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     a10:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     a14:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     a18:	e5845008 	str	r5, [r4, #8]
	BX LR
     a1c:	e12fff1e 	bx	lr

00000a20 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
     a20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     a24:	e3a01000 	mov	r1, #0
	MOV R2, #1
     a28:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     a2c:	eaffffff 	b	a30 <CLEAR_INT_LOOP>

00000a30 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     a30:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     a34:	0a000000 	beq	a3c <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     a38:	eb000005 	bl	a54 <CLEAR_INT>

00000a3c <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     a3c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     a40:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     a44:	bafffff9 	blt	a30 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     a48:	eaffffff 	b	a4c <CLEAR_INT_DONE>

00000a4c <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     a4c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     a50:	e12fff1e 	bx	lr

00000a54 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     a54:	e59f3078 	ldr	r3, [pc, #120]	; ad4 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     a58:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     a5c:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     a60:	e12fff1e 	bx	lr

00000a64 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     a64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     a68:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     a6c:	e3a01000 	mov	r1, #0
	MOV R2, #1
     a70:	e3a02001 	mov	r2, #1
	MOV R4, #0
     a74:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     a78:	eaffffff 	b	a7c <READ_INT_LOOP>

00000a7c <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     a7c:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     a80:	0a000000 	beq	a88 <READ_INT_CONTINUE>
	BL READ_INT
     a84:	eb000008 	bl	aac <READ_INT>

00000a88 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     a88:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     a8c:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     a90:	0a000001 	beq	a9c <READ_INT_DONE>
	LSL R4, R4, #1
     a94:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     a98:	eafffff7 	b	a7c <READ_INT_LOOP>

00000a9c <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     a9c:	e1a00004 	mov	r0, r4
	POP {R4}
     aa0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     aa4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     aa8:	e12fff1e 	bx	lr

00000aac <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     aac:	e59f3020 	ldr	r3, [pc, #32]	; ad4 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     ab0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     ab4:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
     ab8:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
     abc:	e0244003 	eor	r4, r4, r3
	BX LR
     ac0:	e12fff1e 	bx	lr

00000ac4 <HPS_TIM_BASE>:
     ac4:	ffc08000 	.word	0xffc08000
     ac8:	ffc09000 	.word	0xffc09000
     acc:	ffd00000 	.word	0xffd00000
     ad0:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     ad4:	00000ac4 	.word	0x00000ac4

00000ad8 <read_LEDs_ASM>:
		.equ L_BASE, 0xFF200000
		.global read_LEDs_ASM
		.global write_LEDs_ASM

read_LEDs_ASM:
		LDR R1, =L_BASE
     ad8:	e59f1010 	ldr	r1, [pc, #16]	; af0 <write_LEDs_ASM+0xc>
		LDR R0, [R1]
     adc:	e5910000 	ldr	r0, [r1]
		BX LR
     ae0:	e12fff1e 	bx	lr

00000ae4 <write_LEDs_ASM>:

write_LEDs_ASM:
		LDR R1, =L_BASE
     ae4:	e59f1004 	ldr	r1, [pc, #4]	; af0 <write_LEDs_ASM+0xc>
		STR R0, [R1]
     ae8:	e5810000 	str	r0, [r1]
		BX LR
     aec:	e12fff1e 	bx	lr
		.equ L_BASE, 0xFF200000
		.global read_LEDs_ASM
		.global write_LEDs_ASM

read_LEDs_ASM:
		LDR R1, =L_BASE
     af0:	ff200000 	.word	0xff200000

00000af4 <read_slider_switches_ASM>:
		.text
		.equ SW_BASE, 0xFF200040
		.global read_slider_switches_ASM

read_slider_switches_ASM:
		LDR R1, =SW_BASE
     af4:	e59f1004 	ldr	r1, [pc, #4]	; b00 <read_slider_switches_ASM+0xc>
		LDR R0, [R1]
     af8:	e5910000 	ldr	r0, [r1]
		BX LR
     afc:	e12fff1e 	bx	lr
		.text
		.equ SW_BASE, 0xFF200040
		.global read_slider_switches_ASM

read_slider_switches_ASM:
		LDR R1, =SW_BASE
     b00:	ff200040 	.word	0xff200040

00000b04 <hps_tim0_int_flag>:
     b04:	00000000 	.word	0x00000000

00000b08 <pb_int_flag>:
     b08:	00000000 	.word	0x00000000

00000b0c <A9_PRIV_TIM_ISR>:

pb_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     b0c:	e12fff1e 	bx	lr

00000b10 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     b10:	e12fff1e 	bx	lr

00000b14 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}					//Push LR to stack
     b14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     b18:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM	//Clear tim0
     b1c:	ebffffbf 	bl	a20 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     b20:	e59f0054 	ldr	r0, [pc, #84]	; b7c <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     b24:	e3a01001 	mov	r1, #1
	STR R1, [R0]				//Set flag to 1
     b28:	e5801000 	str	r1, [r0]

	POP {LR}					//Pop LR from stack
     b2c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     b30:	e12fff1e 	bx	lr

00000b34 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     b34:	e12fff1e 	bx	lr

00000b38 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     b38:	e12fff1e 	bx	lr

00000b3c <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     b3c:	e12fff1e 	bx	lr

00000b40 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     b40:	e12fff1e 	bx	lr

00000b44 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}					//Push LR to stack
     b44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	BL read_PB_edgecap_ASM		//Get pushbutton that was pressed
     b48:	eb000124 	bl	fe0 <read_PB_edgecap_ASM>

	LDR R1, =pb_int_flag
     b4c:	e59f102c 	ldr	r1, [pc, #44]	; b80 <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]				//Set flag to value of pb
     b50:	e5810000 	str	r0, [r1]

	BL PB_clear_edgecap_ASM		//Clear edgecap to reset interrupt
     b54:	eb00013d 	bl	1050 <PB_clear_edgecap_ASM>

	POP {LR}					//Pop LR from stack
     b58:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     b5c:	e12fff1e 	bx	lr

00000b60 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     b60:	e12fff1e 	bx	lr

00000b64 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     b64:	e12fff1e 	bx	lr

00000b68 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     b68:	e12fff1e 	bx	lr

00000b6c <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     b6c:	e12fff1e 	bx	lr

00000b70 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     b70:	e12fff1e 	bx	lr

00000b74 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     b74:	e12fff1e 	bx	lr

00000b78 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     b78:	e12fff1e 	bx	lr
	PUSH {LR}					//Push LR to stack
	
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM	//Clear tim0

	LDR R0, =hps_tim0_int_flag
     b7c:	00000b04 	.word	0x00000b04
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}					//Push LR to stack
	BL read_PB_edgecap_ASM		//Get pushbutton that was pressed

	LDR R1, =pb_int_flag
     b80:	00000b08 	.word	0x00000b08

00000b84 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     b84:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b88:	e28db000 	add	r11, sp, #0
     b8c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     b90:	e3a030d3 	mov	r3, #211	; 0xd3
     b94:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     b98:	e51b3008 	ldr	r3, [r11, #-8]
     b9c:	e129f003 	msr	CPSR_fc, r3
}
     ba0:	e28bd000 	add	sp, r11, #0
     ba4:	e8bd0800 	ldmfd	sp!, {r11}
     ba8:	e12fff1e 	bx	lr

00000bac <enable_A9_interrupts>:

void enable_A9_interrupts() {
     bac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bb0:	e28db000 	add	r11, sp, #0
     bb4:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     bb8:	e3a03053 	mov	r3, #83	; 0x53
     bbc:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     bc0:	e51b3008 	ldr	r3, [r11, #-8]
     bc4:	e129f003 	msr	CPSR_fc, r3
}
     bc8:	e28bd000 	add	sp, r11, #0
     bcc:	e8bd0800 	ldmfd	sp!, {r11}
     bd0:	e12fff1e 	bx	lr

00000bd4 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     bd4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bd8:	e28db000 	add	r11, sp, #0
     bdc:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     be0:	e3e03007 	mvn	r3, #7
     be4:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     be8:	e3a030d2 	mov	r3, #210	; 0xd2
     bec:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     bf0:	e51b300c 	ldr	r3, [r11, #-12]
     bf4:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     bf8:	e51b3008 	ldr	r3, [r11, #-8]
     bfc:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     c00:	e3a030d3 	mov	r3, #211	; 0xd3
     c04:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     c08:	e51b300c 	ldr	r3, [r11, #-12]
     c0c:	e129f003 	msr	CPSR_fc, r3
}
     c10:	e28bd000 	add	sp, r11, #0
     c14:	e8bd0800 	ldmfd	sp!, {r11}
     c18:	e12fff1e 	bx	lr

00000c1c <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     c1c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     c20:	e28db000 	add	r11, sp, #0
     c24:	e24dd01c 	sub	sp, sp, #28
     c28:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     c2c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     c30:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c34:	e1a031c3 	asr	r3, r3, #3
     c38:	e3c33003 	bic	r3, r3, #3
     c3c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     c40:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c44:	e203301f 	and	r3, r3, #31
     c48:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     c4c:	e3a02001 	mov	r2, #1
     c50:	e51b300c 	ldr	r3, [r11, #-12]
     c54:	e1a03312 	lsl	r3, r2, r3
     c58:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     c5c:	e51b3008 	ldr	r3, [r11, #-8]
     c60:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     c64:	e2433c03 	sub	r3, r3, #768	; 0x300
     c68:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     c6c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     c70:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     c74:	e5921000 	ldr	r1, [r2]
     c78:	e51b2010 	ldr	r2, [r11, #-16]
     c7c:	e1812002 	orr	r2, r1, r2
     c80:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     c84:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c88:	e3c33003 	bic	r3, r3, #3
     c8c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     c90:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c94:	e2033003 	and	r3, r3, #3
     c98:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     c9c:	e51b2008 	ldr	r2, [r11, #-8]
     ca0:	e51b300c 	ldr	r3, [r11, #-12]
     ca4:	e0823003 	add	r3, r2, r3
     ca8:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     cac:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     cb0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     cb4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     cb8:	e6ef2072 	uxtb	r2, r2
     cbc:	e5c32000 	strb	r2, [r3]
}
     cc0:	e28bd000 	add	sp, r11, #0
     cc4:	e8bd0800 	ldmfd	sp!, {r11}
     cc8:	e12fff1e 	bx	lr

00000ccc <config_GIC>:

void config_GIC(int len, int* IDs) {
     ccc:	e92d4800 	push	{r11, lr}
     cd0:	e28db004 	add	r11, sp, #4
     cd4:	e24dd010 	sub	sp, sp, #16
     cd8:	e50b0010 	str	r0, [r11, #-16]
     cdc:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     ce0:	e3a03000 	mov	r3, #0
     ce4:	e50b3008 	str	r3, [r11, #-8]
     ce8:	ea00000a 	b	d18 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     cec:	e51b3008 	ldr	r3, [r11, #-8]
     cf0:	e1a03103 	lsl	r3, r3, #2
     cf4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     cf8:	e0823003 	add	r3, r2, r3
     cfc:	e5933000 	ldr	r3, [r3]
     d00:	e1a00003 	mov	r0, r3
     d04:	e3a01001 	mov	r1, #1
     d08:	ebffffc3 	bl	c1c <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     d0c:	e51b3008 	ldr	r3, [r11, #-8]
     d10:	e2833001 	add	r3, r3, #1
     d14:	e50b3008 	str	r3, [r11, #-8]
     d18:	e51b2008 	ldr	r2, [r11, #-8]
     d1c:	e51b3010 	ldr	r3, [r11, #-16]
     d20:	e1520003 	cmp	r2, r3
     d24:	bafffff0 	blt	cec <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     d28:	e30c3104 	movw	r3, #49412	; 0xc104
     d2c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d30:	e30f2fff 	movw	r2, #65535	; 0xffff
     d34:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     d38:	e3a03cc1 	mov	r3, #49408	; 0xc100
     d3c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d40:	e3a02001 	mov	r2, #1
     d44:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     d48:	e3a03a0d 	mov	r3, #53248	; 0xd000
     d4c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d50:	e3a02001 	mov	r2, #1
     d54:	e5832000 	str	r2, [r3]
}
     d58:	e24bd004 	sub	sp, r11, #4
     d5c:	e8bd8800 	pop	{r11, pc}

00000d60 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     d60:	e24ee004 	sub	lr, lr, #4
     d64:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     d68:	e28db018 	add	r11, sp, #24
     d6c:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     d70:	e30c310c 	movw	r3, #49420	; 0xc10c
     d74:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d78:	e5933000 	ldr	r3, [r3]
     d7c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     d80:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     d84:	e3530053 	cmp	r3, #83	; 0x53
     d88:	0a00003d 	beq	e84 <__cs3_isr_irq+0x124>
     d8c:	e3530053 	cmp	r3, #83	; 0x53
     d90:	ca000011 	bgt	ddc <__cs3_isr_irq+0x7c>
     d94:	e353004e 	cmp	r3, #78	; 0x4e
     d98:	0a000031 	beq	e64 <__cs3_isr_irq+0x104>
     d9c:	e353004e 	cmp	r3, #78	; 0x4e
     da0:	ca000006 	bgt	dc0 <__cs3_isr_irq+0x60>
     da4:	e3530048 	cmp	r3, #72	; 0x48
     da8:	0a000029 	beq	e54 <__cs3_isr_irq+0xf4>
     dac:	e3530049 	cmp	r3, #73	; 0x49
     db0:	0a000029 	beq	e5c <__cs3_isr_irq+0xfc>
     db4:	e353001d 	cmp	r3, #29
     db8:	0a000019 	beq	e24 <__cs3_isr_irq+0xc4>
     dbc:	ea000036 	b	e9c <__cs3_isr_irq+0x13c>
     dc0:	e3530050 	cmp	r3, #80	; 0x50
     dc4:	0a00002a 	beq	e74 <__cs3_isr_irq+0x114>
     dc8:	e3530050 	cmp	r3, #80	; 0x50
     dcc:	ba000026 	blt	e6c <__cs3_isr_irq+0x10c>
     dd0:	e3530051 	cmp	r3, #81	; 0x51
     dd4:	0a000028 	beq	e7c <__cs3_isr_irq+0x11c>
     dd8:	ea00002f 	b	e9c <__cs3_isr_irq+0x13c>
     ddc:	e35300c7 	cmp	r3, #199	; 0xc7
     de0:	0a000013 	beq	e34 <__cs3_isr_irq+0xd4>
     de4:	e35300c7 	cmp	r3, #199	; 0xc7
     de8:	ca000006 	bgt	e08 <__cs3_isr_irq+0xa8>
     dec:	e3530059 	cmp	r3, #89	; 0x59
     df0:	0a000027 	beq	e94 <__cs3_isr_irq+0x134>
     df4:	e35300c5 	cmp	r3, #197	; 0xc5
     df8:	0a00000b 	beq	e2c <__cs3_isr_irq+0xcc>
     dfc:	e3530054 	cmp	r3, #84	; 0x54
     e00:	0a000021 	beq	e8c <__cs3_isr_irq+0x12c>
     e04:	ea000024 	b	e9c <__cs3_isr_irq+0x13c>
     e08:	e35300c9 	cmp	r3, #201	; 0xc9
     e0c:	0a00000c 	beq	e44 <__cs3_isr_irq+0xe4>
     e10:	e35300c9 	cmp	r3, #201	; 0xc9
     e14:	ba000008 	blt	e3c <__cs3_isr_irq+0xdc>
     e18:	e35300ca 	cmp	r3, #202	; 0xca
     e1c:	0a00000a 	beq	e4c <__cs3_isr_irq+0xec>
     e20:	ea00001d 	b	e9c <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     e24:	ebffff38 	bl	b0c <A9_PRIV_TIM_ISR>
     e28:	ea00001c 	b	ea0 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     e2c:	ebffff37 	bl	b10 <HPS_GPIO1_ISR>
     e30:	ea00001a 	b	ea0 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     e34:	ebffff36 	bl	b14 <HPS_TIM0_ISR>
     e38:	ea000018 	b	ea0 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     e3c:	ebffff3c 	bl	b34 <HPS_TIM1_ISR>
     e40:	ea000016 	b	ea0 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     e44:	ebffff3b 	bl	b38 <HPS_TIM2_ISR>
     e48:	ea000014 	b	ea0 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     e4c:	ebffff3a 	bl	b3c <HPS_TIM3_ISR>
     e50:	ea000012 	b	ea0 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     e54:	ebffff39 	bl	b40 <FPGA_INTERVAL_TIM_ISR>
     e58:	ea000010 	b	ea0 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     e5c:	ebffff38 	bl	b44 <FPGA_PB_KEYS_ISR>
     e60:	ea00000e 	b	ea0 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     e64:	ebffff3d 	bl	b60 <FPGA_Audio_ISR>
     e68:	ea00000c 	b	ea0 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     e6c:	ebffff3c 	bl	b64 <FPGA_PS2_ISR>
     e70:	ea00000a 	b	ea0 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     e74:	ebffff3b 	bl	b68 <FPGA_JTAG_ISR>
     e78:	ea000008 	b	ea0 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     e7c:	ebffff3a 	bl	b6c <FPGA_IrDA_ISR>
     e80:	ea000006 	b	ea0 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     e84:	ebffff39 	bl	b70 <FPGA_JP1_ISR>
     e88:	ea000004 	b	ea0 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     e8c:	ebffff38 	bl	b74 <FPGA_JP2_ISR>
     e90:	ea000002 	b	ea0 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     e94:	ebffff37 	bl	b78 <FPGA_PS2_DUAL_ISR>
     e98:	ea000000 	b	ea0 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     e9c:	eafffffe 	b	e9c <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     ea0:	e30c3110 	movw	r3, #49424	; 0xc110
     ea4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ea8:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     eac:	e5832000 	str	r2, [r3]
}
     eb0:	e24bd018 	sub	sp, r11, #24
     eb4:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000eb8 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     eb8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ebc:	e28db000 	add	r11, sp, #0
	while(1);
     ec0:	eafffffe 	b	ec0 <__cs3_reset+0x8>

00000ec4 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     ec4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ec8:	e28db000 	add	r11, sp, #0
	while(1);
     ecc:	eafffffe 	b	ecc <__cs3_isr_undef+0x8>

00000ed0 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     ed0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ed4:	e28db000 	add	r11, sp, #0
	while(1);
     ed8:	eafffffe 	b	ed8 <__cs3_isr_swi+0x8>

00000edc <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     edc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ee0:	e28db000 	add	r11, sp, #0
	while(1);
     ee4:	eafffffe 	b	ee4 <__cs3_isr_pabort+0x8>

00000ee8 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     ee8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     eec:	e28db000 	add	r11, sp, #0
	while(1);
     ef0:	eafffffe 	b	ef0 <__cs3_isr_dabort+0x8>

00000ef4 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     ef4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ef8:	e28db000 	add	r11, sp, #0
	while(1);
     efc:	eafffffe 	b	efc <__cs3_isr_fiq+0x8>

00000f00 <fix_bug>:
}

void fix_bug() {
     f00:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f04:	e28db000 	add	r11, sp, #0
     f08:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     f0c:	e30d3198 	movw	r3, #53656	; 0xd198
     f10:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     f14:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     f18:	e51b3008 	ldr	r3, [r11, #-8]
     f1c:	e3a02703 	mov	r2, #786432	; 0xc0000
     f20:	e5832000 	str	r2, [r3]
}
     f24:	e28bd000 	add	sp, r11, #0
     f28:	e8bd0800 	ldmfd	sp!, {r11}
     f2c:	e12fff1e 	bx	lr

00000f30 <int_setup>:

void int_setup(int len, int* IDs) {
     f30:	e92d4800 	push	{r11, lr}
     f34:	e28db004 	add	r11, sp, #4
     f38:	e24dd008 	sub	sp, sp, #8
     f3c:	e50b0008 	str	r0, [r11, #-8]
     f40:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     f44:	ebffff0e 	bl	b84 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     f48:	ebffff21 	bl	bd4 <set_A9_IRQ_stack>
	fix_bug();
     f4c:	ebffffeb 	bl	f00 <fix_bug>
	config_GIC(len, IDs);
     f50:	e51b0008 	ldr	r0, [r11, #-8]
     f54:	e51b100c 	ldr	r1, [r11, #-12]
     f58:	ebffff5b 	bl	ccc <config_GIC>
	enable_A9_interrupts();
     f5c:	ebffff12 	bl	bac <enable_A9_interrupts>
}
     f60:	e24bd004 	sub	sp, r11, #4
     f64:	e8bd8800 	pop	{r11, pc}

00000f68 <read_PB_data_ASM>:
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecap_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM


read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
     f68:	e59f116c 	ldr	r1, [pc, #364]	; 10dc <STORE_INTERRUPT_DISABLE+0x8>
LDR R0, [R1]
     f6c:	e5910000 	ldr	r0, [r1]
BX LR				
     f70:	e12fff1e 	bx	lr

00000f74 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
//R0 parameter from C
LDR R1, =PUSHBUTTON_BASE
     f74:	e59f1160 	ldr	r1, [pc, #352]	; 10dc <STORE_INTERRUPT_DISABLE+0x8>
LDR R2, [R1]			//value of the data register
     f78:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
     f7c:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
     f80:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
     f84:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     f88:	03a00001 	moveq	r0, #1
BXEQ LR
     f8c:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
     f90:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
     f94:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     f98:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
     f9c:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     fa0:	03a00001 	moveq	r0, #1
BXEQ LR
     fa4:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
     fa8:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
     fac:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
     fb0:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
     fb4:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     fb8:	03a00001 	moveq	r0, #1
BXEQ LR
     fbc:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
     fc0:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
     fc4:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
     fc8:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
     fcc:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
     fd0:	03a00001 	moveq	r0, #1
BXEQ LR
     fd4:	012fff1e 	bxeq	lr

MOV R0, #0
     fd8:	e3a00000 	mov	r0, #0
BX LR
     fdc:	e12fff1e 	bx	lr

00000fe0 <read_PB_edgecap_ASM>:
read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
     fe0:	e59f10f8 	ldr	r1, [pc, #248]	; 10e0 <STORE_INTERRUPT_DISABLE+0xc>
LDR R0, [R1]
     fe4:	e5910000 	ldr	r0, [r1]
BX LR
     fe8:	e12fff1e 	bx	lr

00000fec <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
     fec:	e59f10ec 	ldr	r1, [pc, #236]	; 10e0 <STORE_INTERRUPT_DISABLE+0xc>
LDR R2, [R1]			//value of edge register
     ff0:	e5912000 	ldr	r2, [r1]

CMP R0, #1				//Check whether parameter is pb0
     ff4:	e3500001 	cmp	r0, #1
ANDEQ R3, R2, #1		//get the 0 bit value
     ff8:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the 0 bit is 1
     ffc:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
    1000:	03a00001 	moveq	r0, #1
BXEQ LR
    1004:	012fff1e 	bxeq	lr

CMP R0, #2				//Check whether parameter is pb1
    1008:	e3500002 	cmp	r0, #2
LSR R2, R2, #1			
    100c:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
    1010:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT1 is 1
    1014:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
    1018:	03a00001 	moveq	r0, #1
BXEQ LR
    101c:	012fff1e 	bxeq	lr

CMP R0, #4				//Check whether parameter is pb1
    1020:	e3500004 	cmp	r0, #4
LSR R2, R2, #1			
    1024:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT2 value
    1028:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT2 is 
    102c:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
    1030:	03a00001 	moveq	r0, #1
BXEQ LR
    1034:	012fff1e 	bxeq	lr

CMP R0, #8				//Check whether parameter is pb1
    1038:	e3500008 	cmp	r0, #8
LSR R2, R2, #1			
    103c:	e1a020a2 	lsr	r2, r2, #1
ANDEQ R3, R2, #1		//get the BIT1 value
    1040:	02023001 	andeq	r3, r2, #1
CMP R3, #1				//check whether the BIT3 is 1
    1044:	e3530001 	cmp	r3, #1
MOVEQ R0, #1
    1048:	03a00001 	moveq	r0, #1
BXEQ LR
    104c:	012fff1e 	bxeq	lr

00001050 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:				//R0 contains which pushbutton
LDR R1, =PUSHBUTTON_EDGECAPTURE
    1050:	e59f1088 	ldr	r1, [pc, #136]	; 10e0 <STORE_INTERRUPT_DISABLE+0xc>
MOV R2, R0					//storing any value in edgecap will reset, p.21 (anything but #0) would work
    1054:	e1a02000 	mov	r2, r0
STR R2, [R1]
    1058:	e5812000 	str	r2, [r1]
BX LR
    105c:	e12fff1e 	bx	lr

00001060 <enable_PB_INT_ASM>:
enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
    1060:	e59f107c 	ldr	r1, [pc, #124]	; 10e4 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
    1064:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
    1068:	e3a04003 	mov	r4, #3
MOV R5, #0x0000000F		//mask
    106c:	e3a0500f 	mov	r5, #15

00001070 <LOOP_ENABLE_INT>:
LOOP_ENABLE_INT:
SUBS R4, R4, #1			//update counter
    1070:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_ENABLE
    1074:	ba000006 	blt	1094 <STORE_INTERRUPT_ENABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
    1078:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
    107c:	e3530001 	cmp	r3, #1
ORREQ R2, R2, R5		//modify the value
    1080:	01822005 	orreq	r2, r2, r5
MOV R6, #2
    1084:	e3a06002 	mov	r6, #2
MUL R5, R5, R6			//update the mask for the next iteration
    1088:	e0050695 	mul	r5, r5, r6
LSR R0, #1
    108c:	e1a000a0 	lsr	r0, r0, #1
B LOOP_ENABLE_INT
    1090:	eafffff6 	b	1070 <LOOP_ENABLE_INT>

00001094 <STORE_INTERRUPT_ENABLE>:
STORE_INTERRUPT_ENABLE:
STR R2, [R1]
    1094:	e5812000 	str	r2, [r1]
BX LR
    1098:	e12fff1e 	bx	lr

0000109c <disable_PB_INT_ASM>:


disable_PB_INT_ASM:
LDR R1, =PUSHBUTTON_INTERRUPTION
    109c:	e59f1040 	ldr	r1, [pc, #64]	; 10e4 <STORE_INTERRUPT_DISABLE+0x10>
LDR R2, [R1]			//value of interrupt register
    10a0:	e5912000 	ldr	r2, [r1]
MOV R4, #3				//counter for loop
    10a4:	e3a04003 	mov	r4, #3
MOV R5, #0xFFFFFFF0		//mask
    10a8:	e3e0500f 	mvn	r5, #15

000010ac <LOOP_DISABLE_INT>:
LOOP_DISABLE_INT:
SUBS R4, R4, #1			//update counter
    10ac:	e2544001 	subs	r4, r4, #1
BLT  STORE_INTERRUPT_DISABLE
    10b0:	ba000007 	blt	10d4 <STORE_INTERRUPT_DISABLE>
AND R3, R0, #1			//R0: the parameter from C; this gets the last bit's value
    10b4:	e2003001 	and	r3, r0, #1
CMP R3, #1				//Check the result of the last bit
    10b8:	e3530001 	cmp	r3, #1
ANDEQ R2, R2, R5		//modify the value
    10bc:	00022005 	andeq	r2, r2, r5
MOV R6, #2
    10c0:	e3a06002 	mov	r6, #2
MOV R7, #15
    10c4:	e3a0700f 	mov	r7, #15
MLA R5, R5, R6, R7		//update the mask for the next iteration
    10c8:	e0257695 	mla	r5, r5, r6, r7
LSR R0, #1
    10cc:	e1a000a0 	lsr	r0, r0, #1
B LOOP_DISABLE_INT
    10d0:	eafffff5 	b	10ac <LOOP_DISABLE_INT>

000010d4 <STORE_INTERRUPT_DISABLE>:
STORE_INTERRUPT_DISABLE:
STR R2, [R1]
    10d4:	e5812000 	str	r2, [r1]
BX LR
    10d8:	e12fff1e 	bx	lr
.equ PUSHBUTTON_EDGECAPTURE, 0xFF20005C
.global read_PB_data_ASM, PB_data_is_pressed_ASM, read_PB_edgecap_ASM, PB_edgecap_is_pressed_ASM, PB_clear_edgecap_ASM, enable_PB_INT_ASM, disable_PB_INT_ASM


read_PB_data_ASM:
LDR R1, =PUSHBUTTON_BASE
    10dc:	ff200050 	.word	0xff200050
BXEQ LR

MOV R0, #0
BX LR
read_PB_edgecap_ASM:
LDR R1, =PUSHBUTTON_EDGECAPTURE
    10e0:	ff20005c 	.word	0xff20005c
MOV R2, R0					//storing any value in edgecap will reset, p.21 (anything but #0) would work
STR R2, [R1]
BX LR
enable_PB_INT_ASM:
//R0 from c parameter
LDR R1, =PUSHBUTTON_INTERRUPTION
    10e4:	ff200058 	.word	0xff200058

000010e8 <atexit>:
    10e8:	e1a01000 	mov	r1, r0
    10ec:	e3a00000 	mov	r0, #0
    10f0:	e92d4008 	push	{r3, lr}
    10f4:	e1a02000 	mov	r2, r0
    10f8:	e1a03000 	mov	r3, r0
    10fc:	eb00000e 	bl	113c <__register_exitproc>
    1100:	e8bd4008 	pop	{r3, lr}
    1104:	e12fff1e 	bx	lr

00001108 <exit>:
    1108:	e92d4008 	push	{r3, lr}
    110c:	e3a01000 	mov	r1, #0
    1110:	e1a04000 	mov	r4, r0
    1114:	eb000045 	bl	1230 <__call_exitprocs>
    1118:	e59f3018 	ldr	r3, [pc, #24]	; 1138 <exit+0x30>
    111c:	e5930000 	ldr	r0, [r3]
    1120:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1124:	e3530000 	cmp	r3, #0
    1128:	11a0e00f 	movne	lr, pc
    112c:	112fff13 	bxne	r3
    1130:	e1a00004 	mov	r0, r4
    1134:	eb0000c9 	bl	1460 <_exit>
    1138:	00001510 	.word	0x00001510

0000113c <__register_exitproc>:
    113c:	e59fc0e4 	ldr	r12, [pc, #228]	; 1228 <__register_exitproc+0xec>
    1140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1144:	e59c4000 	ldr	r4, [r12]
    1148:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    114c:	e35c0000 	cmp	r12, #0
    1150:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1154:	e59c5004 	ldr	r5, [r12, #4]
    1158:	0584c148 	streq	r12, [r4, #328]	; 0x148
    115c:	e355001f 	cmp	r5, #31
    1160:	e24dd010 	sub	sp, sp, #16
    1164:	e1a06000 	mov	r6, r0
    1168:	da000015 	ble	11c4 <__register_exitproc+0x88>
    116c:	e59f00b8 	ldr	r0, [pc, #184]	; 122c <__register_exitproc+0xf0>
    1170:	e3500000 	cmp	r0, #0
    1174:	1a000001 	bne	1180 <__register_exitproc+0x44>
    1178:	e3e00000 	mvn	r0, #0
    117c:	ea000018 	b	11e4 <__register_exitproc+0xa8>
    1180:	e3a00e19 	mov	r0, #400	; 0x190
    1184:	e58d100c 	str	r1, [sp, #12]
    1188:	e58d2008 	str	r2, [sp, #8]
    118c:	e58d3004 	str	r3, [sp, #4]
    1190:	e320f000 	nop	{0}
    1194:	e250c000 	subs	r12, r0, #0
    1198:	e59d100c 	ldr	r1, [sp, #12]
    119c:	e59d2008 	ldr	r2, [sp, #8]
    11a0:	e59d3004 	ldr	r3, [sp, #4]
    11a4:	0afffff3 	beq	1178 <__register_exitproc+0x3c>
    11a8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    11ac:	e3a00000 	mov	r0, #0
    11b0:	e58c0004 	str	r0, [r12, #4]
    11b4:	e58c5000 	str	r5, [r12]
    11b8:	e584c148 	str	r12, [r4, #328]	; 0x148
    11bc:	e58c0188 	str	r0, [r12, #392]	; 0x188
    11c0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    11c4:	e3560000 	cmp	r6, #0
    11c8:	e59c4004 	ldr	r4, [r12, #4]
    11cc:	1a000007 	bne	11f0 <__register_exitproc+0xb4>
    11d0:	e2843002 	add	r3, r4, #2
    11d4:	e2844001 	add	r4, r4, #1
    11d8:	e78c1103 	str	r1, [r12, r3, lsl #2]
    11dc:	e58c4004 	str	r4, [r12, #4]
    11e0:	e3a00000 	mov	r0, #0
    11e4:	e28dd010 	add	sp, sp, #16
    11e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    11ec:	e12fff1e 	bx	lr
    11f0:	e3a00001 	mov	r0, #1
    11f4:	e1a00410 	lsl	r0, r0, r4
    11f8:	e08c8104 	add	r8, r12, r4, lsl #2
    11fc:	e3560002 	cmp	r6, #2
    1200:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1204:	e5883108 	str	r3, [r8, #264]	; 0x108
    1208:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    120c:	e1877000 	orr	r7, r7, r0
    1210:	01830000 	orreq	r0, r3, r0
    1214:	e1a05008 	mov	r5, r8
    1218:	e5882088 	str	r2, [r8, #136]	; 0x88
    121c:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1220:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1224:	eaffffe9 	b	11d0 <__register_exitproc+0x94>
    1228:	00001510 	.word	0x00001510
    122c:	00000000 	.word	0x00000000

00001230 <__call_exitprocs>:
    1230:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1234:	e59f3168 	ldr	r3, [pc, #360]	; 13a4 <__call_exitprocs+0x174>
    1238:	e5933000 	ldr	r3, [r3]
    123c:	e24dd014 	sub	sp, sp, #20
    1240:	e58d3004 	str	r3, [sp, #4]
    1244:	e2833f52 	add	r3, r3, #328	; 0x148
    1248:	e58d0008 	str	r0, [sp, #8]
    124c:	e58d300c 	str	r3, [sp, #12]
    1250:	e1a07001 	mov	r7, r1
    1254:	e3a08001 	mov	r8, #1
    1258:	e59d3004 	ldr	r3, [sp, #4]
    125c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1260:	e3560000 	cmp	r6, #0
    1264:	e59db00c 	ldr	r11, [sp, #12]
    1268:	0a000033 	beq	133c <__call_exitprocs+0x10c>
    126c:	e5965004 	ldr	r5, [r6, #4]
    1270:	e2554001 	subs	r4, r5, #1
    1274:	5286a088 	addpl	r10, r6, #136	; 0x88
    1278:	5285501f 	addpl	r5, r5, #31
    127c:	508a5105 	addpl	r5, r10, r5, lsl #2
    1280:	5a000007 	bpl	12a4 <__call_exitprocs+0x74>
    1284:	ea000029 	b	1330 <__call_exitprocs+0x100>
    1288:	e5953000 	ldr	r3, [r5]
    128c:	e1530007 	cmp	r3, r7
    1290:	0a000005 	beq	12ac <__call_exitprocs+0x7c>
    1294:	e2444001 	sub	r4, r4, #1
    1298:	e3740001 	cmn	r4, #1
    129c:	e2455004 	sub	r5, r5, #4
    12a0:	0a000022 	beq	1330 <__call_exitprocs+0x100>
    12a4:	e3570000 	cmp	r7, #0
    12a8:	1afffff6 	bne	1288 <__call_exitprocs+0x58>
    12ac:	e5963004 	ldr	r3, [r6, #4]
    12b0:	e06a2005 	rsb	r2, r10, r5
    12b4:	e2433001 	sub	r3, r3, #1
    12b8:	e0862002 	add	r2, r6, r2
    12bc:	e1530004 	cmp	r3, r4
    12c0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    12c4:	13a01000 	movne	r1, #0
    12c8:	05864004 	streq	r4, [r6, #4]
    12cc:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    12d0:	e3530000 	cmp	r3, #0
    12d4:	0affffee 	beq	1294 <__call_exitprocs+0x64>
    12d8:	e1a02418 	lsl	r2, r8, r4
    12dc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    12e0:	e1120001 	tst	r2, r1
    12e4:	e5969004 	ldr	r9, [r6, #4]
    12e8:	0a000016 	beq	1348 <__call_exitprocs+0x118>
    12ec:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    12f0:	e1120001 	tst	r2, r1
    12f4:	1a000016 	bne	1354 <__call_exitprocs+0x124>
    12f8:	e59d0008 	ldr	r0, [sp, #8]
    12fc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1300:	e1a0e00f 	mov	lr, pc
    1304:	e12fff13 	bx	r3
    1308:	e5963004 	ldr	r3, [r6, #4]
    130c:	e1530009 	cmp	r3, r9
    1310:	1affffd0 	bne	1258 <__call_exitprocs+0x28>
    1314:	e59b3000 	ldr	r3, [r11]
    1318:	e1530006 	cmp	r3, r6
    131c:	1affffcd 	bne	1258 <__call_exitprocs+0x28>
    1320:	e2444001 	sub	r4, r4, #1
    1324:	e3740001 	cmn	r4, #1
    1328:	e2455004 	sub	r5, r5, #4
    132c:	1affffdc 	bne	12a4 <__call_exitprocs+0x74>
    1330:	e59f1070 	ldr	r1, [pc, #112]	; 13a8 <__call_exitprocs+0x178>
    1334:	e3510000 	cmp	r1, #0
    1338:	1a000009 	bne	1364 <__call_exitprocs+0x134>
    133c:	e28dd014 	add	sp, sp, #20
    1340:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1344:	e12fff1e 	bx	lr
    1348:	e1a0e00f 	mov	lr, pc
    134c:	e12fff13 	bx	r3
    1350:	eaffffec 	b	1308 <__call_exitprocs+0xd8>
    1354:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1358:	e1a0e00f 	mov	lr, pc
    135c:	e12fff13 	bx	r3
    1360:	eaffffe8 	b	1308 <__call_exitprocs+0xd8>
    1364:	e5963004 	ldr	r3, [r6, #4]
    1368:	e3530000 	cmp	r3, #0
    136c:	e5963000 	ldr	r3, [r6]
    1370:	1a000008 	bne	1398 <__call_exitprocs+0x168>
    1374:	e3530000 	cmp	r3, #0
    1378:	0a000006 	beq	1398 <__call_exitprocs+0x168>
    137c:	e1a00006 	mov	r0, r6
    1380:	e58b3000 	str	r3, [r11]
    1384:	e320f000 	nop	{0}
    1388:	e59b6000 	ldr	r6, [r11]
    138c:	e3560000 	cmp	r6, #0
    1390:	1affffb5 	bne	126c <__call_exitprocs+0x3c>
    1394:	eaffffe8 	b	133c <__call_exitprocs+0x10c>
    1398:	e1a0b006 	mov	r11, r6
    139c:	e1a06003 	mov	r6, r3
    13a0:	eafffff9 	b	138c <__call_exitprocs+0x15c>
    13a4:	00001510 	.word	0x00001510
    13a8:	00000000 	.word	0x00000000

000013ac <register_fini>:
    13ac:	e92d4008 	push	{r3, lr}
    13b0:	e59f3010 	ldr	r3, [pc, #16]	; 13c8 <register_fini+0x1c>
    13b4:	e3530000 	cmp	r3, #0
    13b8:	159f000c 	ldrne	r0, [pc, #12]	; 13cc <register_fini+0x20>
    13bc:	1bffff49 	blne	10e8 <atexit>
    13c0:	e8bd4008 	pop	{r3, lr}
    13c4:	e12fff1e 	bx	lr
    13c8:	00001538 	.word	0x00001538
    13cc:	000013d0 	.word	0x000013d0

000013d0 <__libc_fini_array>:
    13d0:	e92d4038 	push	{r3, r4, r5, lr}
    13d4:	e59f5030 	ldr	r5, [pc, #48]	; 140c <__libc_fini_array+0x3c>
    13d8:	e59f4030 	ldr	r4, [pc, #48]	; 1410 <__libc_fini_array+0x40>
    13dc:	e0654004 	rsb	r4, r5, r4
    13e0:	e1b04144 	asrs	r4, r4, #2
    13e4:	10855104 	addne	r5, r5, r4, lsl #2
    13e8:	0a000004 	beq	1400 <__libc_fini_array+0x30>
    13ec:	e5353004 	ldr	r3, [r5, #-4]!
    13f0:	e1a0e00f 	mov	lr, pc
    13f4:	e12fff13 	bx	r3
    13f8:	e2544001 	subs	r4, r4, #1
    13fc:	1afffffa 	bne	13ec <__libc_fini_array+0x1c>
    1400:	eb00004c 	bl	1538 <__libc_fini>
    1404:	e8bd4038 	pop	{r3, r4, r5, lr}
    1408:	e12fff1e 	bx	lr
    140c:	00001550 	.word	0x00001550
    1410:	00001554 	.word	0x00001554

00001414 <__cs3_premain>:
    1414:	e92d4008 	push	{r3, lr}
    1418:	eb000017 	bl	147c <__libc_init_array>
    141c:	e59f3030 	ldr	r3, [pc, #48]	; 1454 <__cs3_premain+0x40>
    1420:	e3530000 	cmp	r3, #0
    1424:	15930000 	ldrne	r0, [r3]
    1428:	01a00003 	moveq	r0, r3
    142c:	e59f3024 	ldr	r3, [pc, #36]	; 1458 <__cs3_premain+0x44>
    1430:	e3530000 	cmp	r3, #0
    1434:	15931000 	ldrne	r1, [r3]
    1438:	01a01003 	moveq	r1, r3
    143c:	e3a02000 	mov	r2, #0
    1440:	ebfffb85 	bl	25c <main>
    1444:	e59f3010 	ldr	r3, [pc, #16]	; 145c <__cs3_premain+0x48>
    1448:	e3530000 	cmp	r3, #0
    144c:	1bffff2d 	blne	1108 <exit>
    1450:	eafffffe 	b	1450 <__cs3_premain+0x3c>
	...
    145c:	00001108 	.word	0x00001108

00001460 <_exit>:
    1460:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1464:	e3a00018 	mov	r0, #24
    1468:	e59f1004 	ldr	r1, [pc, #4]	; 1474 <_exit+0x14>
    146c:	ef123456 	svc	0x00123456
    1470:	eafffffe 	b	1470 <_exit+0x10>
    1474:	00020026 	.word	0x00020026

00001478 <__cs3_isr_interrupt>:
    1478:	eafffffe 	b	1478 <__cs3_isr_interrupt>

0000147c <__libc_init_array>:
    147c:	e92d4070 	push	{r4, r5, r6, lr}
    1480:	e59f506c 	ldr	r5, [pc, #108]	; 14f4 <__libc_init_array+0x78>
    1484:	e59f606c 	ldr	r6, [pc, #108]	; 14f8 <__libc_init_array+0x7c>
    1488:	e0656006 	rsb	r6, r5, r6
    148c:	e1b06146 	asrs	r6, r6, #2
    1490:	12455004 	subne	r5, r5, #4
    1494:	13a04000 	movne	r4, #0
    1498:	0a000005 	beq	14b4 <__libc_init_array+0x38>
    149c:	e5b53004 	ldr	r3, [r5, #4]!
    14a0:	e2844001 	add	r4, r4, #1
    14a4:	e1a0e00f 	mov	lr, pc
    14a8:	e12fff13 	bx	r3
    14ac:	e1560004 	cmp	r6, r4
    14b0:	1afffff9 	bne	149c <__libc_init_array+0x20>
    14b4:	e59f5040 	ldr	r5, [pc, #64]	; 14fc <__libc_init_array+0x80>
    14b8:	e59f6040 	ldr	r6, [pc, #64]	; 1500 <__libc_init_array+0x84>
    14bc:	e0656006 	rsb	r6, r5, r6
    14c0:	eb000014 	bl	1518 <_init>
    14c4:	e1b06146 	asrs	r6, r6, #2
    14c8:	12455004 	subne	r5, r5, #4
    14cc:	13a04000 	movne	r4, #0
    14d0:	0a000005 	beq	14ec <__libc_init_array+0x70>
    14d4:	e5b53004 	ldr	r3, [r5, #4]!
    14d8:	e2844001 	add	r4, r4, #1
    14dc:	e1a0e00f 	mov	lr, pc
    14e0:	e12fff13 	bx	r3
    14e4:	e1560004 	cmp	r6, r4
    14e8:	1afffff9 	bne	14d4 <__libc_init_array+0x58>
    14ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    14f0:	e12fff1e 	bx	lr
    14f4:	00001530 	.word	0x00001530
    14f8:	00001530 	.word	0x00001530
    14fc:	00001530 	.word	0x00001530
    1500:	00001538 	.word	0x00001538

Disassembly of section .rodata:

00001508 <_global_impure_ptr-0x8>:
    1508:	00000049 	.word	0x00000049
    150c:	000000c7 	.word	0x000000c7

00001510 <_global_impure_ptr>:
    1510:	00001578 00000043                       x...C...

00001518 <_init>:
    1518:	e1a0c00d 	mov	r12, sp
    151c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1520:	e24cb004 	sub	r11, r12, #4
    1524:	e24bd028 	sub	sp, r11, #40	; 0x28
    1528:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    152c:	e12fff1e 	bx	lr

00001530 <__init_array_start>:
    1530:	000013ac 	.word	0x000013ac

00001534 <__frame_dummy_init_array_entry>:
    1534:	00000208                                ....

00001538 <__libc_fini>:
    1538:	e1a0c00d 	mov	r12, sp
    153c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1540:	e24cb004 	sub	r11, r12, #4
    1544:	e24bd028 	sub	sp, r11, #40	; 0x28
    1548:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    154c:	e12fff1e 	bx	lr

00001550 <__fini_array_start>:
    1550:	000001c4 	.word	0x000001c4

00001554 <__cs3_regions>:
	...
    1560:	000019a8 	.word	0x000019a8
    1564:	00000020 	.word	0x00000020
